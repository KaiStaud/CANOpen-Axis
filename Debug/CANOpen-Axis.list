
CANOpen-Axis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de44  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  0800e024  0800e024  0000f024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e98c  0800e98c  00010438  2**0
                  CONTENTS
  4 .ARM          00000008  0800e98c  0800e98c  0000f98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e994  0800e994  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e994  0800e994  0000f994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e998  0800e998  0000f998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000438  20000000  0800e99c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000438  0800edd4  00010438  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  0800edd4  00010800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b48b  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000526f  00000000  00000000  0003b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00040b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e8  00000000  00000000  000425c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba33  00000000  00000000  00043aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e34  00000000  00000000  0006f4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c853  00000000  00000000  0009230f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019eb62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077b8  00000000  00000000  0019eba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001a6360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000438 	.word	0x20000438
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e00c 	.word	0x0800e00c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000043c 	.word	0x2000043c
 800021c:	0800e00c 	.word	0x0800e00c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005e8:	78fa      	ldrb	r2, [r7, #3]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	2304      	movs	r3, #4
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <OD_getIndex+0x14>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	e000      	b.n	8000630 <OD_getIndex+0x16>
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <OD_extension_init+0x14>
 800064c:	2305      	movs	r3, #5
 800064e:	e003      	b.n	8000658 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	460b      	mov	r3, r1
 8000672:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000674:	7af9      	ldrb	r1, [r7, #11]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2304      	movs	r3, #4
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f001 fb5a 	bl	8001d38 <OD_get_value>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00c      	beq.n	80006bc <OD_read_1014_default+0x2e>
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	7d1b      	ldrb	r3, [r3, #20]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d108      	bne.n	80006bc <OD_read_1014_default+0x2e>
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d005      	beq.n	80006bc <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d902      	bls.n	80006bc <OD_read_1014_default+0x2e>
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80006bc:	2309      	movs	r3, #9
 80006be:	e01b      	b.n	80006f8 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <OD_read_1014_default+0x44>
 80006ce:	2300      	movs	r3, #0
 80006d0:	e001      	b.n	80006d6 <OD_read_1014_default+0x48>
 80006d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80006d6:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80006de:	3380      	adds	r3, #128	@ 0x80
 80006e0:	461a      	mov	r2, r3
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80006e8:	6939      	ldr	r1, [r7, #16]
 80006ea:	68b8      	ldr	r0, [r7, #8]
 80006ec:	f7ff ff86 	bl	80005fc <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2204      	movs	r2, #4
 80006f4:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00f      	beq.n	8000734 <OD_read_1003+0x34>
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00c      	beq.n	8000734 <OD_read_1003+0x34>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d009      	beq.n	8000734 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b03      	cmp	r3, #3
 8000724:	d803      	bhi.n	800072e <OD_read_1003+0x2e>
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	7d1b      	ldrb	r3, [r3, #20]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d102      	bne.n	8000734 <OD_read_1003+0x34>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8000734:	2309      	movs	r3, #9
 8000736:	e04c      	b.n	80007d2 <OD_read_1003+0xd2>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	7f1b      	ldrb	r3, [r3, #28]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d801      	bhi.n	800074a <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000746:	2309      	movs	r3, #9
 8000748:	e043      	b.n	80007d2 <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0) {
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	7d1b      	ldrb	r3, [r3, #20]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10b      	bne.n	800076a <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000758:	4619      	mov	r1, r3
 800075a:	68b8      	ldr	r0, [r7, #8]
 800075c:	f7ff ff3e 	bl	80005dc <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e033      	b.n	80007d2 <OD_read_1003+0xd2>
    }
    else if (stream->subIndex <= em->fifoCount) {
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	7d1a      	ldrb	r2, [r3, #20]
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000774:	429a      	cmp	r2, r3
 8000776:	d82b      	bhi.n	80007d0 <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	7f5b      	ldrb	r3, [r3, #29]
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	7d1b      	ldrb	r3, [r3, #20]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	b29b      	uxth	r3, r3
 8000786:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8000788:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800078c:	2b00      	cmp	r3, #0
 800078e:	da07      	bge.n	80007a0 <OD_read_1003+0xa0>
            index += em->fifoSize;
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	7f1b      	ldrb	r3, [r3, #28]
 8000794:	461a      	mov	r2, r3
 8000796:	8afb      	ldrh	r3, [r7, #22]
 8000798:	4413      	add	r3, r2
 800079a:	b29b      	uxth	r3, r3
 800079c:	82fb      	strh	r3, [r7, #22]
 800079e:	e007      	b.n	80007b0 <OD_read_1003+0xb0>
        }
        else if (index >= (em->fifoSize)) {
 80007a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	7f12      	ldrb	r2, [r2, #28]
 80007a8:	4293      	cmp	r3, r2
 80007aa:	db01      	blt.n	80007b0 <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 80007ac:	2309      	movs	r3, #9
 80007ae:	e010      	b.n	80007d2 <OD_read_1003+0xd2>
        }
        else { /* MISRA C 2004 14.10 */ }
        CO_setUint32(buf, em->fifo[index].msg);
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	699a      	ldr	r2, [r3, #24]
 80007b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	4413      	add	r3, r2
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	68b8      	ldr	r0, [r7, #8]
 80007c2:	f7ff ff1b 	bl	80005fc <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2204      	movs	r2, #4
 80007ca:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e000      	b.n	80007d2 <OD_read_1003+0xd2>
    }
    else {
        return ODR_NO_DATA;
 80007d0:	2319      	movs	r3, #25
    }
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00c      	beq.n	8000808 <OD_write_1003+0x2e>
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	7d1b      	ldrb	r3, [r3, #20]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d108      	bne.n	8000808 <OD_write_1003+0x2e>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d005      	beq.n	8000808 <OD_write_1003+0x2e>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d102      	bne.n	8000808 <OD_write_1003+0x2e>
        || countWritten == NULL)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 8000808:	2309      	movs	r3, #9
 800080a:	e012      	b.n	8000832 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 800080c:	68b8      	ldr	r0, [r7, #8]
 800080e:	f7ff fed7 	bl	80005c0 <CO_getUint8>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8000818:	230f      	movs	r3, #15
 800081a:	e00a      	b.n	8000832 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af02      	add	r7, sp, #8
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800084a:	2300      	movs	r3, #0
 800084c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d01a      	beq.n	800088a <CO_EM_init+0x4e>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d017      	beq.n	800088a <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d103      	bne.n	8000868 <CO_EM_init+0x2c>
 8000860:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d810      	bhi.n	800088a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00d      	beq.n	800088a <CO_EM_init+0x4e>
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00a      	beq.n	800088a <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000874:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000878:	2b00      	cmp	r3, #0
 800087a:	d006      	beq.n	800088a <CO_EM_init+0x4e>
 800087c:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8000880:	2b00      	cmp	r3, #0
 8000882:	db02      	blt.n	800088a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800088e:	e0a7      	b.n	80009e0 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8000890:	2250      	movs	r2, #80	@ 0x50
 8000892:	2100      	movs	r1, #0
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f00c ff81 	bl	800d79c <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80008a0:	2300      	movs	r3, #0
 80008a2:	2201      	movs	r2, #1
 80008a4:	2100      	movs	r1, #0
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f001 faad 	bl	8001e06 <OD_getPtr>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10c      	bne.n	80008d4 <CO_EM_init+0x98>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1001_errReg); }
 80008ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <CO_EM_init+0x92>
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff feaa 	bl	800061a <OD_getIndex>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008cc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80008ce:	f06f 030b 	mvn.w	r3, #11
 80008d2:	e085      	b.n	80009e0 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008e8:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80008ea:	f107 0210 	add.w	r2, r7, #16
 80008ee:	2301      	movs	r3, #1
 80008f0:	2100      	movs	r1, #0
 80008f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80008f4:	f7ff feb6 	bl	8000664 <OD_get_u32>
 80008f8:	4603      	mov	r3, r0
 80008fa:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80008fc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d104      	bne.n	800090e <CO_EM_init+0xd2>
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4b38      	ldr	r3, [pc, #224]	@ (80009e8 <CO_EM_init+0x1ac>)
 8000908:	4013      	ands	r3, r2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d010      	beq.n	8000930 <CO_EM_init+0xf4>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1014_cobIdEm); }
 800090e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000910:	2b00      	cmp	r3, #0
 8000912:	d006      	beq.n	8000922 <CO_EM_init+0xe6>
 8000914:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000916:	f7ff fe80 	bl	800061a <OD_getIndex>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000920:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) { return CO_ERROR_OD_PARAMETERS; }
 8000922:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <CO_EM_init+0xf4>
 800092a:	f06f 030b 	mvn.w	r3, #11
 800092e:	e057      	b.n	80009e0 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8000930:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000934:	b29b      	uxth	r3, r3
 8000936:	3380      	adds	r3, #128	@ 0x80
 8000938:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	43db      	mvns	r3, r3
 800093e:	0fdb      	lsrs	r3, r3, #31
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4a26      	ldr	r2, [pc, #152]	@ (80009ec <CO_EM_init+0x1b0>)
 8000952:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4a26      	ldr	r2, [pc, #152]	@ (80009f0 <CO_EM_init+0x1b4>)
 8000958:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3330      	adds	r3, #48	@ 0x30
 800095e:	4619      	mov	r1, r3
 8000960:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000962:	f7ff fe6b 	bl	800063c <OD_extension_init>
 8000966:	4603      	mov	r3, r0
 8000968:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800096a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <CO_EM_init+0x150>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1014_cobIdEm); }
 8000972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000974:	2b00      	cmp	r3, #0
 8000976:	d006      	beq.n	8000986 <CO_EM_init+0x14a>
 8000978:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800097a:	f7ff fe4e 	bl	800061a <OD_getIndex>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000984:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000986:	f06f 030b 	mvn.w	r3, #11
 800098a:	e029      	b.n	80009e0 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8000996:	8aba      	ldrh	r2, [r7, #20]
 8000998:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800099a:	2300      	movs	r3, #0
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	2308      	movs	r3, #8
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f006 fccf 	bl	8007348 <CO_CANtxBufferInit>
 80009aa:	4602      	mov	r2, r0
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	62da      	str	r2, [r3, #44]	@ 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009bc:	e010      	b.n	80009e0 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <CO_EM_init+0x1b8>)
 80009c8:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <CO_EM_init+0x1bc>)
 80009ce:	649a      	str	r2, [r3, #72]	@ 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3340      	adds	r3, #64	@ 0x40
 80009d4:	4619      	mov	r1, r3
 80009d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80009d8:	f7ff fe30 	bl	800063c <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80009dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	7ffff800 	.word	0x7ffff800
 80009ec:	0800068f 	.word	0x0800068f
 80009f0:	08001965 	.word	0x08001965
 80009f4:	08000701 	.word	0x08000701
 80009f8:	080007db 	.word	0x080007db

080009fc <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	8a5b      	ldrh	r3, [r3, #18]
 8000a10:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	8a1b      	ldrh	r3, [r3, #16]
 8000a16:	8aba      	ldrh	r2, [r7, #20]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	f000 80a2 	beq.w	8000b62 <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	8a1a      	ldrh	r2, [r3, #16]
 8000a22:	8abb      	ldrh	r3, [r7, #20]
 8000a24:	4053      	eors	r3, r2
 8000a26:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	8aba      	ldrh	r2, [r7, #20]
 8000a2c:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) {
 8000a2e:	8a7a      	ldrh	r2, [r7, #18]
 8000a30:	f240 1301 	movw	r3, #257	@ 0x101
 8000a34:	4013      	ands	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d010      	beq.n	8000a5c <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 8000a3a:	8aba      	ldrh	r2, [r7, #20]
 8000a3c:	f240 1301 	movw	r3, #257	@ 0x101
 8000a40:	4013      	ands	r3, r2
            CO_error(em,
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf14      	ite	ne
 8000a46:	2301      	movne	r3, #1
 8000a48:	2300      	moveq	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2201      	movs	r2, #1
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f000 f91a 	bl	8000c90 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE) {
 8000a5c:	8a7b      	ldrh	r3, [r7, #18]
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d010      	beq.n	8000a88 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000a66:	8abb      	ldrh	r3, [r7, #20]
 8000a68:	f003 0302 	and.w	r3, r3, #2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf14      	ite	ne
 8000a70:	2301      	movne	r3, #1
 8000a72:	2300      	moveq	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4619      	mov	r1, r3
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000a80:	2207      	movs	r2, #7
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f904 	bl	8000c90 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) {
 8000a88:	8a7b      	ldrh	r3, [r7, #18]
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d010      	beq.n	8000ab4 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000a92:	8abb      	ldrh	r3, [r7, #20]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	f248 1340 	movw	r3, #33088	@ 0x8140
 8000aac:	2212      	movs	r2, #18
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 f8ee 	bl	8000c90 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) {
 8000ab4:	8a7b      	ldrh	r3, [r7, #18]
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d010      	beq.n	8000ae0 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 8000abe:	8abb      	ldrh	r3, [r7, #20]
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000ad8:	2214      	movs	r2, #20
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f8d8 	bl	8000c90 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) {
 8000ae0:	8a7b      	ldrh	r3, [r7, #18]
 8000ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d010      	beq.n	8000b0c <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 8000aea:	8abb      	ldrh	r3, [r7, #20]
 8000aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4619      	mov	r1, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000b04:	2215      	movs	r2, #21
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f000 f8c2 	bl	8000c90 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE) {
 8000b0c:	8a7b      	ldrh	r3, [r7, #18]
 8000b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d010      	beq.n	8000b38 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000b16:	8abb      	ldrh	r3, [r7, #20]
 8000b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4619      	mov	r1, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000b30:	2206      	movs	r2, #6
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f8ac 	bl	8000c90 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
        }
        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) {
 8000b38:	8a7b      	ldrh	r3, [r7, #18]
 8000b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00f      	beq.n	8000b62 <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000b42:	8abb      	ldrh	r3, [r7, #20]
 8000b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	2300      	movs	r3, #0
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2313      	movs	r3, #19
 8000b5a:	2213      	movs	r2, #19
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f000 f897 	bl	8000c90 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	795b      	ldrb	r3, [r3, #5]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8000b6e:	7dfb      	ldrb	r3, [r7, #23]
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d103      	bne.n	8000b86 <CO_EM_process+0x18a>
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	78db      	ldrb	r3, [r3, #3]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	7a1b      	ldrb	r3, [r3, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d103      	bne.n	8000b9e <CO_EM_process+0x1a2>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	7a5b      	ldrb	r3, [r3, #9]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ba4:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	7dfa      	ldrb	r2, [r7, #23]
 8000bac:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d067      	beq.n	8000c84 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	7f1b      	ldrb	r3, [r3, #28]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d965      	bls.n	8000c88 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	7f9b      	ldrb	r3, [r3, #30]
 8000bc0:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	7f5b      	ldrb	r3, [r3, #29]
 8000bc6:	7c7a      	ldrb	r2, [r7, #17]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d05d      	beq.n	8000c88 <CO_EM_process+0x28c>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d158      	bne.n	8000c88 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	699a      	ldr	r2, [r3, #24]
 8000bda:	7c7b      	ldrb	r3, [r7, #17]
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	4413      	add	r3, r2
 8000be0:	6819      	ldr	r1, [r3, #0]
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	041a      	lsls	r2, r3, #16
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6998      	ldr	r0, [r3, #24]
 8000bea:	7c7b      	ldrb	r3, [r7, #17]
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4403      	add	r3, r0
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf8:	1d58      	adds	r0, r3, #5
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	699a      	ldr	r2, [r3, #24]
 8000bfe:	7c7b      	ldrb	r3, [r7, #17]
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	4413      	add	r3, r2
 8000c04:	2208      	movs	r2, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	f00c fe53 	bl	800d8b2 <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c14:	4619      	mov	r1, r3
 8000c16:	4610      	mov	r0, r2
 8000c18:	f006 fc54 	bl	80074c4 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8000c1c:	7c7b      	ldrb	r3, [r7, #17]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	747b      	strb	r3, [r7, #17]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	7f1b      	ldrb	r3, [r3, #28]
 8000c26:	7c7a      	ldrb	r2, [r7, #17]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d201      	bcs.n	8000c30 <CO_EM_process+0x234>
 8000c2c:	7c7a      	ldrb	r2, [r7, #17]
 8000c2e:	e000      	b.n	8000c32 <CO_EM_process+0x236>
 8000c30:	2200      	movs	r2, #0
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	7fdb      	ldrb	r3, [r3, #31]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10c      	bne.n	8000c58 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2202      	movs	r2, #2
 8000c42:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8000c44:	2300      	movs	r3, #0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4c:	2220      	movs	r2, #32
 8000c4e:	2101      	movs	r1, #1
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f81d 	bl	8000c90 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c56:	e017      	b.n	8000c88 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	7fdb      	ldrb	r3, [r3, #31]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d113      	bne.n	8000c88 <CO_EM_process+0x28c>
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	7f9a      	ldrb	r2, [r3, #30]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	7f5b      	ldrb	r3, [r3, #29]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d10d      	bne.n	8000c88 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c72:	2300      	movs	r3, #0
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2300      	movs	r3, #0
 8000c78:	2220      	movs	r2, #32
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f000 f807 	bl	8000c90 <CO_error>
    return;
 8000c82:	e001      	b.n	8000c88 <CO_EM_process+0x28c>
        return;
 8000c84:	bf00      	nop
 8000c86:	e000      	b.n	8000c8a <CO_EM_process+0x28e>
    return;
 8000c88:	bf00      	nop
}
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b08d      	sub	sp, #52	@ 0x34
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) { return; }
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 80a6 	beq.w	8000dfa <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cca:	2b09      	cmp	r3, #9
 8000ccc:	d90a      	bls.n	8000ce4 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000cda:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8000cde:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8000d02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d006      	beq.n	8000d18 <CO_error+0x88>
            return;
 8000d0a:	e079      	b.n	8000e00 <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d074      	beq.n	8000dfe <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000d14:	2300      	movs	r3, #0
 8000d16:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	061a      	lsls	r2, r3, #24
 8000d1c:	88bb      	ldrh	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d24:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d2a:	f3ef 8210 	mrs	r2, PRIMASK
 8000d2e:	617a      	str	r2, [r7, #20]
  return(result);
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
    if (setError) { *errorStatusBits |=  bitmask; }
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d008      	beq.n	8000d50 <CO_error+0xc0>
 8000d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e00b      	b.n	8000d68 <CO_error+0xd8>
    else {          *errorStatusBits &= ~bitmask; }
 8000d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25a      	sxtb	r2, r3
 8000d56:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d66:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	7f1b      	ldrb	r3, [r3, #28]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d93c      	bls.n	8000dea <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	7f5b      	ldrb	r3, [r3, #29]
 8000d74:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000d76:	7efb      	ldrb	r3, [r7, #27]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	7f1b      	ldrb	r3, [r3, #28]
 8000d82:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d302      	bcc.n	8000d90 <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	7f9b      	ldrb	r3, [r3, #30]
 8000d94:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d103      	bne.n	8000da4 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	77da      	strb	r2, [r3, #31]
 8000da2:	e022      	b.n	8000dea <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	7efb      	ldrb	r3, [r7, #27]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	6a3a      	ldr	r2, [r7, #32]
 8000db0:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	7efb      	ldrb	r3, [r7, #27]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4413      	add	r3, r2
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000dc6:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) { em->fifoCount++; }
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	da07      	bge.n	8000dea <CO_error+0x15a>
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	f383 8810 	msr	PRIMASK, r3
}
 8000df8:	e002      	b.n	8000e00 <CO_error+0x170>
    if (em == NULL) { return; }
 8000dfa:	bf00      	nop
 8000dfc:	e000      	b.n	8000e00 <CO_error+0x170>
            return;
 8000dfe:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000e00:	3734      	adds	r7, #52	@ 0x34
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <OD_getIndex+0x14>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	e000      	b.n	8000e3c <OD_getIndex+0x16>
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <OD_extension_init>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <OD_extension_init+0x14>
 8000e58:	2305      	movs	r3, #5
 8000e5a:	e003      	b.n	8000e64 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <OD_get_u32>:
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000e80:	7af9      	ldrb	r1, [r7, #11]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2304      	movs	r3, #4
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f000 ff54 	bl	8001d38 <OD_get_value>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000e9a:	b480      	push	{r7}
 8000e9c:	b087      	sub	sp, #28
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	791b      	ldrb	r3, [r3, #4]
 8000eac:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3305      	adds	r3, #5
 8000eb2:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000eb4:	7cfb      	ldrb	r3, [r7, #19]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d107      	bne.n	8000eca <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b088      	sub	sp, #32
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d012      	beq.n	8000f16 <OD_write_1016+0x40>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00f      	beq.n	8000f16 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	7d1b      	ldrb	r3, [r3, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	7d1a      	ldrb	r2, [r3, #20]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	7a1b      	ldrb	r3, [r3, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d805      	bhi.n	8000f16 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d102      	bne.n	8000f16 <OD_write_1016+0x40>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000f16:	2309      	movs	r3, #9
 8000f18:	e020      	b.n	8000f5c <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000f1a:	68b8      	ldr	r0, [r7, #8]
 8000f1c:	f7ff ff75 	bl	8000e0a <CO_getUint32>
 8000f20:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	7d1b      	ldrb	r3, [r3, #20]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	b2d9      	uxtb	r1, r3
 8000f34:	8abb      	ldrh	r3, [r7, #20]
 8000f36:	7dfa      	ldrb	r2, [r7, #23]
 8000f38:	69f8      	ldr	r0, [r7, #28]
 8000f3a:	f000 f8bf 	bl	80010bc <CO_HBconsumer_initEntry>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000f42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	e006      	b.n	8000f5c <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f000 fd05 	bl	8001964 <OD_writeOriginal>
 8000f5a:	4603      	mov	r3, r0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <CO_HBconsumer_init+0x2c>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d008      	beq.n	8000f90 <CO_HBconsumer_init+0x2c>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <CO_HBconsumer_init+0x2c>
 8000f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f94:	e08a      	b.n	80010ac <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000f96:	2230      	movs	r2, #48	@ 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f00c fbfe 	bl	800d79c <memset>
    HBcons->em = em;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fb0:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000fb6:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fba:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d304      	bcc.n	8000fcc <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc4:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	e000      	b.n	8000fce <CO_HBconsumer_init+0x6a>
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	77fb      	strb	r3, [r7, #31]
 8000fd6:	e041      	b.n	800105c <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2d9      	uxtb	r1, r3
 8000fde:	f107 0214 	add.w	r2, r7, #20
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000fe6:	f7ff ff43 	bl	8000e70 <OD_get_u32>
 8000fea:	4603      	mov	r3, r0
 8000fec:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000fee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00c      	beq.n	8001010 <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1016_HBcons); }
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <CO_HBconsumer_init+0xa6>
 8000ffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ffe:	f7ff ff12 	bl	8000e26 <OD_getIndex>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001008:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 800100a:	f06f 030b 	mvn.w	r3, #11
 800100e:	e04d      	b.n	80010ac <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	0c1b      	lsrs	r3, r3, #16
 8001014:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 800101a:	8b7b      	ldrh	r3, [r7, #26]
 800101c:	7f7a      	ldrb	r2, [r7, #29]
 800101e:	7ff9      	ldrb	r1, [r7, #31]
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 f84b 	bl	80010bc <CO_HBconsumer_initEntry>
 8001026:	4603      	mov	r3, r0
 8001028:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 800102a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d011      	beq.n	8001056 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1016_HBcons); }
 8001032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <CO_HBconsumer_init+0xe2>
 8001038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800103a:	f7ff fef4 	bl	8000e26 <OD_getIndex>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001044:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) { return ret; }
 8001046:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800104a:	f113 0f0c 	cmn.w	r3, #12
 800104e:	d002      	beq.n	8001056 <CO_HBconsumer_init+0xf2>
 8001050:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001054:	e02a      	b.n	80010ac <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001056:	7ffb      	ldrb	r3, [r7, #31]
 8001058:	3301      	adds	r3, #1
 800105a:	77fb      	strb	r3, [r7, #31]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	7a1b      	ldrb	r3, [r3, #8]
 8001060:	7ffa      	ldrb	r2, [r7, #31]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3b8      	bcc.n	8000fd8 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4a11      	ldr	r2, [pc, #68]	@ (80010b4 <CO_HBconsumer_init+0x150>)
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <CO_HBconsumer_init+0x154>)
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3320      	adds	r3, #32
 800107c:	4619      	mov	r1, r3
 800107e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001080:	f7ff fee2 	bl	8000e48 <OD_extension_init>
 8001084:	4603      	mov	r3, r0
 8001086:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001088:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1016_HBcons); }
 8001090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <CO_HBconsumer_init+0x140>
 8001096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001098:	f7ff fec5 	bl	8000e26 <OD_getIndex>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a2:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80010a4:	f06f 030b 	mvn.w	r3, #11
 80010a8:	e000      	b.n	80010ac <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	080018b5 	.word	0x080018b5
 80010b8:	08000ed7 	.word	0x08000ed7

080010bc <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b08d      	sub	sp, #52	@ 0x34
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4603      	mov	r3, r0
 80010cc:	70fb      	strb	r3, [r7, #3]
 80010ce:	460b      	mov	r3, r1
 80010d0:	70bb      	strb	r3, [r7, #2]
 80010d2:	4613      	mov	r3, r2
 80010d4:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80010d6:	2300      	movs	r3, #0
 80010d8:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <CO_HBconsumer_initEntry+0x2e>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7a1b      	ldrb	r3, [r3, #8]
 80010e4:	78fa      	ldrb	r2, [r7, #3]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d302      	bcc.n	80010f0 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ee:	e076      	b.n	80011de <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 80010f0:	883b      	ldrh	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d024      	beq.n	8001140 <CO_HBconsumer_initEntry+0x84>
 80010f6:	78bb      	ldrb	r3, [r7, #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d021      	beq.n	8001140 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	77bb      	strb	r3, [r7, #30]
 8001100:	e019      	b.n	8001136 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	7fbb      	ldrb	r3, [r7, #30]
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	4413      	add	r3, r2
 800110c:	f107 0408 	add.w	r4, r7, #8
 8001110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8001116:	78fa      	ldrb	r2, [r7, #3]
 8001118:	7fbb      	ldrb	r3, [r7, #30]
 800111a:	429a      	cmp	r2, r3
 800111c:	d008      	beq.n	8001130 <CO_HBconsumer_initEntry+0x74>
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <CO_HBconsumer_initEntry+0x74>
 8001124:	7a3b      	ldrb	r3, [r7, #8]
 8001126:	78ba      	ldrb	r2, [r7, #2]
 8001128:	429a      	cmp	r2, r3
 800112a:	d101      	bne.n	8001130 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 800112c:	23f4      	movs	r3, #244	@ 0xf4
 800112e:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001130:	7fbb      	ldrb	r3, [r7, #30]
 8001132:	3301      	adds	r3, #1
 8001134:	77bb      	strb	r3, [r7, #30]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7a1b      	ldrb	r3, [r3, #8]
 800113a:	7fba      	ldrb	r2, [r7, #30]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3e0      	bcc.n	8001102 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001140:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d148      	bne.n	80011da <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	78ba      	ldrb	r2, [r7, #2]
 8001158:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	461a      	mov	r2, r3
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	22ff      	movs	r2, #255	@ 0xff
 800116e:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00c      	beq.n	8001198 <CO_HBconsumer_initEntry+0xdc>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d008      	beq.n	8001198 <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 800118e:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2201      	movs	r2, #1
 8001194:	709a      	strb	r2, [r3, #2]
 8001196:	e007      	b.n	80011a8 <CO_HBconsumer_initEntry+0xec>
        }
        else {
            COB_ID = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2200      	movs	r2, #0
 80011a6:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4413      	add	r3, r2
 80011b6:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80011c2:	8bba      	ldrh	r2, [r7, #28]
 80011c4:	4c08      	ldr	r4, [pc, #32]	@ (80011e8 <CO_HBconsumer_initEntry+0x12c>)
 80011c6:	9402      	str	r4, [sp, #8]
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2300      	movs	r3, #0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80011d2:	f006 f85b 	bl	800728c <CO_CANrxBufferInit>
 80011d6:	4603      	mov	r3, r0
 80011d8:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 80011da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	@ 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	08000e9b 	.word	0x08000e9b

080011ec <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08e      	sub	sp, #56	@ 0x38
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 80011fe:	2301      	movs	r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d077      	beq.n	80012f8 <CO_HBconsumer_process+0x10c>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d073      	beq.n	80012f8 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001216:	e068      	b.n	80012ea <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d055      	beq.n	80012de <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d022      	beq.n	8001280 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d112      	bne.n	800126a <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d10a      	bne.n	8001262 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	f248 1330 	movw	r3, #33072	@ 0x8130
 800125a:	221c      	movs	r2, #28
 800125c:	2101      	movs	r1, #1
 800125e:	f7ff fd17 	bl	8000c90 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2201      	movs	r2, #1
 8001266:	709a      	strb	r2, [r3, #2]
 8001268:	e007      	b.n	800127a <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2202      	movs	r2, #2
 800126e:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d11c      	bne.n	80012c2 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	441a      	add	r2, r3
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	429a      	cmp	r2, r3
 800129e:	d310      	bcc.n	80012c2 <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	f248 1330 	movw	r3, #33072	@ 0x8130
 80012ae:	221b      	movs	r2, #27
 80012b0:	2101      	movs	r1, #1
 80012b2:	f7ff fced 	bl	8000c90 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	22ff      	movs	r2, #255	@ 0xff
 80012ba:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2203      	movs	r2, #3
 80012c0:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	789b      	ldrb	r3, [r3, #2]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d001      	beq.n	80012ce <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d003      	beq.n	80012e0 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012dc:	e000      	b.n	80012e0 <CO_HBconsumer_process+0xf4>
                continue;
 80012de:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012e4:	3301      	adds	r3, #1
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	7a1b      	ldrb	r3, [r3, #8]
 80012ee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d390      	bcc.n	8001218 <CO_HBconsumer_process+0x2c>
 80012f6:	e028      	b.n	800134a <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <CO_HBconsumer_process+0x11a>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d021      	beq.n	800134a <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	77fb      	strb	r3, [r7, #31]
 800130a:	e015      	b.n	8001338 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	22ff      	movs	r2, #255	@ 0xff
 800131c:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2201      	movs	r2, #1
 8001330:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	3301      	adds	r3, #1
 8001336:	77fb      	strb	r3, [r7, #31]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	7a1b      	ldrb	r3, [r3, #8]
 800133c:	7ffa      	ldrb	r2, [r7, #31]
 800133e:	429a      	cmp	r2, r3
 8001340:	d3e4      	bcc.n	800130c <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    else { /* MISRA C 2004 14.10 */ }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d114      	bne.n	800137c <CO_HBconsumer_process+0x190>
 8001352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d011      	beq.n	800137c <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	2300      	movs	r3, #0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	221b      	movs	r2, #27
 8001364:	2100      	movs	r1, #0
 8001366:	f7ff fc93 	bl	8000c90 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	221c      	movs	r2, #28
 8001376:	2100      	movs	r1, #0
 8001378:	f7ff fc8a 	bl	8000c90 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001380:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001386:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	615a      	str	r2, [r3, #20]
}
 800138e:	bf00      	nop
 8001390:	3730      	adds	r7, #48	@ 0x30
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	81fb      	strh	r3, [r7, #14]
 80013a6:	89fb      	ldrh	r3, [r7, #14]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <OD_getIndex+0x14>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	e000      	b.n	80013ca <OD_getIndex+0x16>
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <OD_extension_init>:
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <OD_extension_init+0x14>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e003      	b.n	80013f2 <OD_extension_init+0x1c>
    entry->extension = extension;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <OD_get_u16>:
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af02      	add	r7, sp, #8
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	460b      	mov	r3, r1
 800140c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800140e:	7af9      	ldrb	r1, [r7, #11]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2302      	movs	r3, #2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 fc8d 	bl	8001d38 <OD_get_value>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	2201      	movs	r2, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00a      	beq.n	8001464 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b09      	cmp	r3, #9
 8001452:	d807      	bhi.n	8001464 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	5cd2      	ldrb	r2, [r2, r3]
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	4013      	ands	r3, r2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <CO_isError+0x40>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <CO_isError+0x42>
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <CO_getErrorRegister+0x1e>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <CO_getErrorRegister+0x1e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	e000      	b.n	8001496 <CO_getErrorRegister+0x20>
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 80014a2:	b480      	push	{r7}
 80014a4:	b087      	sub	sp, #28
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3305      	adds	r3, #5
 80014b6:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d10a      	bne.n	80014e4 <CO_NMT_receive+0x42>
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <CO_NMT_receive+0x3c>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	78db      	ldrb	r3, [r3, #3]
 80014d8:	7bba      	ldrb	r2, [r7, #14]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d102      	bne.n	80014e4 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80014e4:	bf00      	nop
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00c      	beq.n	800151e <OD_write_1017+0x2e>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	7d1b      	ldrb	r3, [r3, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <OD_write_1017+0x2e>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d102      	bne.n	800151e <OD_write_1017+0x2e>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800151e:	2309      	movs	r3, #9
 8001520:	e017      	b.n	8001552 <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7ff ff34 	bl	8001396 <CO_getUint16>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001536:	fb03 f202 	mul.w	r2, r3, r2
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fa0a 	bl	8001964 <OD_writeOriginal>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af04      	add	r7, sp, #16
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <CO_NMT_init+0x30>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <CO_NMT_init+0x30>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <CO_NMT_init+0x30>
 8001586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001590:	e098      	b.n	80016c4 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001592:	222c      	movs	r2, #44	@ 0x2c
 8001594:	2100      	movs	r1, #0
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f00c f900 	bl	800d79c <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8c3a      	ldrh	r2, [r7, #32]
 80015b2:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 80015ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 80015ca:	f107 0214 	add.w	r2, r7, #20
 80015ce:	2301      	movs	r3, #1
 80015d0:	2100      	movs	r1, #0
 80015d2:	68b8      	ldr	r0, [r7, #8]
 80015d4:	f7ff ff13 	bl	80013fe <OD_get_u16>
 80015d8:	4603      	mov	r3, r0
 80015da:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80015dc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00c      	beq.n	80015fe <CO_NMT_init+0xa2>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1017_ProducerHbTime); }
 80015e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <CO_NMT_init+0x9c>
 80015ea:	68b8      	ldr	r0, [r7, #8]
 80015ec:	f7ff fee2 	bl	80013b4 <OD_getIndex>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015f6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80015f8:	f06f 030b 	mvn.w	r3, #11
 80015fc:	e062      	b.n	80016c4 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80015fe:	8abb      	ldrh	r3, [r7, #20]
 8001600:	461a      	mov	r2, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001606:	fb03 f202 	mul.w	r2, r3, r2
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4a2d      	ldr	r2, [pc, #180]	@ (80016cc <CO_NMT_init+0x170>)
 8001618:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4a2c      	ldr	r2, [pc, #176]	@ (80016d0 <CO_NMT_init+0x174>)
 800161e:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3310      	adds	r3, #16
 8001624:	4619      	mov	r1, r3
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f7ff fed5 	bl	80013d6 <OD_extension_init>
 800162c:	4603      	mov	r3, r0
 800162e:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001630:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00c      	beq.n	8001652 <CO_NMT_init+0xf6>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1017_ProducerHbTime); }
 8001638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <CO_NMT_init+0xf0>
 800163e:	68b8      	ldr	r0, [r7, #8]
 8001640:	f7ff feb8 	bl	80013b4 <OD_getIndex>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800164a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800164c:	f06f 030b 	mvn.w	r3, #11
 8001650:	e038      	b.n	80016c4 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	429a      	cmp	r2, r3
 800165c:	d903      	bls.n	8001666 <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001666:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001668:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <CO_NMT_init+0x178>)
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800167a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800167c:	f005 fe06 	bl	800728c <CO_CANrxBufferInit>
 8001680:	4603      	mov	r3, r0
 8001682:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <CO_NMT_init+0x136>
        return ret;
 800168c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001690:	e018      	b.n	80016c4 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001698:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800169a:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800169c:	2300      	movs	r3, #0
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	2301      	movs	r3, #1
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80016a8:	f005 fe4e 	bl	8007348 <CO_CANtxBufferInit>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	629a      	str	r2, [r3, #40]	@ 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016be:	e001      	b.n	80016c4 <CO_NMT_init+0x168>
    }

    return ret;
 80016c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	080018b5 	.word	0x080018b5
 80016d0:	080014f1 	.word	0x080014f1
 80016d4:	080014a3 	.word	0x080014a3

080016d8 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80016f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d204      	bcs.n	8001714 <CO_NMT_process+0x3c>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	e000      	b.n	8001716 <CO_NMT_process+0x3e>
 8001714:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10e      	bne.n	800173e <CO_NMT_process+0x66>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d029      	beq.n	800177c <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001736:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800173a:	429a      	cmp	r2, r3
 800173c:	d01e      	beq.n	800177c <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	7ffa      	ldrb	r2, [r7, #31]
 8001744:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	4619      	mov	r1, r3
 8001750:	4610      	mov	r0, r2
 8001752:	f005 feb7 	bl	80074c4 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10a      	bne.n	8001774 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	889b      	ldrh	r3, [r3, #4]
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <CO_NMT_process+0x96>
 800176a:	2305      	movs	r3, #5
 800176c:	e000      	b.n	8001770 <CO_NMT_process+0x98>
 800176e:	237f      	movs	r3, #127	@ 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	e003      	b.n	800177c <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	7ffa      	ldrb	r2, [r7, #31]
 8001780:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	789b      	ldrb	r3, [r3, #2]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d025      	beq.n	80017d6 <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	789b      	ldrb	r3, [r3, #2]
 800178e:	2b82      	cmp	r3, #130	@ 0x82
 8001790:	d01a      	beq.n	80017c8 <CO_NMT_process+0xf0>
 8001792:	2b82      	cmp	r3, #130	@ 0x82
 8001794:	dc1b      	bgt.n	80017ce <CO_NMT_process+0xf6>
 8001796:	2b81      	cmp	r3, #129	@ 0x81
 8001798:	d013      	beq.n	80017c2 <CO_NMT_process+0xea>
 800179a:	2b81      	cmp	r3, #129	@ 0x81
 800179c:	dc17      	bgt.n	80017ce <CO_NMT_process+0xf6>
 800179e:	2b80      	cmp	r3, #128	@ 0x80
 80017a0:	d00c      	beq.n	80017bc <CO_NMT_process+0xe4>
 80017a2:	2b80      	cmp	r3, #128	@ 0x80
 80017a4:	dc13      	bgt.n	80017ce <CO_NMT_process+0xf6>
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d002      	beq.n	80017b0 <CO_NMT_process+0xd8>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d003      	beq.n	80017b6 <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 80017ae:	e00e      	b.n	80017ce <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 80017b0:	2305      	movs	r3, #5
 80017b2:	77fb      	strb	r3, [r7, #31]
                break;
 80017b4:	e00c      	b.n	80017d0 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 80017b6:	2304      	movs	r3, #4
 80017b8:	77fb      	strb	r3, [r7, #31]
                break;
 80017ba:	e009      	b.n	80017d0 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 80017bc:	237f      	movs	r3, #127	@ 0x7f
 80017be:	77fb      	strb	r3, [r7, #31]
                break;
 80017c0:	e006      	b.n	80017d0 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	77bb      	strb	r3, [r7, #30]
                break;
 80017c6:	e003      	b.n	80017d0 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 80017c8:	2301      	movs	r3, #1
 80017ca:	77bb      	strb	r3, [r7, #30]
                break;
 80017cc:	e000      	b.n	80017d0 <CO_NMT_process+0xf8>
                break;
 80017ce:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01c      	beq.n	800181c <CO_NMT_process+0x144>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	2112      	movs	r1, #18
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fe1d 	bl	8001428 <CO_isError>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	211b      	movs	r1, #27
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fe14 	bl	8001428 <CO_isError>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d108      	bne.n	8001818 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	211c      	movs	r1, #28
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fe0b 	bl	8001428 <CO_isError>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <CO_NMT_process+0x146>
 800181c:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 800181e:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	889b      	ldrh	r3, [r3, #4]
 8001824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00d      	beq.n	8001848 <CO_NMT_process+0x170>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fe20 	bl	8001476 <CO_getErrorRegister>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	889b      	ldrh	r3, [r3, #4]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <CO_NMT_process+0x170>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <CO_NMT_process+0x172>
 8001848:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 800184a:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 800184c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d110      	bne.n	8001876 <CO_NMT_process+0x19e>
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <CO_NMT_process+0x188>
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	889b      	ldrh	r3, [r3, #4]
 8001864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <CO_NMT_process+0x198>
 800186c:	2304      	movs	r3, #4
 800186e:	e000      	b.n	8001872 <CO_NMT_process+0x19a>
 8001870:	237f      	movs	r3, #127	@ 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001872:	77fb      	strb	r3, [r7, #31]
 8001874:	e010      	b.n	8001898 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	889b      	ldrh	r3, [r3, #4]
 800187a:	b21b      	sxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	da0b      	bge.n	8001898 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 8001880:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001884:	2b7f      	cmp	r3, #127	@ 0x7f
 8001886:	d107      	bne.n	8001898 <CO_NMT_process+0x1c0>
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <CO_NMT_process+0x1c0>
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001894:	2305      	movs	r3, #5
 8001896:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	7ffa      	ldrb	r2, [r7, #31]
 800189c:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) { *NMTstate = NMTstateCpy; }
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <CO_NMT_process+0x1d2>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	7ffa      	ldrb	r2, [r7, #31]
 80018a8:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 80018aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <OD_readOriginal+0x20>
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <OD_readOriginal+0x20>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80018d4:	2309      	movs	r3, #9
 80018d6:	e041      	b.n	800195c <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80018ea:	230e      	movs	r3, #14
 80018ec:	e036      	b.n	800195c <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <OD_readOriginal+0x4e>
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d922      	bls.n	8001948 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	429a      	cmp	r2, r3
 800190a:	d801      	bhi.n	8001910 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 800190c:	2309      	movs	r3, #9
 800190e:	e025      	b.n	800195c <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4413      	add	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	d90a      	bls.n	8001942 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	441a      	add	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 800193c:	23ff      	movs	r3, #255	@ 0xff
 800193e:	75fb      	strb	r3, [r7, #23]
 8001940:	e002      	b.n	8001948 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	68b8      	ldr	r0, [r7, #8]
 800194e:	f00b ffb0 	bl	800d8b2 <memcpy>

    *countRead = dataLenToCopy;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001958:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <OD_writeOriginal+0x20>
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <OD_writeOriginal+0x20>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001984:	2309      	movs	r3, #9
 8001986:	e047      	b.n	8001a18 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 800199a:	230e      	movs	r3, #14
 800199c:	e03c      	b.n	8001a18 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <OD_writeOriginal+0x4e>
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d922      	bls.n	80019f8 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d801      	bhi.n	80019c0 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80019bc:	2309      	movs	r3, #9
 80019be:	e02b      	b.n	8001a18 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4413      	add	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d90a      	bls.n	80019f2 <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	441a      	add	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80019ec:	23ff      	movs	r3, #255	@ 0xff
 80019ee:	75fb      	strb	r3, [r7, #23]
 80019f0:	e002      	b.n	80019f8 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d201      	bcs.n	8001a04 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001a00:	230c      	movs	r3, #12
 8001a02:	e009      	b.n	8001a18 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	69b8      	ldr	r0, [r7, #24]
 8001a0a:	f00b ff52 	bl	800d8b2 <memcpy>

    *countWritten = dataLenToCopy;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8001a2e:	2302      	movs	r3, #2
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8001a4a:	2302      	movs	r3, #2
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <OD_find+0x1a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <OD_find+0x1e>
        return NULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e046      	b.n	8001b04 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001a82:	e026      	b.n	8001ad2 <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001a84:	8afa      	ldrh	r2, [r7, #22]
 8001a86:	8abb      	ldrh	r3, [r7, #20]
 8001a88:	4413      	add	r3, r2
 8001a8a:	105b      	asrs	r3, r3, #1
 8001a8c:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	89fa      	ldrh	r2, [r7, #14]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	887a      	ldrh	r2, [r7, #2]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d101      	bne.n	8001aae <OD_find+0x56>
            return entry;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	e02a      	b.n	8001b04 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d209      	bcs.n	8001acc <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <OD_find+0x6e>
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	e000      	b.n	8001ac8 <OD_find+0x70>
 8001ac6:	89fb      	ldrh	r3, [r7, #14]
 8001ac8:	82bb      	strh	r3, [r7, #20]
 8001aca:	e002      	b.n	8001ad2 <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001ad2:	8afa      	ldrh	r2, [r7, #22]
 8001ad4:	8abb      	ldrh	r3, [r7, #20]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3d4      	bcc.n	8001a84 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001ada:	8afa      	ldrh	r2, [r7, #22]
 8001adc:	8abb      	ldrh	r3, [r7, #20]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d10f      	bne.n	8001b02 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	8afa      	ldrh	r2, [r7, #22]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	887a      	ldrh	r2, [r7, #2]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d101      	bne.n	8001b02 <OD_find+0xaa>
            return entry;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	e000      	b.n	8001b04 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b08d      	sub	sp, #52	@ 0x34
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) { return ODR_IDX_NOT_EXIST; }
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <OD_getSub+0x1e>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <OD_getSub+0x22>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e0d6      	b.n	8001ce0 <OD_getSub+0x1d0>
    if (io == NULL) { return ODR_DEV_INCOMPAT; }
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <OD_getSub+0x2c>
 8001b38:	2309      	movs	r3, #9
 8001b3a:	e0d1      	b.n	8001ce0 <OD_getSub+0x1d0>

    OD_stream_t *stream = &io->stream;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	78db      	ldrb	r3, [r3, #3]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d050      	beq.n	8001bee <OD_getSub+0xde>
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	f300 808c 	bgt.w	8001c6a <OD_getSub+0x15a>
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d002      	beq.n	8001b5c <OD_getSub+0x4c>
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d015      	beq.n	8001b86 <OD_getSub+0x76>
 8001b5a:	e086      	b.n	8001c6a <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) { return ODR_SUB_NOT_EXIST; }
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <OD_getSub+0x56>
 8001b62:	230e      	movs	r3, #14
 8001b64:	e0bc      	b.n	8001ce0 <OD_getSub+0x1d0>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	791a      	ldrb	r2, [r3, #4]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	609a      	str	r2, [r3, #8]
        break;
 8001b84:	e073      	b.n	8001c6e <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) { return ODR_SUB_NOT_EXIST; }
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	789b      	ldrb	r3, [r3, #2]
 8001b8a:	7afa      	ldrb	r2, [r7, #11]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d301      	bcc.n	8001b94 <OD_getSub+0x84>
 8001b90:	230e      	movs	r3, #14
 8001b92:	e0a5      	b.n	8001ce0 <OD_getSub+0x1d0>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8001b9a:	7afb      	ldrb	r3, [r7, #11]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10b      	bne.n	8001bb8 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	7a1a      	ldrb	r2, [r3, #8]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001bb6:	e05a      	b.n	8001c6e <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	7a5a      	ldrb	r2, [r3, #9]
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	7afa      	ldrb	r2, [r7, #11]
 8001bd2:	3a01      	subs	r2, #1
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4413      	add	r3, r2
 8001bdc:	e000      	b.n	8001be0 <OD_getSub+0xd0>
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be2:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	609a      	str	r2, [r3, #8]
        break;
 8001bec:	e03f      	b.n	8001c6e <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001bfe:	e01c      	b.n	8001c3a <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8001c00:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	4413      	add	r3, r2
 8001c12:	791b      	ldrb	r3, [r3, #4]
 8001c14:	7afa      	ldrb	r2, [r7, #11]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d10a      	bne.n	8001c30 <OD_getSub+0x120>
                odo = &odoArr[i];
 8001c1a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	461a      	mov	r2, r3
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8001c2e:	e00a      	b.n	8001c46 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001c34:	3301      	adds	r3, #1
 8001c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	789b      	ldrb	r3, [r3, #2]
 8001c3e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d3dc      	bcc.n	8001c00 <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) { return ODR_SUB_NOT_EXIST; }
 8001c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <OD_getSub+0x140>
 8001c4c:	230e      	movs	r3, #14
 8001c4e:	e047      	b.n	8001ce0 <OD_getSub+0x1d0>

        stream->attribute = odo->attribute;
 8001c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c52:	795a      	ldrb	r2, [r3, #5]
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	609a      	str	r2, [r3, #8]
        break;
 8001c68:	e001      	b.n	8001c6e <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001c6a:	2309      	movs	r3, #9
 8001c6c:	e038      	b.n	8001ce0 <OD_getSub+0x1d0>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <OD_getSub+0x16c>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cec <OD_getSub+0x1dc>)
 8001c80:	619a      	str	r2, [r3, #24]
        io->write = OD_writeOriginal;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf0 <OD_getSub+0x1e0>)
 8001c86:	61da      	str	r2, [r3, #28]
        stream->object = NULL;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	e01c      	b.n	8001cca <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <OD_getSub+0x192>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	e000      	b.n	8001ca4 <OD_getSub+0x194>
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <OD_getSub+0x1e4>)
        io->read = entry->extension->read != NULL ?
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6193      	str	r3, [r2, #24]
        io->write = entry->extension->write != NULL ?
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <OD_getSub+0x1aa>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	e000      	b.n	8001cbc <OD_getSub+0x1ac>
 8001cba:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <OD_getSub+0x1e8>)
        io->write = entry->extension->write != NULL ?
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	61d3      	str	r3, [r2, #28]
        stream->object = entry->extension->object;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]

    /* Add informative data */
    stream->index = entry->index;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	825a      	strh	r2, [r3, #18]
    stream->subIndex = subIndex;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	7afa      	ldrb	r2, [r7, #11]
 8001cdc:	751a      	strb	r2, [r3, #20]

    return ODR_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3734      	adds	r7, #52	@ 0x34
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	080018b5 	.word	0x080018b5
 8001cf0:	08001965 	.word	0x08001965
 8001cf4:	08001a21 	.word	0x08001a21
 8001cf8:	08001a3d 	.word	0x08001a3d

08001cfc <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db03      	blt.n	8001d16 <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b19      	cmp	r3, #25
 8001d14:	dd02      	ble.n	8001d1c <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <OD_getSDOabCode+0x38>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	e004      	b.n	8001d26 <OD_getSDOabCode+0x2a>
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <OD_getSDOabCode+0x38>)
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	0800e1f4 	.word	0x0800e1f4

08001d38 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b091      	sub	sp, #68	@ 0x44
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	460b      	mov	r3, r1
 8001d46:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) { return ODR_DEV_INCOMPAT; }
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <OD_get_value+0x1a>
 8001d4e:	2309      	movs	r3, #9
 8001d50:	e024      	b.n	8001d9c <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countRd = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d5c:	f107 0218 	add.w	r2, r7, #24
 8001d60:	7af9      	ldrb	r1, [r7, #11]
 8001d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fed3 	bl	8001b10 <OD_getSub>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) { return ret; }
 8001d70:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <OD_get_value+0x46>
 8001d78:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001d7c:	e00e      	b.n	8001d9c <OD_get_value+0x64>
    if (stream->dataLength != len) { return ODR_TYPE_MISMATCH; }
 8001d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <OD_get_value+0x54>
 8001d88:	230b      	movs	r3, #11
 8001d8a:	e007      	b.n	8001d9c <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8001d8c:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d98:	47a0      	blx	r4
 8001d9a:	4603      	mov	r3, r0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3744      	adds	r7, #68	@ 0x44
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b091      	sub	sp, #68	@ 0x44
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	460b      	mov	r3, r1
 8001db2:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countWritten = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001dbe:	f107 0218 	add.w	r2, r7, #24
 8001dc2:	7af9      	ldrb	r1, [r7, #11]
 8001dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7ff fea2 	bl	8001b10 <OD_getSub>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) { return ret; }
 8001dd2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <OD_set_value+0x3c>
 8001dda:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001dde:	e00e      	b.n	8001dfe <OD_set_value+0x5a>
    if (stream->dataLength != len) { return ODR_TYPE_MISMATCH; }
 8001de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <OD_set_value+0x4a>
 8001dea:	230b      	movs	r3, #11
 8001dec:	e007      	b.n	8001dfe <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001dee:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001dfa:	47a0      	blx	r4
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3744      	adds	r7, #68	@ 0x44
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd90      	pop	{r4, r7, pc}

08001e06 <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b08e      	sub	sp, #56	@ 0x38
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	460b      	mov	r3, r1
 8001e14:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001e1c:	f107 0210 	add.w	r2, r7, #16
 8001e20:	7af9      	ldrb	r1, [r7, #11]
 8001e22:	2301      	movs	r3, #1
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fe73 	bl	8001b10 <OD_getSub>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8001e30:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d116      	bne.n	8001e66 <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <OD_getPtr+0x42>
 8001e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d103      	bne.n	8001e50 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001e48:	2309      	movs	r3, #9
 8001e4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e4e:	e00a      	b.n	8001e66 <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <OD_getPtr+0x60>
 8001e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d002      	beq.n	8001e66 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001e60:	230b      	movs	r3, #11
 8001e62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        else { /* MISRA C 2004 14.10 */ }
    }

    if (err != NULL) { *err = errCopy; }
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <OD_getPtr+0x6e>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001e72:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001e74:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <OD_getPtr+0x7c>
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	e000      	b.n	8001e84 <OD_getPtr+0x7e>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3738      	adds	r7, #56	@ 0x38
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	81fb      	strh	r3, [r7, #14]
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	2304      	movs	r3, #4
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <OD_getIndex+0x14>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	e000      	b.n	8001f16 <OD_getIndex+0x16>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <OD_extension_init>:
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <OD_extension_init+0x14>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e003      	b.n	8001f3e <OD_extension_init+0x1c>
    entry->extension = extension;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <OD_get_u8>:
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af02      	add	r7, sp, #8
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	460b      	mov	r3, r1
 8001f58:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f5a:	7af9      	ldrb	r1, [r7, #11]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2301      	movs	r3, #1
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fee7 	bl	8001d38 <OD_get_value>
 8001f6a:	4603      	mov	r3, r0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <OD_get_u16>:
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	460b      	mov	r3, r1
 8001f82:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f84:	7af9      	ldrb	r1, [r7, #11]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7ff fed2 	bl	8001d38 <OD_get_value>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <OD_get_u32>:
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af02      	add	r7, sp, #8
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	460b      	mov	r3, r1
 8001fac:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001fae:	7af9      	ldrb	r1, [r7, #11]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff febd 	bl	8001d38 <OD_get_value>
 8001fbe:	4603      	mov	r3, r0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) { *countWritten = count; }
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <OD_write_dummy+0x1a>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <OD_read_dummy+0x20>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <OD_read_dummy+0x20>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002010:	2309      	movs	r3, #9
 8002012:	e010      	b.n	8002036 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	d902      	bls.n	8002024 <OD_read_dummy+0x34>
        count = stream->dataLength;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	2100      	movs	r1, #0
 8002028:	68b8      	ldr	r0, [r7, #8]
 800202a:	f00b fbb7 	bl	800d79c <memset>

    *countRead = count;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8002040:	b5b0      	push	{r4, r5, r7, lr}
 8002042:	b092      	sub	sp, #72	@ 0x48
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8002066:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	015b      	lsls	r3, r3, #5
 8002074:	3310      	adds	r3, #16
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 800207c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002080:	2b08      	cmp	r3, #8
 8002082:	d901      	bls.n	8002088 <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8002084:	2307      	movs	r3, #7
 8002086:	e090      	b.n	80021aa <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002088:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800208c:	2b1f      	cmp	r3, #31
 800208e:	d81a      	bhi.n	80020c6 <PDOconfigMap+0x86>
 8002090:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002094:	2b00      	cmp	r3, #0
 8002096:	d116      	bne.n	80020c6 <PDOconfigMap+0x86>
        OD_stream_t *stream = &OD_IO->stream;
 8002098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209a:	63bb      	str	r3, [r7, #56]	@ 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 800209c:	2218      	movs	r2, #24
 800209e:	2100      	movs	r1, #0
 80020a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020a2:	f00b fb7b 	bl	800d79c <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 80020a6:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80020aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b4:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 80020b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b8:	4a3e      	ldr	r2, [pc, #248]	@ (80021b4 <PDOconfigMap+0x174>)
 80020ba:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 80020bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020be:	4a3e      	ldr	r2, [pc, #248]	@ (80021b8 <PDOconfigMap+0x178>)
 80020c0:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e071      	b.n	80021aa <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 80020c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020ca:	4619      	mov	r1, r3
 80020cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80020ce:	f7ff fcc3 	bl	8001a58 <OD_find>
 80020d2:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 80020d4:	f107 0210 	add.w	r2, r7, #16
 80020d8:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 80020dc:	2300      	movs	r3, #0
 80020de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80020e0:	f7ff fd16 	bl	8001b10 <OD_getSub>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 80020ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <PDOconfigMap+0xb8>
        return odRet;
 80020f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80020f6:	e058      	b.n	80021aa <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <PDOconfigMap+0xc2>
 80020fe:	2308      	movs	r3, #8
 8002100:	e000      	b.n	8002104 <PDOconfigMap+0xc4>
 8002102:	2304      	movs	r3, #4
 8002104:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8002108:	f897 2020 	ldrb.w	r2, [r7, #32]
 800210c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002110:	4013      	ands	r3, r2
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <PDOconfigMap+0xee>
        || (mappedLengthBits & 0x07) != 0
 8002118:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	2b00      	cmp	r3, #0
 8002122:	d104      	bne.n	800212e <PDOconfigMap+0xee>
        || OD_IOcopy.stream.dataLength < mappedLength
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800212a:	429a      	cmp	r2, r3
 800212c:	d201      	bcs.n	8002132 <PDOconfigMap+0xf2>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 800212e:	2306      	movs	r3, #6
 8002130:	e03b      	b.n	80021aa <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002134:	461d      	mov	r5, r3
 8002136:	f107 0410 	add.w	r4, r7, #16
 800213a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002142:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 8002146:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800214a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800214c:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d129      	bne.n	80021a8 <PDOconfigMap+0x168>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8002154:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002158:	2b1f      	cmp	r3, #31
 800215a:	d81f      	bhi.n	800219c <PDOconfigMap+0x15c>
 800215c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01b      	beq.n	800219c <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 8002164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800216c:	08db      	lsrs	r3, r3, #3
 800216e:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 8002170:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 8002172:	3308      	adds	r3, #8
 8002174:	440b      	add	r3, r1
 8002176:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3244      	adds	r2, #68	@ 0x44
 800217c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 8002180:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	2201      	movs	r2, #1
 800218a:	409a      	lsls	r2, r3
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	b2d1      	uxtb	r1, r2
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	460a      	mov	r2, r1
 8002196:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800219a:	e005      	b.n	80021a8 <PDOconfigMap+0x168>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 800219c:	79fa      	ldrb	r2, [r7, #7]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3244      	adds	r2, #68	@ 0x44
 80021a2:	2100      	movs	r1, #0
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3748      	adds	r7, #72	@ 0x48
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bdb0      	pop	{r4, r5, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	08001ff1 	.word	0x08001ff1
 80021b8:	08001fc9 	.word	0x08001fc9

080021bc <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	@ 0x30
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 80021d2:	f107 021b 	add.w	r2, r7, #27
 80021d6:	2301      	movs	r3, #1
 80021d8:	2100      	movs	r1, #0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff feb5 	bl	8001f4a <OD_get_u8>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80021e6:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 80021ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fe83 	bl	8001f00 <OD_getIndex>
 80021fa:	4603      	mov	r3, r0
 80021fc:	021a      	lsls	r2, r3, #8
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002200:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002202:	f06f 030b 	mvn.w	r3, #11
 8002206:	e07f      	b.n	8002308 <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800220e:	e05b      	b.n	80022c8 <PDO_initMapping+0x10c>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002210:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002214:	015b      	lsls	r3, r3, #5
 8002216:	3310      	adds	r3, #16
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8002222:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002226:	3301      	adds	r3, #1
 8002228:	b2d9      	uxtb	r1, r3
 800222a:	f107 0214 	add.w	r2, r7, #20
 800222e:	2301      	movs	r3, #1
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff feb4 	bl	8001f9e <OD_get_u32>
 8002236:	4603      	mov	r3, r0
 8002238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 800223c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002240:	2b0e      	cmp	r3, #14
 8002242:	d03b      	beq.n	80022bc <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 8002244:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00f      	beq.n	800226c <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 800224c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fe54 	bl	8001f00 <OD_getIndex>
 8002258:	4603      	mov	r3, r0
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002260:	431a      	orrs	r2, r3
 8002262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002264:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002266:	f06f 030b 	mvn.w	r3, #11
 800226a:	e04d      	b.n	8002308 <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800226c:	6979      	ldr	r1, [r7, #20]
 800226e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7ff fee1 	bl	8002040 <PDOconfigMap>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 8002284:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	22ff      	movs	r2, #255	@ 0xff
 8002296:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) { *erroneousMap = map; }
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <PDO_initMapping+0xea>
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a4:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 80022a6:	7efb      	ldrb	r3, [r7, #27]
 80022a8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d206      	bcs.n	80022be <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b6:	4413      	add	r3, r2
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ba:	e000      	b.n	80022be <PDO_initMapping+0x102>
            continue;
 80022bc:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80022be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022c2:	3301      	adds	r3, #1
 80022c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80022c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022cc:	2b07      	cmp	r3, #7
 80022ce:	d99f      	bls.n	8002210 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d805      	bhi.n	80022e2 <PDO_initMapping+0x126>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <PDO_initMapping+0x134>
 80022dc:	7efb      	ldrb	r3, [r7, #27]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <PDO_initMapping+0x134>
    ) {
        if (*erroneousMap == 0) { *erroneousMap = 1; }
 80022e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <PDO_initMapping+0x134>
 80022ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 80022f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002300:	7efa      	ldrb	r2, [r7, #27]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3728      	adds	r7, #40	@ 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08e      	sub	sp, #56	@ 0x38
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <OD_write_PDO_mapping+0x28>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <OD_write_PDO_mapping+0x28>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	7d1b      	ldrb	r3, [r3, #20]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d901      	bls.n	800233c <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 8002338:	2309      	movs	r3, #9
 800233a:	e07e      	b.n	800243a <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <OD_write_PDO_mapping+0x4a>
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	7b5b      	ldrb	r3, [r3, #13]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <OD_write_PDO_mapping+0x4e>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	7d1b      	ldrb	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 800235a:	2302      	movs	r3, #2
 800235c:	e06d      	b.n	800243a <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0) {
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	7d1b      	ldrb	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d145      	bne.n	80023f2 <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002366:	68b8      	ldr	r0, [r7, #8]
 8002368:	f7ff fd90 	bl	8001e8c <CO_getUint8>
 800236c:	4603      	mov	r3, r0
 800236e:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002374:	7fbb      	ldrb	r3, [r7, #30]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d901      	bls.n	800237e <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 800237a:	2307      	movs	r3, #7
 800237c:	e05d      	b.n	800243a <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800237e:	2300      	movs	r3, #0
 8002380:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002384:	e01b      	b.n	80023be <OD_write_PDO_mapping+0xae>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002386:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800238a:	015b      	lsls	r3, r3, #5
 800238c:	3310      	adds	r3, #16
 800238e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002390:	4413      	add	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d901      	bls.n	80023ac <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 80023a8:	2306      	movs	r3, #6
 80023aa:	e046      	b.n	800243a <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 80023ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80023b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80023b8:	3301      	adds	r3, #1
 80023ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023be:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80023c2:	7fbb      	ldrb	r3, [r7, #30]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3de      	bcc.n	8002386 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80023c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d901      	bls.n	80023d2 <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 80023ce:	2307      	movs	r3, #7
 80023d0:	e033      	b.n	800243a <OD_write_PDO_mapping+0x12a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 80023d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <OD_write_PDO_mapping+0xd2>
 80023d8:	7fbb      	ldrb	r3, [r7, #30]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 80023de:	230f      	movs	r3, #15
 80023e0:	e02b      	b.n	800243a <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80023e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	7fba      	ldrb	r2, [r7, #30]
 80023ee:	735a      	strb	r2, [r3, #13]
 80023f0:	e01c      	b.n	800242c <OD_write_PDO_mapping+0x11c>
    }
    else {
        uint32_t val = CO_getUint32(buf);
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f7ff fd67 	bl	8001ec6 <CO_getUint32>
 80023f8:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex-1,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	7d1b      	ldrb	r3, [r3, #20]
 80023fe:	3b01      	subs	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	f8d3 1138 	ldr.w	r1, [r3, #312]	@ 0x138
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	460b      	mov	r3, r1
 8002412:	6a39      	ldr	r1, [r7, #32]
 8002414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002416:	f7ff fe13 	bl	8002040 <PDOconfigMap>
 800241a:	4603      	mov	r3, r0
 800241c:	77fb      	strb	r3, [r7, #31]
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 800241e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <OD_write_PDO_mapping+0x11c>
            return odRet;
 8002426:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800242a:	e006      	b.n	800243a <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f7ff fa96 	bl	8001964 <OD_writeOriginal>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3730      	adds	r7, #48	@ 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b088      	sub	sp, #32
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff fa2c 	bl	80018b4 <OD_readOriginal>
 800245c:	4603      	mov	r3, r0
 800245e:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8002460:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d134      	bne.n	80024d2 <OD_read_PDO_commParam+0x90>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	7d1b      	ldrb	r3, [r3, #20]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d130      	bne.n	80024d2 <OD_read_PDO_commParam+0x90>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d12c      	bne.n	80024d2 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 800247e:	68b8      	ldr	r0, [r7, #8]
 8002480:	f7ff fd21 	bl	8001ec6 <CO_getUint32>
 8002484:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	b29b      	uxth	r3, r3
 800248a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800248e:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 8002490:	8a7b      	ldrh	r3, [r7, #18]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d011      	beq.n	80024ba <OD_read_PDO_commParam+0x78>
 8002496:	8a7a      	ldrh	r2, [r7, #18]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800249e:	4619      	mov	r1, r3
 80024a0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80024a4:	400b      	ands	r3, r1
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d107      	bne.n	80024ba <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	f8b2 2142 	ldrh.w	r2, [r2, #322]	@ 0x142
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) { COB_ID |= 0x80000000; }
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <OD_read_PDO_commParam+0x88>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024c8:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 80024ca:	69f9      	ldr	r1, [r7, #28]
 80024cc:	68b8      	ldr	r0, [r7, #8]
 80024ce:	f7ff fd08 	bl	8001ee2 <CO_setUint32>
    }

    return returnCode;
 80024d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 80024de:	b580      	push	{r7, lr}
 80024e0:	b088      	sub	sp, #32
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	791b      	ldrb	r3, [r3, #4]
 80024f4:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3305      	adds	r3, #5
 80024fa:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002502:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d03e      	beq.n	800258a <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	7b1b      	ldrb	r3, [r3, #12]
 8002510:	7cfa      	ldrb	r2, [r7, #19]
 8002512:	429a      	cmp	r2, r3
 8002514:	d334      	bcc.n	8002580 <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	7b1b      	ldrb	r3, [r3, #12]
 800251a:	7cfa      	ldrb	r2, [r7, #19]
 800251c:	429a      	cmp	r2, r3
 800251e:	d105      	bne.n	800252c <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) { err = CO_RPDO_RX_OK; }
 8002520:	7ffb      	ldrb	r3, [r7, #31]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d107      	bne.n	8002536 <CO_PDO_receive+0x58>
 8002526:	230b      	movs	r3, #11
 8002528:	77fb      	strb	r3, [r7, #31]
 800252a:	e004      	b.n	8002536 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) { err = CO_RPDO_RX_LONG; }
 800252c:	7ffb      	ldrb	r3, [r7, #31]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <CO_PDO_receive+0x58>
 8002532:	230d      	movs	r3, #13
 8002534:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00c      	beq.n	800255e <CO_PDO_receive+0x80>
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 800255e:	7fbb      	ldrb	r3, [r7, #30]
 8002560:	332e      	adds	r3, #46	@ 0x2e
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	2208      	movs	r2, #8
 800256a:	68f9      	ldr	r1, [r7, #12]
 800256c:	4618      	mov	r0, r3
 800256e:	f00b f9a0 	bl	800d8b2 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002572:	7fba      	ldrb	r2, [r7, #30]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	325a      	adds	r2, #90	@ 0x5a
 8002578:	2101      	movs	r1, #1
 800257a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800257e:	e004      	b.n	800258a <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002580:	7ffb      	ldrb	r3, [r7, #31]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002586:	230c      	movs	r3, #12
 8002588:	77fb      	strb	r3, [r7, #31]
        }
        else { /* MISRA C 2004 14.10 */ }
    }

    RPDO->receiveError = err;
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	7ffa      	ldrb	r2, [r7, #31]
 800258e:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
}
 8002592:	bf00      	nop
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b092      	sub	sp, #72	@ 0x48
 80025a0:	af04      	add	r7, sp, #16
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <OD_write_14xx+0x26>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <OD_write_14xx+0x26>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <OD_write_14xx+0x26>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d901      	bls.n	80025c6 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 80025c2:	2309      	movs	r3, #9
 80025c4:	e102      	b.n	80027cc <OD_write_14xx+0x230>
    }

    CO_RPDO_t *RPDO = stream->object;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	633b      	str	r3, [r7, #48]	@ 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80025cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	4618      	mov	r0, r3
 80025da:	f00b f96a 	bl	800d8b2 <memcpy>

    switch (stream->subIndex) {
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	7d1b      	ldrb	r3, [r3, #20]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	f000 80d5 	beq.w	8002792 <OD_write_14xx+0x1f6>
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	f300 80e4 	bgt.w	80027b6 <OD_write_14xx+0x21a>
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d003      	beq.n	80025fa <OD_write_14xx+0x5e>
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	f000 80a6 	beq.w	8002744 <OD_write_14xx+0x1a8>
        break;
    }
#endif
    default:
        /* MISRA C 2004 15.3 */
        break;
 80025f8:	e0dd      	b.n	80027b6 <OD_write_14xx+0x21a>
        uint32_t COB_ID = CO_getUint32(buf);
 80025fa:	68b8      	ldr	r0, [r7, #8]
 80025fc:	f7ff fc63 	bl	8001ec6 <CO_getUint32>
 8002600:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	43db      	mvns	r3, r3
 8002610:	0fdb      	lsrs	r3, r3, #31
 8002612:	b2db      	uxtb	r3, r3
 8002614:	61bb      	str	r3, [r7, #24]
        if ((COB_ID & 0x3FFFF800) != 0
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	4b6e      	ldr	r3, [pc, #440]	@ (80027d4 <OD_write_14xx+0x238>)
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d13d      	bne.n	800269c <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <OD_write_14xx+0x9e>
 8002626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <OD_write_14xx+0x9e>
 800262e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002630:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002634:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002636:	429a      	cmp	r2, r3
 8002638:	d130      	bne.n	800269c <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d026      	beq.n	800268e <OD_write_14xx+0xf2>
 8002640:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002642:	2b7f      	cmp	r3, #127	@ 0x7f
 8002644:	d92a      	bls.n	800269c <OD_write_14xx+0x100>
 8002646:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800264c:	d903      	bls.n	8002656 <OD_write_14xx+0xba>
 800264e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002650:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002654:	d922      	bls.n	800269c <OD_write_14xx+0x100>
 8002656:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002658:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800265c:	d903      	bls.n	8002666 <OD_write_14xx+0xca>
 800265e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002660:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002664:	d31a      	bcc.n	800269c <OD_write_14xx+0x100>
 8002666:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002668:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800266c:	d903      	bls.n	8002676 <OD_write_14xx+0xda>
 800266e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002670:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002674:	d312      	bcc.n	800269c <OD_write_14xx+0x100>
 8002676:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002678:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800267c:	d303      	bcc.n	8002686 <OD_write_14xx+0xea>
 800267e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002680:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002684:	d30a      	bcc.n	800269c <OD_write_14xx+0x100>
 8002686:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002688:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800268c:	d806      	bhi.n	800269c <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <OD_write_14xx+0x104>
 8002694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002696:	7b5b      	ldrb	r3, [r3, #13]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <OD_write_14xx+0x104>
            return ODR_INVALID_VALUE;
 800269c:	230f      	movs	r3, #15
 800269e:	e095      	b.n	80027cc <OD_write_14xx+0x230>
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80026a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d106      	bne.n	80026b8 <OD_write_14xx+0x11c>
 80026aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ac:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80026b0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80026b2:	429a      	cmp	r2, r3
 80026b4:	f000 8081 	beq.w	80027ba <OD_write_14xx+0x21e>
            if (CAN_ID == PDO->preDefinedCanId) {
 80026b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ba:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80026be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d108      	bne.n	80026d6 <OD_write_14xx+0x13a>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fc06 	bl	8001ee2 <CO_setUint32>
            if (!valid) {
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <OD_write_14xx+0x144>
                CAN_ID = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	86fb      	strh	r3, [r7, #54]	@ 0x36
            CO_ReturnError_t ret = CO_CANrxBufferInit(
 80026e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e2:	6858      	ldr	r0, [r3, #4]
 80026e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e6:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 80026ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80026ec:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <OD_write_14xx+0x23c>)
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	2300      	movs	r3, #0
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80026fc:	f004 fdc6 	bl	800728c <CO_CANrxBufferInit>
 8002700:	4603      	mov	r3, r0
 8002702:	75fb      	strb	r3, [r7, #23]
            if (valid && ret == CO_ERROR_NO) {
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <OD_write_14xx+0x186>
 800270a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <OD_write_14xx+0x186>
                PDO->valid = true;
 8002712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002714:	2201      	movs	r2, #1
 8002716:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800271c:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
        break;
 8002720:	e04b      	b.n	80027ba <OD_write_14xx+0x21e>
                PDO->valid = false;
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272a:	2200      	movs	r2, #0
 800272c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002732:	2200      	movs	r2, #0
 8002734:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
                if (ret != CO_ERROR_NO) {
 8002738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03c      	beq.n	80027ba <OD_write_14xx+0x21e>
                    return ODR_DEV_INCOMPAT;
 8002740:	2309      	movs	r3, #9
 8002742:	e043      	b.n	80027cc <OD_write_14xx+0x230>
        uint8_t transmissionType = CO_getUint8(buf);
 8002744:	68b8      	ldr	r0, [r7, #8]
 8002746:	f7ff fba1 	bl	8001e8c <CO_getUint8>
 800274a:	4603      	mov	r3, r0
 800274c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002754:	2bf0      	cmp	r3, #240	@ 0xf0
 8002756:	d905      	bls.n	8002764 <OD_write_14xx+0x1c8>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800275c:	2bfd      	cmp	r3, #253	@ 0xfd
 800275e:	d801      	bhi.n	8002764 <OD_write_14xx+0x1c8>
            return ODR_INVALID_VALUE;
 8002760:	230f      	movs	r3, #15
 8002762:	e033      	b.n	80027cc <OD_write_14xx+0x230>
        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002768:	2bf0      	cmp	r3, #240	@ 0xf0
 800276a:	bf94      	ite	ls
 800276c:	2301      	movls	r3, #1
 800276e:	2300      	movhi	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	623b      	str	r3, [r7, #32]
        if (RPDO->synchronous != synchronous) {
 8002774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002776:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	429a      	cmp	r2, r3
 800277e:	d003      	beq.n	8002788 <OD_write_14xx+0x1ec>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002782:	2200      	movs	r2, #0
 8002784:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        RPDO->synchronous = synchronous;
 8002788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278a:	6a3a      	ldr	r2, [r7, #32]
 800278c:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
        break;
 8002790:	e014      	b.n	80027bc <OD_write_14xx+0x220>
        uint32_t eventTime = CO_getUint16(buf);
 8002792:	68b8      	ldr	r0, [r7, #8]
 8002794:	f7ff fb88 	bl	8001ea8 <CO_getUint16>
 8002798:	4603      	mov	r3, r0
 800279a:	62bb      	str	r3, [r7, #40]	@ 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 800279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027a2:	fb03 f202 	mul.w	r2, r3, r2
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        RPDO->timeoutTimer = 0;
 80027ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        break;
 80027b4:	e002      	b.n	80027bc <OD_write_14xx+0x220>
        break;
 80027b6:	bf00      	nop
 80027b8:	e000      	b.n	80027bc <OD_write_14xx+0x220>
        break;
 80027ba:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80027bc:	f107 0110 	add.w	r1, r7, #16
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff f8cd 	bl	8001964 <OD_writeOriginal>
 80027ca:	4603      	mov	r3, r0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3738      	adds	r7, #56	@ 0x38
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	3ffff800 	.word	0x3ffff800
 80027d8:	080024df 	.word	0x080024df

080027dc <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b090      	sub	sp, #64	@ 0x40
 80027e0:	af04      	add	r7, sp, #16
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <CO_RPDO_init+0x36>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <CO_RPDO_init+0x36>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <CO_RPDO_init+0x36>
 8002800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 8002806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <CO_RPDO_init+0x36>
 800280c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002816:	e118      	b.n	8002a4a <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002818:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 800281c:	2100      	movs	r1, #0
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f00a ffbc 	bl	800d79c <memset>

    /* Configure object variables */
    PDO->em = em;
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800282e:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2301      	movs	r3, #1
 8002840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002846:	f7ff fcb9 	bl	80021bc <PDO_initMapping>
 800284a:	4603      	mov	r3, r0
 800284c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002850:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <CO_RPDO_init+0x82>
        return ret;
 8002858:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800285c:	e0f5      	b.n	8002a4a <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 8002862:	f107 0218 	add.w	r2, r7, #24
 8002866:	2301      	movs	r3, #1
 8002868:	2101      	movs	r1, #1
 800286a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800286c:	f7ff fb97 	bl	8001f9e <OD_get_u32>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002876:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00e      	beq.n	800289c <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 800287e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 8002884:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002886:	f7ff fb3b 	bl	8001f00 <OD_getIndex>
 800288a:	4603      	mov	r3, r0
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002894:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002896:	f06f 030b 	mvn.w	r3, #11
 800289a:	e0d6      	b.n	8002a4a <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	43db      	mvns	r3, r3
 80028a0:	0fdb      	lsrs	r3, r3, #31
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80028b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <CO_RPDO_init+0xf6>
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	7b5b      	ldrb	r3, [r3, #13]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <CO_RPDO_init+0xe8>
 80028be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <CO_RPDO_init+0xf6>
        valid = false;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0) { erroneousMap = 1; }
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <CO_RPDO_init+0xf6>
 80028ce:	2301      	movs	r3, #1
 80028d0:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <CO_RPDO_init+0x10a>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	e000      	b.n	80028e8 <CO_RPDO_init+0x10c>
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80028ee:	221a      	movs	r2, #26
 80028f0:	2101      	movs	r1, #1
 80028f2:	f7fe f9cd 	bl	8000c90 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80028f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002900:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <CO_RPDO_init+0x13c>
 8002906:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002908:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800290a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800290e:	400b      	ands	r3, r1
 8002910:	429a      	cmp	r2, r3
 8002912:	d101      	bne.n	8002918 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8002914:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002916:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    ret = CO_CANrxBufferInit(
 8002918:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800291a:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 800291e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a54 <CO_RPDO_init+0x278>)
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800292e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002930:	f004 fcac 	bl	800728c <CO_CANrxBufferInit>
 8002934:	4603      	mov	r3, r0
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 800293a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <CO_RPDO_init+0x16c>
        return ret;
 8002942:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002946:	e080      	b.n	8002a4a <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800294c:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 800294e:	23fe      	movs	r3, #254	@ 0xfe
 8002950:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 8002952:	f107 0217 	add.w	r2, r7, #23
 8002956:	2301      	movs	r3, #1
 8002958:	2102      	movs	r1, #2
 800295a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800295c:	f7ff faf5 	bl	8001f4a <OD_get_u8>
 8002960:	4603      	mov	r3, r0
 8002962:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002966:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00e      	beq.n	800298c <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 800296e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 8002974:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002976:	f7ff fac3 	bl	8001f00 <OD_getIndex>
 800297a:	4603      	mov	r3, r0
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	f043 0202 	orr.w	r2, r3, #2
 8002982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002984:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002986:	f06f 030b 	mvn.w	r3, #11
 800298a:	e05e      	b.n	8002a4a <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2bf0      	cmp	r3, #240	@ 0xf0
 8002998:	bf94      	ite	ls
 800299a:	2301      	movls	r3, #1
 800299c:	2300      	movhi	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 80029ac:	f107 0214 	add.w	r2, r7, #20
 80029b0:	2301      	movs	r3, #1
 80029b2:	2105      	movs	r1, #5
 80029b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029b6:	f7ff fadd 	bl	8001f74 <OD_get_u16>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 80029c0:	8abb      	ldrh	r3, [r7, #20]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c8:	fb03 f202 	mul.w	r2, r3, r2
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	2201      	movs	r2, #1
 80029d6:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevRxIdx;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80029e8:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80029f0:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80029f8:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = RPDO;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <CO_RPDO_init+0x27c>)
 8002a08:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <CO_RPDO_init+0x280>)
 8002a10:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = RPDO;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	4a10      	ldr	r2, [pc, #64]	@ (8002a60 <CO_RPDO_init+0x284>)
 8002a20:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	4a0f      	ldr	r2, [pc, #60]	@ (8002a64 <CO_RPDO_init+0x288>)
 8002a28:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002a32:	4619      	mov	r1, r3
 8002a34:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a36:	f7ff fa74 	bl	8001f22 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002a40:	4619      	mov	r1, r3
 8002a42:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a44:	f7ff fa6d 	bl	8001f22 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3730      	adds	r7, #48	@ 0x30
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	080024df 	.word	0x080024df
 8002a58:	08002443 	.word	0x08002443
 8002a5c:	0800259d 	.word	0x0800259d
 8002a60:	080018b5 	.word	0x080018b5
 8002a64:	08002311 	.word	0x08002311

08002a68 <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b097      	sub	sp, #92	@ 0x5c
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34

    if (PDO->valid && NMTisOperational
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8109 	beq.w	8002c96 <CO_RPDO_process+0x22e>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8105 	beq.w	8002c96 <CO_RPDO_process+0x22e>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8002a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <CO_RPDO_process+0x36>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 80fc 	bne.w	8002c96 <CO_RPDO_process+0x22e>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002aa4:	2b0a      	cmp	r3, #10
 8002aa6:	d928      	bls.n	8002afa <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002aae:	2b0b      	cmp	r3, #11
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	633b      	str	r3, [r7, #48]	@ 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d102      	bne.n	8002aca <CO_RPDO_process+0x62>
 8002ac4:	f248 2310 	movw	r3, #33296	@ 0x8210
 8002ac8:	e001      	b.n	8002ace <CO_RPDO_process+0x66>
 8002aca:	f248 2320 	movw	r3, #33312	@ 0x8220
 8002ace:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad2:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad6:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002ad8:	461a      	mov	r2, r3
 8002ada:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002adc:	9200      	str	r2, [sp, #0]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ae2:	f7fe f8d5 	bl	8000c90 <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <CO_RPDO_process+0xbe>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <CO_RPDO_process+0xbe>
            && !RPDO->SYNC->CANrxToggle) {
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <CO_RPDO_process+0xbe>
            bufNo = 1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002b26:	2300      	movs	r3, #0
 8002b28:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002b2a:	e062      	b.n	8002bf2 <CO_RPDO_process+0x18a>
            rpdoReceived = true;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8002b30:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b34:	332e      	adds	r3, #46	@ 0x2e
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002b3e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	325a      	adds	r2, #90	@ 0x5a
 8002b46:	2100      	movs	r1, #0
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002b52:	e048      	b.n	8002be6 <CO_RPDO_process+0x17e>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002b54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002b58:	015b      	lsls	r3, r3, #5
 8002b5a:	3310      	adds	r3, #16
 8002b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b5e:	4413      	add	r3, r2
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 8002b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b64:	330c      	adds	r3, #12
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 8002b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d901      	bls.n	8002b80 <CO_RPDO_process+0x118>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8002b80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d912      	bls.n	8002bb0 <CO_RPDO_process+0x148>
                    memset(buf, 0, sizeof(buf));
 8002b8a:	f107 0318 	add.w	r3, r7, #24
 8002b8e:	2208      	movs	r2, #8
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f00a fe02 	bl	800d79c <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 8002b98:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002b9c:	f107 0318 	add.w	r3, r7, #24
 8002ba0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f00a fe85 	bl	800d8b2 <memcpy>
                    dataOD = buf;
 8002ba8:	f107 0318 	add.w	r3, r7, #24
 8002bac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bae:	e001      	b.n	8002bb4 <CO_RPDO_process+0x14c>
                }
                else {
                    dataOD = dataRPDO;
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 8002bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbc:	69dc      	ldr	r4, [r3, #28]
 8002bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bc8:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 8002bca:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bd8:	4413      	add	r3, r2
 8002bda:	647b      	str	r3, [r7, #68]	@ 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002bdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002be0:	3301      	adds	r3, #1
 8002be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be8:	7b5b      	ldrb	r3, [r3, #13]
 8002bea:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3b0      	bcc.n	8002b54 <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002bf2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	325a      	adds	r2, #90	@ 0x5a
 8002bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d194      	bne.n	8002b2c <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d058      	beq.n	8002cbe <CO_RPDO_process+0x256>
            if (rpdoReceived) {
 8002c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d017      	beq.n	8002c42 <CO_RPDO_process+0x1da>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d90a      	bls.n	8002c38 <CO_RPDO_process+0x1d0>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2217      	movs	r2, #23
 8002c32:	2100      	movs	r1, #0
 8002c34:	f7fe f82c 	bl	8000c90 <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    ) {
 8002c40:	e03d      	b.n	8002cbe <CO_RPDO_process+0x256>
            }
            else if (RPDO->timeoutTimer > 0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d038      	beq.n	8002cbe <CO_RPDO_process+0x256>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d230      	bcs.n	8002cbe <CO_RPDO_process+0x256>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	441a      	add	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d920      	bls.n	8002cbe <CO_RPDO_process+0x256>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	f248 2350 	movw	r3, #33360	@ 0x8250
 8002c8c:	2217      	movs	r2, #23
 8002c8e:	2101      	movs	r1, #1
 8002c90:	f7fd fffe 	bl	8000c90 <CO_error>
    ) {
 8002c94:	e013      	b.n	8002cbe <CO_RPDO_process+0x256>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8002c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <CO_RPDO_process+0x23c>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <CO_RPDO_process+0x258>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8002cbc:	e000      	b.n	8002cc0 <CO_RPDO_process+0x258>
    ) {
 8002cbe:	bf00      	nop
}
 8002cc0:	bf00      	nop
 8002cc2:	3754      	adds	r7, #84	@ 0x54
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}

08002cc8 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b093      	sub	sp, #76	@ 0x4c
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <OD_write_18xx+0x26>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <OD_write_18xx+0x26>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <OD_write_18xx+0x26>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d901      	bls.n	8002cf2 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002cee:	2309      	movs	r3, #9
 8002cf0:	e138      	b.n	8002f64 <OD_write_18xx+0x29c>
    }

    CO_TPDO_t *TPDO = stream->object;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00a fdd4 	bl	800d8b2 <memcpy>

    switch (stream->subIndex) {
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	7d1b      	ldrb	r3, [r3, #20]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	f200 811c 	bhi.w	8002f4e <OD_write_18xx+0x286>
 8002d16:	a201      	add	r2, pc, #4	@ (adr r2, 8002d1c <OD_write_18xx+0x54>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002e6b 	.word	0x08002e6b
 8002d24:	08002ed1 	.word	0x08002ed1
 8002d28:	08002f4f 	.word	0x08002f4f
 8002d2c:	08002eff 	.word	0x08002eff
 8002d30:	08002f23 	.word	0x08002f23
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f7ff f8c6 	bl	8001ec6 <CO_getUint32>
 8002d3a:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	0fdb      	lsrs	r3, r3, #31
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	4b86      	ldr	r3, [pc, #536]	@ (8002f6c <OD_write_18xx+0x2a4>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d13d      	bne.n	8002dd6 <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <OD_write_18xx+0xac>
 8002d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <OD_write_18xx+0xac>
 8002d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002d6e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d130      	bne.n	8002dd6 <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d026      	beq.n	8002dc8 <OD_write_18xx+0x100>
 8002d7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002d7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d7e:	d92a      	bls.n	8002dd6 <OD_write_18xx+0x10e>
 8002d80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d86:	d903      	bls.n	8002d90 <OD_write_18xx+0xc8>
 8002d88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002d8a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002d8e:	d922      	bls.n	8002dd6 <OD_write_18xx+0x10e>
 8002d90:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002d92:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002d96:	d903      	bls.n	8002da0 <OD_write_18xx+0xd8>
 8002d98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002d9a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002d9e:	d31a      	bcc.n	8002dd6 <OD_write_18xx+0x10e>
 8002da0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002da2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002da6:	d903      	bls.n	8002db0 <OD_write_18xx+0xe8>
 8002da8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002daa:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002dae:	d312      	bcc.n	8002dd6 <OD_write_18xx+0x10e>
 8002db0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002db2:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002db6:	d303      	bcc.n	8002dc0 <OD_write_18xx+0xf8>
 8002db8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002dba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dbe:	d30a      	bcc.n	8002dd6 <OD_write_18xx+0x10e>
 8002dc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002dc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dc6:	d806      	bhi.n	8002dd6 <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <OD_write_18xx+0x112>
 8002dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd0:	7b5b      	ldrb	r3, [r3, #13]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	e0c4      	b.n	8002f64 <OD_write_18xx+0x29c>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d106      	bne.n	8002df2 <OD_write_18xx+0x12a>
 8002de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de6:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002dea:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f000 80b0 	beq.w	8002f52 <OD_write_18xx+0x28a>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df4:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8002df8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d108      	bne.n	8002e10 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f869 	bl	8001ee2 <CO_setUint32>
            }
            if (!valid) {
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <OD_write_18xx+0x152>
                CAN_ID = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1c:	6858      	ldr	r0, [r3, #4]
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e20:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 8002e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e26:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002e28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e2a:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002e2e:	2af0      	cmp	r2, #240	@ 0xf0
 8002e30:	bf94      	ite	ls
 8002e32:	2201      	movls	r2, #1
 8002e34:	2200      	movhi	r2, #0
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	4614      	mov	r4, r2
 8002e3a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002e3c:	9401      	str	r4, [sp, #4]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	f004 fa81 	bl	8007348 <CO_CANtxBufferInit>
 8002e46:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8002e4e:	2309      	movs	r3, #9
 8002e50:	e088      	b.n	8002f64 <OD_write_18xx+0x29c>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            PDO->valid = valid;
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8002e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e62:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002e64:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
        }
        break;
 8002e68:	e073      	b.n	8002f52 <OD_write_18xx+0x28a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002e6a:	68b8      	ldr	r0, [r7, #8]
 8002e6c:	f7ff f80e 	bl	8001e8c <CO_getUint8>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002e76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e7a:	2bf0      	cmp	r3, #240	@ 0xf0
 8002e7c:	d905      	bls.n	8002e8a <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e82:	2bfd      	cmp	r3, #253	@ 0xfd
 8002e84:	d801      	bhi.n	8002e8a <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 8002e86:	230f      	movs	r3, #15
 8002e88:	e06c      	b.n	8002f64 <OD_write_18xx+0x29c>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e8e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002e90:	bf94      	ite	ls
 8002e92:	2301      	movls	r3, #1
 8002e94:	2300      	movhi	r3, #0
 8002e96:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 8002e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002e9e:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea2:	22ff      	movs	r2, #255	@ 0xff
 8002ea4:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eaa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002eae:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
        TPDO->sendRequest = true;
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eca:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
#endif
        break;
 8002ece:	e041      	b.n	8002f54 <OD_write_18xx+0x28c>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 8002ed8:	230f      	movs	r3, #15
 8002eda:	e043      	b.n	8002f64 <OD_write_18xx+0x29c>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002edc:	68b8      	ldr	r0, [r7, #8]
 8002ede:	f7fe ffe3 	bl	8001ea8 <CO_getUint16>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	2264      	movs	r2, #100	@ 0x64
 8002eea:	fb03 f202 	mul.w	r2, r3, r2
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        TPDO->inhibitTimer = 0;
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        break;
 8002efc:	e02a      	b.n	8002f54 <OD_write_18xx+0x28c>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002efe:	68b8      	ldr	r0, [r7, #8]
 8002f00:	f7fe ffd2 	bl	8001ea8 <CO_getUint16>
 8002f04:	4603      	mov	r3, r0
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f0e:	fb03 f202 	mul.w	r2, r3, r2
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
        TPDO->eventTimer = 0;
 8002f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
        break;
 8002f20:	e018      	b.n	8002f54 <OD_write_18xx+0x28c>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8002f22:	68b8      	ldr	r0, [r7, #8]
 8002f24:	f7fe ffb2 	bl	8001e8c <CO_getUint8>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        if (PDO->valid || syncStartValue > 240) {
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <OD_write_18xx+0x276>
 8002f36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f3a:	2bf0      	cmp	r3, #240	@ 0xf0
 8002f3c:	d901      	bls.n	8002f42 <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 8002f3e:	230f      	movs	r3, #15
 8002f40:	e010      	b.n	8002f64 <OD_write_18xx+0x29c>
        }
        TPDO->syncStartValue = syncStartValue;
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002f48:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
        break;
 8002f4c:	e002      	b.n	8002f54 <OD_write_18xx+0x28c>
    }
#endif
    default:
        /* MISRA C 2004 15.3 */
        break;
 8002f4e:	bf00      	nop
 8002f50:	e000      	b.n	8002f54 <OD_write_18xx+0x28c>
        break;
 8002f52:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002f54:	f107 0114 	add.w	r1, r7, #20
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7fe fd01 	bl	8001964 <OD_writeOriginal>
 8002f62:	4603      	mov	r3, r0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3744      	adds	r7, #68	@ 0x44
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd90      	pop	{r4, r7, pc}
 8002f6c:	3ffff800 	.word	0x3ffff800

08002f70 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	@ 0x38
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <CO_TPDO_init+0x36>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <CO_TPDO_init+0x36>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <CO_TPDO_init+0x36>
 8002f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8002f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <CO_TPDO_init+0x36>
 8002fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002faa:	e14d      	b.n	8003248 <CO_TPDO_init+0x2d8>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002fac:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f00a fbf2 	bl	800d79c <memset>

    /* Configure object variables */
    PDO->em = em;
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fc2:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fda:	f7ff f8ef 	bl	80021bc <PDO_initMapping>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002fe4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <CO_TPDO_init+0x82>
        return ret;
 8002fec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002ff0:	e12a      	b.n	8003248 <CO_TPDO_init+0x2d8>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002ff2:	23fe      	movs	r3, #254	@ 0xfe
 8002ff4:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002ff6:	f107 021b 	add.w	r2, r7, #27
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003000:	f7fe ffa3 	bl	8001f4a <OD_get_u8>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800300a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8003012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8003018:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800301a:	f7fe ff71 	bl	8001f00 <OD_getIndex>
 800301e:	4603      	mov	r3, r0
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003028:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800302a:	f06f 030b 	mvn.w	r3, #11
 800302e:	e10b      	b.n	8003248 <CO_TPDO_init+0x2d8>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003030:	7efb      	ldrb	r3, [r7, #27]
 8003032:	2bfd      	cmp	r3, #253	@ 0xfd
 8003034:	d804      	bhi.n	8003040 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003036:	7efb      	ldrb	r3, [r7, #27]
 8003038:	2bf0      	cmp	r3, #240	@ 0xf0
 800303a:	d901      	bls.n	8003040 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 800303c:	23fe      	movs	r3, #254	@ 0xfe
 800303e:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8003040:	7efa      	ldrb	r2, [r7, #27]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    TPDO->sendRequest = true;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003054:	f107 0214 	add.w	r2, r7, #20
 8003058:	2301      	movs	r3, #1
 800305a:	2101      	movs	r1, #1
 800305c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800305e:	f7fe ff9e 	bl	8001f9e <OD_get_u32>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8003068:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8003070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8003076:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003078:	f7fe ff42 	bl	8001f00 <OD_getIndex>
 800307c:	4603      	mov	r3, r0
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003086:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003088:	f06f 030b 	mvn.w	r3, #11
 800308c:	e0dc      	b.n	8003248 <CO_TPDO_init+0x2d8>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	43db      	mvns	r3, r3
 8003092:	0fdb      	lsrs	r3, r3, #31
 8003094:	b2db      	uxtb	r3, r3
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	b29b      	uxth	r3, r3
 800309c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80030a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <CO_TPDO_init+0x154>
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	7b5b      	ldrb	r3, [r3, #13]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <CO_TPDO_init+0x146>
 80030b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <CO_TPDO_init+0x154>
        valid = false;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0) { erroneousMap = 1; }
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <CO_TPDO_init+0x154>
 80030c0:	2301      	movs	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <CO_TPDO_init+0x168>
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	e000      	b.n	80030da <CO_TPDO_init+0x16a>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80030e0:	221a      	movs	r2, #26
 80030e2:	2101      	movs	r1, #1
 80030e4:	f7fd fdd4 	bl	8000c90 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80030e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 80030f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <CO_TPDO_init+0x19a>
 80030f8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80030fa:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80030fc:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003100:	400b      	ands	r3, r1
 8003102:	429a      	cmp	r2, r3
 8003104:	d101      	bne.n	800310a <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8003106:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003108:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8003114:	2af0      	cmp	r2, #240	@ 0xf0
 8003116:	bf94      	ite	ls
 8003118:	2201      	movls	r2, #1
 800311a:	2200      	movhi	r2, #0
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	4610      	mov	r0, r2
 8003120:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003122:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8003126:	9001      	str	r0, [sp, #4]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800312e:	f004 f90b 	bl	8007348 <CO_CANtxBufferInit>
 8003132:	4602      	mov	r2, r0
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003144:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003148:	e07e      	b.n	8003248 <CO_TPDO_init+0x2d8>
    }

    PDO->valid = valid;
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800314e:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003158:	f107 0212 	add.w	r2, r7, #18
 800315c:	2301      	movs	r3, #1
 800315e:	2103      	movs	r1, #3
 8003160:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003162:	f7fe ff07 	bl	8001f74 <OD_get_u16>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 800316c:	f107 0210 	add.w	r2, r7, #16
 8003170:	2301      	movs	r3, #1
 8003172:	2105      	movs	r1, #5
 8003174:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003176:	f7fe fefd 	bl	8001f74 <OD_get_u16>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100;
 8003180:	8a7b      	ldrh	r3, [r7, #18]
 8003182:	461a      	mov	r2, r3
 8003184:	2364      	movs	r3, #100	@ 0x64
 8003186:	fb03 f202 	mul.w	r2, r3, r2
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000;
 8003190:	8a3b      	ldrh	r3, [r7, #16]
 8003192:	461a      	mov	r2, r3
 8003194:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003198:	fb03 f202 	mul.w	r2, r3, r2
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f503 72bc 	add.w	r2, r3, #376	@ 0x178
 80031b0:	2301      	movs	r3, #1
 80031b2:	2106      	movs	r1, #6
 80031b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80031b6:	f7fe fec8 	bl	8001f4a <OD_get_u8>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    TPDO->SYNC = SYNC;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
    TPDO->syncCounter = 255;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	22ff      	movs	r2, #255	@ 0xff
 80031cc:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80031e6:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80031ee:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80031f6:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	4a12      	ldr	r2, [pc, #72]	@ (8003250 <CO_TPDO_init+0x2e0>)
 8003206:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	4a11      	ldr	r2, [pc, #68]	@ (8003254 <CO_TPDO_init+0x2e4>)
 800320e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	4a0e      	ldr	r2, [pc, #56]	@ (8003258 <CO_TPDO_init+0x2e8>)
 800321e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <CO_TPDO_init+0x2ec>)
 8003226:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003230:	4619      	mov	r1, r3
 8003232:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003234:	f7fe fe75 	bl	8001f22 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800323e:	4619      	mov	r1, r3
 8003240:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003242:	f7fe fe6e 	bl	8001f22 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3730      	adds	r7, #48	@ 0x30
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	08002443 	.word	0x08002443
 8003254:	08002cc9 	.word	0x08002cc9
 8003258:	080018b5 	.word	0x080018b5
 800325c:	08002311 	.word	0x08002311

08003260 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b091      	sub	sp, #68	@ 0x44
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003272:	3305      	adds	r3, #5
 8003274:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <CO_TPDOsend+0x2a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003286:	2bfd      	cmp	r3, #253	@ 0xfd
 8003288:	d901      	bls.n	800328e <CO_TPDOsend+0x2e>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <CO_TPDOsend+0x30>
 800328e:	2300      	movs	r3, #0
    bool_t eventDriven =
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003292:	2300      	movs	r3, #0
 8003294:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003298:	e05f      	b.n	800335a <CO_TPDOsend+0xfa>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800329a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	3310      	adds	r3, #16
 80032a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032a4:	4413      	add	r3, r2
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
        OD_stream_t *stream = &OD_IO->stream;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	637b      	str	r3, [r7, #52]	@ 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d901      	bls.n	80032c2 <CO_TPDOsend+0x62>
            ODdataLength = CO_PDO_MAX_SIZE;
 80032be:	2308      	movs	r3, #8
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d90a      	bls.n	80032e0 <CO_TPDOsend+0x80>
            memset(buf, 0, sizeof(buf));
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	2208      	movs	r2, #8
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00a fa62 	bl	800d79c <memset>
            dataTPDOCopy = buf;
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80032de:	e001      	b.n	80032e4 <CO_TPDOsend+0x84>
        }
        else {
            dataTPDOCopy = dataTPDO;
 80032e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e2:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	699c      	ldr	r4, [r3, #24]
 80032ee:	f107 030c 	add.w	r3, r7, #12
 80032f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032f6:	6a38      	ldr	r0, [r7, #32]
 80032f8:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 80032fa:	7ffa      	ldrb	r2, [r7, #31]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8003300:	7ffb      	ldrb	r3, [r7, #31]
 8003302:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003304:	429a      	cmp	r2, r3
 8003306:	d906      	bls.n	8003316 <CO_TPDOsend+0xb6>
            memcpy(dataTPDO, buf, mappedLength);
 8003308:	7ffa      	ldrb	r2, [r7, #31]
 800330a:	f107 0310 	add.w	r3, r7, #16
 800330e:	4619      	mov	r1, r3
 8003310:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003312:	f00a face 	bl	800d8b2 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003316:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331c:	3244      	adds	r2, #68	@ 0x44
 800331e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003322:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <CO_TPDOsend+0xe8>
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <CO_TPDOsend+0xe8>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800333a:	440b      	add	r3, r1
 800333c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003340:	4313      	orrs	r3, r2
 8003342:	b2da      	uxtb	r2, r3
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 8003348:	7ffb      	ldrb	r3, [r7, #31]
 800334a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800334c:	4413      	add	r3, r2
 800334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003350:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003354:	3301      	adds	r3, #1
 8003356:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	7b5b      	ldrb	r3, [r3, #13]
 800335e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8003362:	429a      	cmp	r2, r3
 8003364:	d399      	bcc.n	800329a <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f004 f896 	bl	80074c4 <CO_CANsend>
 8003398:	4603      	mov	r3, r0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3744      	adds	r7, #68	@ 0x44
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}

080033a2 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b088      	sub	sp, #32
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80dc 	beq.w	8003576 <CO_TPDO_process+0x1d4>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80d8 	beq.w	8003576 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80033d6:	2bfd      	cmp	r3, #253	@ 0xfd
 80033d8:	d946      	bls.n	8003468 <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d018      	beq.n	8003416 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d205      	bcs.n	80033fc <CO_TPDO_process+0x5a>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	e000      	b.n	80033fe <CO_TPDO_process+0x5c>
 80033fc:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                if (TPDO->eventTimer == 0) {
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800341c:	2b00      	cmp	r3, #0
 800341e:	d123      	bne.n	8003468 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003420:	2300      	movs	r3, #0
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e01b      	b.n	800345e <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003426:	7ffa      	ldrb	r2, [r7, #31]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	3244      	adds	r2, #68	@ 0x44
 800342c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003430:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00f      	beq.n	8003458 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	781a      	ldrb	r2, [r3, #0]
 800343c:	7ffb      	ldrb	r3, [r7, #31]
 800343e:	69b9      	ldr	r1, [r7, #24]
 8003440:	440b      	add	r3, r1
 8003442:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003446:	4013      	ands	r3, r2
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d104      	bne.n	8003458 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
                            break;
 8003456:	e007      	b.n	8003468 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	3301      	adds	r3, #1
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	7b5b      	ldrb	r3, [r3, #13]
 8003462:	7ffa      	ldrb	r2, [r7, #31]
 8003464:	429a      	cmp	r2, r3
 8003466:	d3de      	bcc.n	8003426 <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800346e:	2bfd      	cmp	r3, #253	@ 0xfd
 8003470:	d91d      	bls.n	80034ae <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d205      	bcs.n	800348a <CO_TPDO_process+0xe8>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	e000      	b.n	800348c <CO_TPDO_process+0xea>
 800348a:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003498:	2b00      	cmp	r3, #0
 800349a:	d07f      	beq.n	800359c <CO_TPDO_process+0x1fa>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d17a      	bne.n	800359c <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff feda 	bl	8003260 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80034ac:	e076      	b.n	800359c <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d071      	beq.n	800359c <CO_TPDO_process+0x1fa>
 80034b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d06e      	beq.n	800359c <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d108      	bne.n	80034da <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) { CO_TPDOsend(TPDO); }
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d064      	beq.n	800359c <CO_TPDO_process+0x1fa>
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff fec4 	bl	8003260 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80034d8:	e060      	b.n	800359c <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 80034e0:	2bff      	cmp	r3, #255	@ 0xff
 80034e2:	d119      	bne.n	8003518 <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80034ea:	7c5b      	ldrb	r3, [r3, #17]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	22fe      	movs	r2, #254	@ 0xfe
 80034fe:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 8003502:	e009      	b.n	8003518 <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3301      	adds	r3, #1
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800351e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003520:	d112      	bne.n	8003548 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8003528:	7c9a      	ldrb	r2, [r3, #18]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 8003530:	429a      	cmp	r2, r3
 8003532:	d133      	bne.n	800359c <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                        CO_TPDOsend(TPDO);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff fe8d 	bl	8003260 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003546:	e029      	b.n	800359c <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800354e:	3b01      	subs	r3, #1
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11c      	bne.n	800359c <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    CO_TPDOsend(TPDO);
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff fe76 	bl	8003260 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003574:	e012      	b.n	800359c <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	22ff      	movs	r2, #255	@ 0xff
 8003596:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif
    }
}
 800359a:	e000      	b.n	800359e <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800359c:	bf00      	nop
}
 800359e:	bf00      	nop
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <OD_getIndex+0x14>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	e000      	b.n	80035f4 <OD_getIndex+0x16>
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <OD_extension_init>:
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <OD_extension_init+0x14>
 8003610:	2305      	movs	r3, #5
 8003612:	e003      	b.n	800361c <OD_extension_init+0x1c>
    entry->extension = extension;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <OD_get_u8>:
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	460b      	mov	r3, r1
 8003636:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003638:	7af9      	ldrb	r1, [r7, #11]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2301      	movs	r3, #1
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7fe fb78 	bl	8001d38 <OD_get_value>
 8003648:	4603      	mov	r3, r0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <OD_get_u32>:
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af02      	add	r7, sp, #8
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	460b      	mov	r3, r1
 8003660:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003662:	7af9      	ldrb	r1, [r7, #11]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	2304      	movs	r3, #4
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7fe fb63 	bl	8001d38 <OD_get_value>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	460b      	mov	r3, r1
 800368a:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 800368c:	1d3a      	adds	r2, r7, #4
 800368e:	7af9      	ldrb	r1, [r7, #11]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2304      	movs	r3, #4
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7fe fb84 	bl	8001da4 <OD_set_value>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	791b      	ldrb	r3, [r3, #4]
 80036b8:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	3305      	adds	r3, #5
 80036be:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d115      	bne.n	80036f2 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b80      	cmp	r3, #128	@ 0x80
 80036cc:	d103      	bne.n	80036d6 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 80036d4:	e00d      	b.n	80036f2 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3340      	adds	r3, #64	@ 0x40
 80036e2:	7cfa      	ldrb	r2, [r7, #19]
 80036e4:	68f9      	ldr	r1, [r7, #12]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f00a f8e3 	bl	800d8b2 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2201      	movs	r2, #1
 80036f0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	@ 0x28
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	460b      	mov	r3, r1
 800370c:	80fb      	strh	r3, [r7, #6]
 800370e:	4613      	mov	r3, r2
 8003710:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003716:	6a3a      	ldr	r2, [r7, #32]
 8003718:	429a      	cmp	r2, r3
 800371a:	d106      	bne.n	800372a <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003722:	429a      	cmp	r2, r3
 8003724:	d101      	bne.n	800372a <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8003726:	2300      	movs	r3, #0
 8003728:	e04e      	b.n	80037c8 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003734:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db02      	blt.n	8003742 <CO_SDOserver_init_canRxTx+0x46>
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	b29b      	uxth	r3, r3
 8003740:	e000      	b.n	8003744 <CO_SDOserver_init_canRxTx+0x48>
 8003742:	2300      	movs	r3, #0
 8003744:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	2b00      	cmp	r3, #0
 800374a:	db02      	blt.n	8003752 <CO_SDOserver_init_canRxTx+0x56>
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	b29b      	uxth	r3, r3
 8003750:	e000      	b.n	8003754 <CO_SDOserver_init_canRxTx+0x58>
 8003752:	2300      	movs	r3, #0
 8003754:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8003756:	8afb      	ldrh	r3, [r7, #22]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <CO_SDOserver_init_canRxTx+0x6e>
 800375c:	8abb      	ldrh	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	611a      	str	r2, [r3, #16]
 8003768:	e006      	b.n	8003778 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003778:	8afa      	ldrh	r2, [r7, #22]
 800377a:	88f9      	ldrh	r1, [r7, #6]
 800377c:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <CO_SDOserver_init_canRxTx+0xd4>)
 800377e:	9302      	str	r3, [sp, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800378c:	68b8      	ldr	r0, [r7, #8]
 800378e:	f003 fd7d 	bl	800728c <CO_CANrxBufferInit>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	8aba      	ldrh	r2, [r7, #20]
 800379c:	88b9      	ldrh	r1, [r7, #4]
 800379e:	2300      	movs	r3, #0
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	2308      	movs	r3, #8
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2300      	movs	r3, #0
 80037a8:	f003 fdce 	bl	8007348 <CO_CANtxBufferInit>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80037ba:	23ff      	movs	r3, #255	@ 0xff
 80037bc:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
    }

    return ret;
 80037c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	080036a7 	.word	0x080036a7

080037d4 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b08f      	sub	sp, #60	@ 0x3c
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <OD_write_1201_additional+0x20>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <OD_write_1201_additional+0x20>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 80037f4:	2309      	movs	r3, #9
 80037f6:	e0f9      	b.n	80039ec <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	7d1b      	ldrb	r3, [r3, #20]
 8003802:	2b03      	cmp	r3, #3
 8003804:	f200 80e8 	bhi.w	80039d8 <OD_write_1201_additional+0x204>
 8003808:	a201      	add	r2, pc, #4	@ (adr r2, 8003810 <OD_write_1201_additional+0x3c>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003821 	.word	0x08003821
 8003814:	08003825 	.word	0x08003825
 8003818:	080038e9 	.word	0x080038e9
 800381c:	080039af 	.word	0x080039af
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 8003820:	2304      	movs	r3, #4
 8003822:	e0e3      	b.n	80039ec <OD_write_1201_additional+0x218>
            break;

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f7ff fecc 	bl	80035c2 <CO_getUint32>
 800382a:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003834:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383a:	b29b      	uxth	r3, r3
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	0fdb      	lsrs	r3, r3, #31
 8003848:	b2db      	uxtb	r3, r3
 800384a:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4b69      	ldr	r3, [pc, #420]	@ (80039f4 <OD_write_1201_additional+0x220>)
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d134      	bne.n	80038c0 <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <OD_write_1201_additional+0x98>
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <OD_write_1201_additional+0x98>
 8003864:	8afa      	ldrh	r2, [r7, #22]
 8003866:	8abb      	ldrh	r3, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	d129      	bne.n	80038c0 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d028      	beq.n	80038c4 <OD_write_1201_additional+0xf0>
 8003872:	8afb      	ldrh	r3, [r7, #22]
 8003874:	2b7f      	cmp	r3, #127	@ 0x7f
 8003876:	d923      	bls.n	80038c0 <OD_write_1201_additional+0xec>
 8003878:	8afb      	ldrh	r3, [r7, #22]
 800387a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800387e:	d903      	bls.n	8003888 <OD_write_1201_additional+0xb4>
 8003880:	8afb      	ldrh	r3, [r7, #22]
 8003882:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003886:	d91b      	bls.n	80038c0 <OD_write_1201_additional+0xec>
 8003888:	8afb      	ldrh	r3, [r7, #22]
 800388a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800388e:	d903      	bls.n	8003898 <OD_write_1201_additional+0xc4>
 8003890:	8afb      	ldrh	r3, [r7, #22]
 8003892:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003896:	d313      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 8003898:	8afb      	ldrh	r3, [r7, #22]
 800389a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800389e:	d903      	bls.n	80038a8 <OD_write_1201_additional+0xd4>
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80038a6:	d30b      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80038ae:	d303      	bcc.n	80038b8 <OD_write_1201_additional+0xe4>
 80038b0:	8afb      	ldrh	r3, [r7, #22]
 80038b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038b6:	d303      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 80038b8:	8afb      	ldrh	r3, [r7, #22]
 80038ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038be:	d901      	bls.n	80038c4 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 80038c0:	230f      	movs	r3, #15
 80038c2:	e093      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 80038c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80038c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ca:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80038ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d0:	f8b3 004e 	ldrh.w	r0, [r3, #78]	@ 0x4e
 80038d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4603      	mov	r3, r0
 80038e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038e2:	f7ff ff0b 	bl	80036fc <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 80038e6:	e07a      	b.n	80039de <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80038e8:	68b8      	ldr	r0, [r7, #8]
 80038ea:	f7ff fe6a 	bl	80035c2 <CO_getUint32>
 80038ee:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f8:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 80038fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003904:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	43db      	mvns	r3, r3
 800390a:	0fdb      	lsrs	r3, r3, #31
 800390c:	b2db      	uxtb	r3, r3
 800390e:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003912:	4b38      	ldr	r3, [pc, #224]	@ (80039f4 <OD_write_1201_additional+0x220>)
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d134      	bne.n	8003984 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <OD_write_1201_additional+0x15c>
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <OD_write_1201_additional+0x15c>
 8003928:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800392a:	8c3b      	ldrh	r3, [r7, #32]
 800392c:	429a      	cmp	r2, r3
 800392e:	d129      	bne.n	8003984 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d028      	beq.n	8003988 <OD_write_1201_additional+0x1b4>
 8003936:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003938:	2b7f      	cmp	r3, #127	@ 0x7f
 800393a:	d923      	bls.n	8003984 <OD_write_1201_additional+0x1b0>
 800393c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800393e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003942:	d903      	bls.n	800394c <OD_write_1201_additional+0x178>
 8003944:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003946:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800394a:	d91b      	bls.n	8003984 <OD_write_1201_additional+0x1b0>
 800394c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800394e:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8003952:	d903      	bls.n	800395c <OD_write_1201_additional+0x188>
 8003954:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003956:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800395a:	d313      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800395c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800395e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003962:	d903      	bls.n	800396c <OD_write_1201_additional+0x198>
 8003964:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003966:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 800396a:	d30b      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800396c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800396e:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003972:	d303      	bcc.n	800397c <OD_write_1201_additional+0x1a8>
 8003974:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003976:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800397a:	d303      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800397c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800397e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003982:	d901      	bls.n	8003988 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8003984:	230f      	movs	r3, #15
 8003986:	e031      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398e:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	f8b3 404e 	ldrh.w	r4, [r3, #78]	@ 0x4e
 8003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399e:	9201      	str	r2, [sp, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4623      	mov	r3, r4
 80039a4:	4602      	mov	r2, r0
 80039a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039a8:	f7ff fea8 	bl	80036fc <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 80039ac:	e017      	b.n	80039de <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80039b4:	230b      	movs	r3, #11
 80039b6:	e019      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80039b8:	68b8      	ldr	r0, [r7, #8]
 80039ba:	f7ff fdf4 	bl	80035a6 <CO_getUint8>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if (nodeId < 1 || nodeId > 127) {
 80039c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <OD_write_1201_additional+0x200>
 80039cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da03      	bge.n	80039dc <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 80039d4:	230f      	movs	r3, #15
 80039d6:	e009      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 80039d8:	230e      	movs	r3, #14
 80039da:	e007      	b.n	80039ec <OD_write_1201_additional+0x218>
            break;
 80039dc:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7fd ffbd 	bl	8001964 <OD_writeOriginal>
 80039ea:	4603      	mov	r3, r0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3734      	adds	r7, #52	@ 0x34
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd90      	pop	{r4, r7, pc}
 80039f4:	3ffff800 	.word	0x3ffff800

080039f8 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	@ 0x30
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a22:	e0f5      	b.n	8003c10 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8003a30:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003a32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d117      	bne.n	8003a7a <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) { return CO_ERROR_ILLEGAL_ARGUMENT; }
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <CO_SDOserver_init+0x60>
 8003a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da02      	bge.n	8003a5e <CO_SDOserver_init+0x66>
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a5c:	e0d8      	b.n	8003c10 <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003a66:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003a70:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	611a      	str	r2, [r3, #16]
 8003a78:	e0a4      	b.n	8003bc4 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fdaf 	bl	80035de <OD_getIndex>
 8003a80:	4603      	mov	r3, r0
 8003a82:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8003a84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a86:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003a8a:	d123      	bne.n	8003ad4 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) {
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <CO_SDOserver_init+0xa2>
 8003a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da02      	bge.n	8003aa0 <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a9e:	e0b7      	b.n	8003c10 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003aa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003ab2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003aba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003abc:	2301      	movs	r3, #1
 8003abe:	2101      	movs	r1, #1
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fddb 	bl	800367c <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003ac6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ac8:	2301      	movs	r3, #1
 8003aca:	2102      	movs	r1, #2
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fdd5 	bl	800367c <OD_set_u32>
 8003ad2:	e077      	b.n	8003bc4 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8003ad4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ad6:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003ada:	d96f      	bls.n	8003bbc <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8003adc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ade:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8003ae2:	d26b      	bcs.n	8003bbc <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003ae4:	f107 021d 	add.w	r2, r7, #29
 8003ae8:	2301      	movs	r3, #1
 8003aea:	2100      	movs	r1, #0
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fd9b 	bl	8003628 <OD_get_u8>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8003af8:	f107 0218 	add.w	r2, r7, #24
 8003afc:	2301      	movs	r3, #1
 8003afe:	2101      	movs	r1, #1
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fda6 	bl	8003652 <OD_get_u32>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8003b0c:	f107 0214 	add.w	r2, r7, #20
 8003b10:	2301      	movs	r3, #1
 8003b12:	2102      	movs	r1, #2
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fd9c 	bl	8003652 <OD_get_u32>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 8003b1e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
 8003b26:	7f7b      	ldrb	r3, [r7, #29]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d002      	beq.n	8003b32 <CO_SDOserver_init+0x13a>
 8003b2c:	7f7b      	ldrb	r3, [r7, #29]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 8003b32:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
 8003b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) { *errInfo = OD_SDOsrvParIdx; }
 8003b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <CO_SDOserver_init+0x156>
 8003b48:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b4c:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8003b4e:	f06f 030b 	mvn.w	r3, #11
 8003b52:	e05d      	b.n	8003c10 <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db05      	blt.n	8003b66 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8003b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	e000      	b.n	8003b68 <CO_SDOserver_init+0x170>
 8003b66:	2300      	movs	r3, #0
 8003b68:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db05      	blt.n	8003b7c <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8003b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	e000      	b.n	8003b7e <CO_SDOserver_init+0x186>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	84bb      	strh	r3, [r7, #36]	@ 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a23      	ldr	r2, [pc, #140]	@ (8003c18 <CO_SDOserver_init+0x220>)
 8003b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a23      	ldr	r2, [pc, #140]	@ (8003c1c <CO_SDOserver_init+0x224>)
 8003b90:	661a      	str	r2, [r3, #96]	@ 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3358      	adds	r3, #88	@ 0x58
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fd31 	bl	8003600 <OD_extension_init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 8003ba2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) { *errInfo = OD_SDOsrvParIdx; }
 8003baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <CO_SDOserver_init+0x1be>
 8003bb0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb4:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8003bb6:	f06f 030b 	mvn.w	r3, #11
 8003bba:	e029      	b.n	8003c10 <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bc0:	e026      	b.n	8003c10 <CO_SDOserver_init+0x218>
        ) {
 8003bc2:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bce:	649a      	str	r2, [r3, #72]	@ 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003bd4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003bde:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = 0;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bf2:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8003bf4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003bf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bf8:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8003bfc:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8003bfe:	9201      	str	r2, [sp, #4]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	4603      	mov	r3, r0
 8003c04:	460a      	mov	r2, r1
 8003c06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fd77 	bl	80036fc <CO_SDOserver_init_canRxTx>
 8003c0e:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3728      	adds	r7, #40	@ 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	080018b5 	.word	0x080018b5
 8003c1c:	080037d5 	.word	0x080037d5

08003c20 <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b08b      	sub	sp, #44	@ 0x2c
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	460b      	mov	r3, r1
 8003c30:	71fb      	strb	r3, [r7, #7]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (SDO->finished) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07b      	beq.n	8003d3e <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d015      	beq.n	8003c7a <validateAndWriteToOD+0x5a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d00f      	beq.n	8003c7a <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d901      	bls.n	8003c6a <validateAndWriteToOD+0x4a>
 8003c66:	4a70      	ldr	r2, [pc, #448]	@ (8003e28 <validateAndWriteToOD+0x208>)
 8003c68:	e000      	b.n	8003c6c <validateAndWriteToOD+0x4c>
 8003c6a:	4a70      	ldr	r2, [pc, #448]	@ (8003e2c <validateAndWriteToOD+0x20c>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	751a      	strb	r2, [r3, #20]
            return false;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e0d2      	b.n	8003e20 <validateAndWriteToOD+0x200>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da3c      	bge.n	8003d06 <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <validateAndWriteToOD+0x7c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c96:	6a3a      	ldr	r2, [r7, #32]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d934      	bls.n	8003d06 <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d82e      	bhi.n	8003d06 <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            SDO->sizeTran++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <validateAndWriteToOD+0xba>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d910      	bls.n	8003cfc <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                SDO->sizeTran++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	66da      	str	r2, [r3, #108]	@ 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	621a      	str	r2, [r3, #32]
 8003d04:	e02d      	b.n	8003d62 <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	621a      	str	r2, [r3, #32]
 8003d14:	e025      	b.n	8003d62 <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d1a:	6a3a      	ldr	r2, [r7, #32]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d020      	beq.n	8003d62 <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d201      	bcs.n	8003d2e <validateAndWriteToOD+0x10e>
 8003d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e28 <validateAndWriteToOD+0x208>)
 8003d2c:	e000      	b.n	8003d30 <validateAndWriteToOD+0x110>
 8003d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e2c <validateAndWriteToOD+0x20c>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	751a      	strb	r2, [r3, #20]
            return false;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e070      	b.n	8003e20 <validateAndWriteToOD+0x200>
        }
        else { /* MISRA C 2004 14.10 */ }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <validateAndWriteToOD+0x142>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d907      	bls.n	8003d62 <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a34      	ldr	r2, [pc, #208]	@ (8003e28 <validateAndWriteToOD+0x208>)
 8003d56:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	751a      	strb	r2, [r3, #20]
            return false;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e05e      	b.n	8003e20 <validateAndWriteToOD+0x200>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6a:	f3ef 8210 	mrs	r2, PRIMASK
 8003d6e:	617a      	str	r2, [r7, #20]
  return(result);
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003d74:	b672      	cpsid	i
}
 8003d76:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f103 0018 	add.w	r0, r3, #24
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003d8e:	f107 0310 	add.w	r3, r7, #16
 8003d92:	47a0      	blx	r4
 8003d94:	4603      	mov	r3, r0
 8003d96:	77fb      	strb	r3, [r7, #31]
                                   SDO->bufOffsetWr, &countWritten);
    CO_UNLOCK_OD(SDO->CANdevTx);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f383 8810 	msr	PRIMASK, r3
}
 8003da6:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003db0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d011      	beq.n	8003ddc <validateAndWriteToOD+0x1bc>
 8003db8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dc0:	d00c      	beq.n	8003ddc <validateAndWriteToOD+0x1bc>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003dc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd ff98 	bl	8001cfc <OD_getSDOabCode>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	751a      	strb	r2, [r3, #20]
        return false;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e021      	b.n	8003e20 <validateAndWriteToOD+0x200>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00c      	beq.n	8003dfe <validateAndWriteToOD+0x1de>
 8003de4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dec:	d107      	bne.n	8003dfe <validateAndWriteToOD+0x1de>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4a0e      	ldr	r2, [pc, #56]	@ (8003e2c <validateAndWriteToOD+0x20c>)
 8003df2:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	751a      	strb	r2, [r3, #20]
        return false;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e010      	b.n	8003e20 <validateAndWriteToOD+0x200>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <validateAndWriteToOD+0x1fe>
 8003e06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <validateAndWriteToOD+0x1fe>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4a05      	ldr	r2, [pc, #20]	@ (8003e28 <validateAndWriteToOD+0x208>)
 8003e12:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	751a      	strb	r2, [r3, #20]
        return false;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <validateAndWriteToOD+0x200>
    }
    else { /* MISRA C 2004 14.10 */ }

    return true;
 8003e1e:	2301      	movs	r3, #1
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	372c      	adds	r7, #44	@ 0x2c
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd90      	pop	{r4, r7, pc}
 8003e28:	06070012 	.word	0x06070012
 8003e2c:	06070013 	.word	0x06070013

08003e30 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b08d      	sub	sp, #52	@ 0x34
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (!SDO->finished && countRemain < countMinimum) {
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 80a5 	bne.w	8003fa2 <readFromOd+0x172>
 8003e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f080 80a0 	bcs.w	8003fa2 <readFromOd+0x172>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e74:	4413      	add	r3, r2
 8003e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f009 fc75 	bl	800d768 <memmove>
        SDO->bufOffsetRd = 0;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        SDO->bufOffsetWr = countRemain;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	f1c3 0320 	rsb	r3, r3, #32
 8003e94:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
        uint8_t *bufShifted = SDO->buf + countRemain;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	4413      	add	r3, r2
 8003ea4:	61fb      	str	r3, [r7, #28]

        CO_LOCK_OD(SDO->CANdevTx);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eaa:	f3ef 8210 	mrs	r2, PRIMASK
 8003eae:	617a      	str	r2, [r7, #20]
  return(result);
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003eb4:	b672      	cpsid	i
}
 8003eb6:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f103 0018 	add.w	r0, r3, #24
 8003ec2:	f107 0310 	add.w	r3, r7, #16
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	69f9      	ldr	r1, [r7, #28]
 8003eca:	47a0      	blx	r4
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                      countRdRequest, &countRd);
        CO_UNLOCK_OD(SDO->CANdevTx);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f383 8810 	msr	PRIMASK, r3
}
 8003ee0:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003ee2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d011      	beq.n	8003f0e <readFromOd+0xde>
 8003eea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ef2:	d00c      	beq.n	8003f0e <readFromOd+0xde>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003ef4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fd feff 	bl	8001cfc <OD_getSDOabCode>
 8003efe:	4602      	mov	r2, r0
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	751a      	strb	r2, [r3, #20]
            return false;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e04a      	b.n	8003fa4 <readFromOd+0x174>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d022      	beq.n	8003f5a <readFromOd+0x12a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f1a:	b25b      	sxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da1c      	bge.n	8003f5a <readFromOd+0x12a>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8003f2a:	69f8      	ldr	r0, [r7, #28]
 8003f2c:	f7fc f978 	bl	8000220 <strlen>
 8003f30:	62b8      	str	r0, [r7, #40]	@ 0x28
            if (countStr == 0) { countStr = 1; }/* zero length is not allowed */
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <readFromOd+0x10c>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (countStr < countRd) {
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d20a      	bcs.n	8003f5a <readFromOd+0x12a>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8003f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f46:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	441a      	add	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <readFromOd+0x14a>
 8003f70:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f78:	d110      	bne.n	8003f9c <readFromOd+0x16c>
            SDO->finished = false;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	675a      	str	r2, [r3, #116]	@ 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d90a      	bls.n	8003fa2 <readFromOd+0x172>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4a07      	ldr	r2, [pc, #28]	@ (8003fac <readFromOd+0x17c>)
 8003f90:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	751a      	strb	r2, [r3, #20]
                return false;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e003      	b.n	8003fa4 <readFromOd+0x174>
            }
        }
        else {
            SDO->finished = true;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	675a      	str	r2, [r3, #116]	@ 0x74
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8003fa2:	2301      	movs	r3, #1
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3734      	adds	r7, #52	@ 0x34
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd90      	pop	{r4, r7, pc}
 8003fac:	06040047 	.word	0x06040047

08003fb0 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b09b      	sub	sp, #108	@ 0x6c
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8003fc4:	f06f 0301 	mvn.w	r3, #1
 8003fc8:	f000 bcee 	b.w	80049a8 <CO_SDOserver_process+0x9f8>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	657b      	str	r3, [r7, #84]	@ 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <CO_SDOserver_process+0x56>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	7d1b      	ldrb	r3, [r3, #20]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d106      	bne.n	8004006 <CO_SDOserver_process+0x56>
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004004:	e2c5      	b.n	8004592 <CO_SDOserver_process+0x5e2>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <CO_SDOserver_process+0x64>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	63da      	str	r2, [r3, #60]	@ 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004026:	e2b4      	b.n	8004592 <CO_SDOserver_process+0x5e2>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8004028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 82b1 	beq.w	8004592 <CO_SDOserver_process+0x5e2>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	7d1b      	ldrb	r3, [r3, #20]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 80ce 	bne.w	80041d8 <CO_SDOserver_process+0x228>
            bool_t upload = false;
 800403c:	2300      	movs	r3, #0
 800403e:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004046:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800404a:	2b20      	cmp	r3, #32
 800404c:	d103      	bne.n	8004056 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2211      	movs	r2, #17
 8004052:	751a      	strb	r2, [r3, #20]
 8004054:	e00f      	b.n	8004076 <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800405c:	2b40      	cmp	r3, #64	@ 0x40
 800405e:	d105      	bne.n	800406c <CO_SDOserver_process+0xbc>
                upload = true;
 8004060:	2301      	movs	r3, #1
 8004062:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2221      	movs	r2, #33	@ 0x21
 8004068:	751a      	strb	r2, [r3, #20]
 800406a:	e004      	b.n	8004076 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 800406c:	4ba5      	ldr	r3, [pc, #660]	@ (8004304 <CO_SDOserver_process+0x354>)
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d162      	bne.n	8004142 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004082:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 8004084:	b21a      	sxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408c:	b21b      	sxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b21b      	sxth	r3, r3
 8004092:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	871a      	strh	r2, [r3, #56]	@ 0x38
                SDO->subIndex = SDO->CANrxData[3];
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7fd fcd2 	bl	8001a58 <OD_find>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f103 0218 	add.w	r2, r3, #24
 80040c0:	2300      	movs	r3, #0
 80040c2:	f7fd fd25 	bl	8001b10 <OD_getSub>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 80040cc:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80040d4:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fd fe0f 	bl	8001cfc <OD_getSDOabCode>
 80040de:	4603      	mov	r3, r0
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	751a      	strb	r2, [r3, #20]
 80040e8:	e02b      	b.n	8004142 <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80040f8:	4b83      	ldr	r3, [pc, #524]	@ (8004308 <CO_SDOserver_process+0x358>)
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	751a      	strb	r2, [r3, #20]
 8004102:	e01e      	b.n	8004142 <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8004104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8004118:	4b7c      	ldr	r3, [pc, #496]	@ (800430c <CO_SDOserver_process+0x35c>)
 800411a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	751a      	strb	r2, [r3, #20]
 8004122:	e00e      	b.n	8004142 <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8004124:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8004138:	4b75      	ldr	r3, [pc, #468]	@ (8004310 <CO_SDOserver_process+0x360>)
 800413a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8004142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004144:	2b00      	cmp	r3, #0
 8004146:	d047      	beq.n	80041d8 <CO_SDOserver_process+0x228>
 8004148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d144      	bne.n	80041d8 <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->sizeTran = 0;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	66da      	str	r2, [r3, #108]	@ 0x6c
                SDO->finished = false;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	675a      	str	r2, [r3, #116]	@ 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 800416e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004172:	2300      	movs	r3, #0
 8004174:	2207      	movs	r2, #7
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff fe5a 	bl	8003e30 <readFromOd>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02a      	beq.n	80041d8 <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01a      	beq.n	80041c0 <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	669a      	str	r2, [r3, #104]	@ 0x68

                        if (SDO->sizeInd == 0) {
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004196:	2b00      	cmp	r3, #0
 8004198:	d105      	bne.n	80041a6 <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	669a      	str	r2, [r3, #104]	@ 0x68
 80041a4:	e018      	b.n	80041d8 <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d011      	beq.n	80041d8 <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80041b4:	4b57      	ldr	r3, [pc, #348]	@ (8004314 <CO_SDOserver_process+0x364>)
 80041b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	751a      	strb	r2, [r3, #20]
 80041be:	e00b      	b.n	80041d8 <CO_SDOserver_process+0x228>
                        }
                        else { /* MISRA C 2004 14.10 */ }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041c6:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	db02      	blt.n	80041d2 <CO_SDOserver_process+0x222>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	e000      	b.n	80041d4 <CO_SDOserver_process+0x224>
 80041d2:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	6693      	str	r3, [r2, #104]	@ 0x68
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) {
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	7d1b      	ldrb	r3, [r3, #20]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 81cf 	beq.w	8004582 <CO_SDOserver_process+0x5d2>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	7d1b      	ldrb	r3, [r3, #20]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f000 81c9 	beq.w	8004582 <CO_SDOserver_process+0x5d2>
        switch (SDO->state) {
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	7d1b      	ldrb	r3, [r3, #20]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	3b11      	subs	r3, #17
 80041f8:	2b12      	cmp	r3, #18
 80041fa:	f200 81b2 	bhi.w	8004562 <CO_SDOserver_process+0x5b2>
 80041fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <CO_SDOserver_process+0x254>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004251 	.word	0x08004251
 8004208:	08004563 	.word	0x08004563
 800420c:	0800441b 	.word	0x0800441b
 8004210:	08004563 	.word	0x08004563
 8004214:	08004563 	.word	0x08004563
 8004218:	08004563 	.word	0x08004563
 800421c:	08004563 	.word	0x08004563
 8004220:	08004563 	.word	0x08004563
 8004224:	08004563 	.word	0x08004563
 8004228:	08004563 	.word	0x08004563
 800422c:	08004563 	.word	0x08004563
 8004230:	08004563 	.word	0x08004563
 8004234:	08004563 	.word	0x08004563
 8004238:	08004563 	.word	0x08004563
 800423c:	08004563 	.word	0x08004563
 8004240:	08004563 	.word	0x08004563
 8004244:	08004511 	.word	0x08004511
 8004248:	08004563 	.word	0x08004563
 800424c:	08004519 	.word	0x08004519
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80a3 	beq.w	80043a6 <CO_SDOserver_process+0x3f6>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8004266:	2304      	movs	r3, #4
 8004268:	65fb      	str	r3, [r7, #92]	@ 0x5c
                if (SDO->CANrxData[0] & 0x01) {
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800428c:	e007      	b.n	800429e <CO_SDOserver_process+0x2ee>
                }
                else if (sizeInOd > 0 && sizeInOd < 4) {
 800428e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <CO_SDOserver_process+0x2ee>
 8004294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004296:	2b03      	cmp	r3, #3
 8004298:	d801      	bhi.n	800429e <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 800429a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800429c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
                else { /* MISRA C 2004 14.10 */ }

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 800429e:	2300      	movs	r3, #0
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a2:	2300      	movs	r3, #0
 80042a4:	853b      	strh	r3, [r7, #40]	@ 0x28
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 80042ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042b2:	4618      	mov	r0, r3
 80042b4:	f009 fafd 	bl	800d8b2 <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da17      	bge.n	80042f4 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 80042c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <CO_SDOserver_process+0x322>
 80042ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d210      	bcs.n	80042f4 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 80042d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	643b      	str	r3, [r7, #64]	@ 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 80042da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <CO_SDOserver_process+0x334>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <CO_SDOserver_process+0x336>
 80042e4:	2302      	movs	r3, #2
 80042e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042e8:	4413      	add	r3, r2
 80042ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042f0:	621a      	str	r2, [r3, #32]
                ) {
 80042f2:	e021      	b.n	8004338 <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 80042f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10e      	bne.n	8004318 <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042fe:	621a      	str	r2, [r3, #32]
 8004300:	e01a      	b.n	8004338 <CO_SDOserver_process+0x388>
 8004302:	bf00      	nop
 8004304:	05040001 	.word	0x05040001
 8004308:	06010000 	.word	0x06010000
 800430c:	06010001 	.word	0x06010001
 8004310:	06010002 	.word	0x06010002
 8004314:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8004318:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800431a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800431c:	429a      	cmp	r2, r3
 800431e:	d00b      	beq.n	8004338 <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004320:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004324:	429a      	cmp	r2, r3
 8004326:	d901      	bls.n	800432c <CO_SDOserver_process+0x37c>
 8004328:	4b91      	ldr	r3, [pc, #580]	@ (8004570 <CO_SDOserver_process+0x5c0>)
 800432a:	e000      	b.n	800432e <CO_SDOserver_process+0x37e>
 800432c:	4b91      	ldr	r3, [pc, #580]	@ (8004574 <CO_SDOserver_process+0x5c4>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 800432e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	751a      	strb	r2, [r3, #20]
                    break;
 8004336:	e124      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                }
                else { /* MISRA C 2004 14.10 */ }

                /* Copy data */
                OD_size_t countWritten = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	623b      	str	r3, [r7, #32]

                CO_LOCK_OD(SDO->CANdevTx);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004340:	f3ef 8210 	mrs	r2, PRIMASK
 8004344:	633a      	str	r2, [r7, #48]	@ 0x30
  return(result);
 8004346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800434a:	b672      	cpsid	i
}
 800434c:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f103 0018 	add.w	r0, r3, #24
 8004358:	f107 0320 	add.w	r3, r7, #32
 800435c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004360:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004362:	47a0      	blx	r4
 8004364:	4603      	mov	r3, r0
 8004366:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                                               dataSizeToWrite, &countWritten);
                CO_UNLOCK_OD(SDO->CANdevTx);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004370:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004374:	f383 8810 	msr	PRIMASK, r3
}
 8004378:	bf00      	nop

                if (odRet != ODR_OK) {
 800437a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <CO_SDOserver_process+0x3e8>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004382:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fcb8 	bl	8001cfc <OD_getSDOabCode>
 800438c:	4603      	mov	r3, r0
 800438e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	751a      	strb	r2, [r3, #20]
                    break;
 8004396:	e0f4      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2212      	movs	r2, #18
 800439c:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	675a      	str	r2, [r3, #116]	@ 0x74
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 80043a4:	e0ed      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                if (SDO->CANrxData[0] & 0x01) {
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d028      	beq.n	8004406 <CO_SDOserver_process+0x456>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	64bb      	str	r3, [r7, #72]	@ 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3344      	adds	r3, #68	@ 0x44
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	61fb      	str	r3, [r7, #28]
                    SDO->sizeInd = CO_SWAP_32(size);
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	669a      	str	r2, [r3, #104]	@ 0x68
                    if (sizeInOd > 0) {
 80043c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01e      	beq.n	800440c <CO_SDOserver_process+0x45c>
                        if (SDO->sizeInd > sizeInOd) {
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d205      	bcs.n	80043e4 <CO_SDOserver_process+0x434>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80043d8:	4b65      	ldr	r3, [pc, #404]	@ (8004570 <CO_SDOserver_process+0x5c0>)
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	751a      	strb	r2, [r3, #20]
                            break;
 80043e2:	e0ce      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                        else if (SDO->sizeInd < sizeInOd
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d90e      	bls.n	800440c <CO_SDOserver_process+0x45c>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	db08      	blt.n	800440c <CO_SDOserver_process+0x45c>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 80043fa:	4b5e      	ldr	r3, [pc, #376]	@ (8004574 <CO_SDOserver_process+0x5c4>)
 80043fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	751a      	strb	r2, [r3, #20]
                            break;
 8004404:	e0bd      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                    SDO->sizeInd = 0;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	669a      	str	r2, [r3, #104]	@ 0x68
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2212      	movs	r2, #18
 8004410:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	675a      	str	r2, [r3, #116]	@ 0x74
            break;
 8004418:	e0b3      	b.n	8004582 <CO_SDOserver_process+0x5d2>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004420:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d16d      	bne.n	8004504 <CO_SDOserver_process+0x554>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	675a      	str	r2, [r3, #116]	@ 0x74

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (toggle != SDO->toggle) {
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004456:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800445a:	429a      	cmp	r2, r3
 800445c:	d005      	beq.n	800446a <CO_SDOserver_process+0x4ba>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 800445e:	4b46      	ldr	r3, [pc, #280]	@ (8004578 <CO_SDOserver_process+0x5c8>)
 8004460:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	751a      	strb	r2, [r3, #20]
                    break;
 8004468:	e08b      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004488:	18d0      	adds	r0, r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3341      	adds	r3, #65	@ 0x41
 800448e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004490:	4619      	mov	r1, r3
 8004492:	f009 fa0e 	bl	800d8b2 <memcpy>
                SDO->bufOffsetWr += count;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800449c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449e:	441a      	add	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran += count;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80044aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ac:	441a      	add	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <CO_SDOserver_process+0x522>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d905      	bls.n	80044d2 <CO_SDOserver_process+0x522>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 80044c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004570 <CO_SDOserver_process+0x5c0>)
 80044c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	751a      	strb	r2, [r3, #20]
                    break;
 80044d0:	e057      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <CO_SDOserver_process+0x538>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044e0:	f1c3 0320 	rsb	r3, r3, #32
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d809      	bhi.n	80044fc <CO_SDOserver_process+0x54c>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 80044e8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80044ec:	2300      	movs	r3, #0
 80044ee:	2200      	movs	r2, #0
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff fb95 	bl	8003c20 <validateAndWriteToOD>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d041      	beq.n	8004580 <CO_SDOserver_process+0x5d0>
                        break;
                    }
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2214      	movs	r2, #20
 8004500:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004502:	e03e      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                abortCode = CO_SDO_AB_CMD;
 8004504:	4b1d      	ldr	r3, [pc, #116]	@ (800457c <CO_SDOserver_process+0x5cc>)
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	751a      	strb	r2, [r3, #20]
            break;
 800450e:	e038      	b.n	8004582 <CO_SDOserver_process+0x5d2>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2222      	movs	r2, #34	@ 0x22
 8004514:	751a      	strb	r2, [r3, #20]
            break;
 8004516:	e034      	b.n	8004582 <CO_SDOserver_process+0x5d2>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800451e:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8004522:	2b60      	cmp	r3, #96	@ 0x60
 8004524:	d117      	bne.n	8004556 <CO_SDOserver_process+0x5a6>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
                if (toggle != SDO->toggle) {
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800453a:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800453e:	429a      	cmp	r2, r3
 8004540:	d005      	beq.n	800454e <CO_SDOserver_process+0x59e>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <CO_SDOserver_process+0x5c8>)
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	751a      	strb	r2, [r3, #20]
                    break;
 800454c:	e019      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2224      	movs	r2, #36	@ 0x24
 8004552:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004554:	e015      	b.n	8004582 <CO_SDOserver_process+0x5d2>
                abortCode = CO_SDO_AB_CMD;
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <CO_SDOserver_process+0x5cc>)
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	751a      	strb	r2, [r3, #20]
            break;
 8004560:	e00f      	b.n	8004582 <CO_SDOserver_process+0x5d2>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <CO_SDOserver_process+0x5cc>)
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	751a      	strb	r2, [r3, #20]
            break;
 800456c:	e009      	b.n	8004582 <CO_SDOserver_process+0x5d2>
 800456e:	bf00      	nop
 8004570:	06070012 	.word	0x06070012
 8004574:	06070013 	.word	0x06070013
 8004578:	05030000 	.word	0x05030000
 800457c:	05040001 	.word	0x05040001
                        break;
 8004580:	bf00      	nop
        }
        } /* switch (SDO->state) */
        } /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        timeDifference_us = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	63da      	str	r2, [r3, #60]	@ 0x3c
    } /* else if (isNew) */
    else { /* MISRA C 2004 14.10 */ }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 8004592:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004596:	2b01      	cmp	r3, #1
 8004598:	d11e      	bne.n	80045d8 <CO_SDOserver_process+0x628>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d205      	bcs.n	80045b2 <CO_SDOserver_process+0x602>
            SDO->timeoutTimer += timeDifference_us;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	441a      	add	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d304      	bcc.n	80045c8 <CO_SDOserver_process+0x618>
            abortCode = CO_SDO_AB_TIMEOUT;
 80045be:	4b9c      	ldr	r3, [pc, #624]	@ (8004830 <CO_SDOserver_process+0x880>)
 80045c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <CO_SDOserver_process+0x628>
            ret = CO_SDO_RT_transmittBufferFull;
 80045d2:	2304      	movs	r3, #4
 80045d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80045d8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80045dc:	2b01      	cmp	r3, #1
 80045de:	f040 81ab 	bne.w	8004938 <CO_SDOserver_process+0x988>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	3305      	adds	r3, #5
 80045e8:	2208      	movs	r2, #8
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f009 f8d5 	bl	800d79c <memset>

        switch (SDO->state) {
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	7d1b      	ldrb	r3, [r3, #20]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	3b12      	subs	r3, #18
 80045fa:	2b12      	cmp	r3, #18
 80045fc:	f200 8199 	bhi.w	8004932 <CO_SDOserver_process+0x982>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <CO_SDOserver_process+0x658>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004655 	.word	0x08004655
 800460c:	08004933 	.word	0x08004933
 8004610:	080046d7 	.word	0x080046d7
 8004614:	08004933 	.word	0x08004933
 8004618:	08004933 	.word	0x08004933
 800461c:	08004933 	.word	0x08004933
 8004620:	08004933 	.word	0x08004933
 8004624:	08004933 	.word	0x08004933
 8004628:	08004933 	.word	0x08004933
 800462c:	08004933 	.word	0x08004933
 8004630:	08004933 	.word	0x08004933
 8004634:	08004933 	.word	0x08004933
 8004638:	08004933 	.word	0x08004933
 800463c:	08004933 	.word	0x08004933
 8004640:	08004933 	.word	0x08004933
 8004644:	08004933 	.word	0x08004933
 8004648:	08004733 	.word	0x08004733
 800464c:	08004933 	.word	0x08004933
 8004650:	08004801 	.word	0x08004801
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2260      	movs	r2, #96	@ 0x60
 800465a:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004682:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f002 ff15 	bl	80074c4 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d006      	beq.n	80046b0 <CO_SDOserver_process+0x700>
                SDO->state = CO_SDO_ST_IDLE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 80046ae:	e143      	b.n	8004938 <CO_SDOserver_process+0x988>
                SDO->toggle = 0x00;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                SDO->sizeTran = 0;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	66da      	str	r2, [r3, #108]	@ 0x6c
                SDO->bufOffsetWr = 0;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->bufOffsetRd = 0;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2213      	movs	r2, #19
 80046d2:	751a      	strb	r2, [r3, #20]
            break;
 80046d4:	e130      	b.n	8004938 <CO_SDOserver_process+0x988>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 2070 	ldrb.w	r2, [r3, #112]	@ 0x70
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f042 0220 	orr.w	r2, r2, #32
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <CO_SDOserver_process+0x746>
 80046f2:	2210      	movs	r2, #16
 80046f4:	e000      	b.n	80046f8 <CO_SDOserver_process+0x748>
 80046f6:	2200      	movs	r2, #0
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	67da      	str	r2, [r3, #124]	@ 0x7c
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f002 fed8 	bl	80074c4 <CO_CANsend>
            if (SDO->finished) {
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004718:	2b00      	cmp	r3, #0
 800471a:	d006      	beq.n	800472a <CO_SDOserver_process+0x77a>
                SDO->state = CO_SDO_ST_IDLE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004722:	2300      	movs	r3, #0
 8004724:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8004728:	e106      	b.n	8004938 <CO_SDOserver_process+0x988>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2213      	movs	r2, #19
 800472e:	751a      	strb	r2, [r3, #20]
            break;
 8004730:	e102      	b.n	8004938 <CO_SDOserver_process+0x988>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004736:	2b00      	cmp	r3, #0
 8004738:	d024      	beq.n	8004784 <CO_SDOserver_process+0x7d4>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800473e:	2b04      	cmp	r3, #4
 8004740:	d820      	bhi.n	8004784 <CO_SDOserver_process+0x7d4>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f1c3 0304 	rsb	r3, r3, #4
 800474c:	b2db      	uxtb	r3, r3
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f103 0009 	add.w	r0, r3, #9
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004770:	461a      	mov	r2, r3
 8004772:	f009 f89e 	bl	800d8b2 <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004782:	e020      	b.n	80047c6 <CO_SDOserver_process+0x816>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <CO_SDOserver_process+0x7fa>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004790:	63bb      	str	r3, [r7, #56]	@ 0x38
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	61bb      	str	r3, [r7, #24]
                    SDO->CANtxBuff->data[0] = 0x41;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2241      	movs	r2, #65	@ 0x41
 800479c:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	3309      	adds	r3, #9
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e003      	b.n	80047b2 <CO_SDOserver_process+0x802>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2240      	movs	r2, #64	@ 0x40
 80047b0:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                SDO->timeoutTimer = 0;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	67da      	str	r2, [r3, #124]	@ 0x7c
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2223      	movs	r2, #35	@ 0x23
 80047c4:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 80047ec:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4619      	mov	r1, r3
 80047f8:	4610      	mov	r0, r2
 80047fa:	f002 fe63 	bl	80074c4 <CO_CANsend>
            break;
 80047fe:	e09b      	b.n	8004938 <CO_SDOserver_process+0x988>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false)) {
 8004800:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004804:	2300      	movs	r3, #0
 8004806:	2207      	movs	r2, #7
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7ff fb11 	bl	8003e30 <readFromOd>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8090 	beq.w	8004936 <CO_SDOserver_process+0x986>
                break;
            }

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	f892 2070 	ldrb.w	r2, [r2, #112]	@ 0x70
 8004820:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <CO_SDOserver_process+0x884>
 800482c:	2210      	movs	r2, #16
 800482e:	e002      	b.n	8004836 <CO_SDOserver_process+0x886>
 8004830:	05040000 	.word	0x05040000
 8004834:	2200      	movs	r2, #0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	65bb      	str	r3, [r7, #88]	@ 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 800484c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800484e:	2b06      	cmp	r3, #6
 8004850:	d906      	bls.n	8004860 <CO_SDOserver_process+0x8b0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01b      	beq.n	8004892 <CO_SDOserver_process+0x8e2>
 800485a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800485c:	2b07      	cmp	r3, #7
 800485e:	d118      	bne.n	8004892 <CO_SDOserver_process+0x8e2>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	795a      	ldrb	r2, [r3, #5]
 8004866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f1c3 0307 	rsb	r3, r3, #7
 800486e:	b2db      	uxtb	r3, r3
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	b2db      	uxtb	r3, r3
 8004874:	4313      	orrs	r3, r2
 8004876:	b2da      	uxtb	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004890:	e007      	b.n	80048a2 <CO_SDOserver_process+0x8f2>
            }
            else {
                SDO->timeoutTimer = 0;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	67da      	str	r2, [r3, #124]	@ 0x7c
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2223      	movs	r2, #35	@ 0x23
 800489c:	751a      	strb	r2, [r3, #20]
                count = 7;
 800489e:	2307      	movs	r3, #7
 80048a0:	65bb      	str	r3, [r7, #88]	@ 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	1d98      	adds	r0, r3, #6
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048b4:	4413      	add	r3, r2
 80048b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048b8:	4619      	mov	r1, r3
 80048ba:	f008 fffa 	bl	800d8b2 <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80048c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048c6:	441a      	add	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
            SDO->sizeTran += count;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80048d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01e      	beq.n	8004920 <CO_SDOserver_process+0x970>
                if (SDO->sizeTran > SDO->sizeInd) {
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d905      	bls.n	80048fa <CO_SDOserver_process+0x94a>
                    abortCode = CO_SDO_AB_DATA_LONG;
 80048ee:	4b30      	ldr	r3, [pc, #192]	@ (80049b0 <CO_SDOserver_process+0xa00>)
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	751a      	strb	r2, [r3, #20]
                    break;
 80048f8:	e01e      	b.n	8004938 <CO_SDOserver_process+0x988>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 80048fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10e      	bne.n	8004920 <CO_SDOserver_process+0x970>
                         && SDO->sizeTran < SDO->sizeInd
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800490a:	429a      	cmp	r2, r3
 800490c:	d208      	bcs.n	8004920 <CO_SDOserver_process+0x970>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 800490e:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <CO_SDOserver_process+0xa04>)
 8004910:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    ret = CO_SDO_RT_waitingResponse;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	751a      	strb	r2, [r3, #20]
                    break;
 800491e:	e00b      	b.n	8004938 <CO_SDOserver_process+0x988>
                }
                else { /* MISRA C 2004 14.10 */ }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f002 fdca 	bl	80074c4 <CO_CANsend>
            break;
 8004930:	e002      	b.n	8004938 <CO_SDOserver_process+0x988>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <CO_SDOserver_process+0x988>
                break;
 8004936:	bf00      	nop
        }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004938:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800493c:	2b01      	cmp	r3, #1
 800493e:	d131      	bne.n	80049a4 <CO_SDOserver_process+0x9f4>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	7d1b      	ldrb	r3, [r3, #20]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d12c      	bne.n	80049a4 <CO_SDOserver_process+0x9f4>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2280      	movs	r2, #128	@ 0x80
 8004954:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800497c:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	3309      	adds	r3, #9
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f002 fd96 	bl	80074c4 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 800499e:	23f6      	movs	r3, #246	@ 0xf6
 80049a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 80049a4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	376c      	adds	r7, #108	@ 0x6c
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd90      	pop	{r4, r7, pc}
 80049b0:	06070012 	.word	0x06070012
 80049b4:	06070013 	.word	0x06070013

080049b8 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	73fb      	strb	r3, [r7, #15]
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <OD_getIndex+0x14>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	e000      	b.n	8004a06 <OD_getIndex+0x16>
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <OD_extension_init>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <OD_extension_init+0x14>
 8004a22:	2305      	movs	r3, #5
 8004a24:	e003      	b.n	8004a2e <OD_extension_init+0x1c>
    entry->extension = extension;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <OD_get_u8>:
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b086      	sub	sp, #24
 8004a3e:	af02      	add	r7, sp, #8
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	460b      	mov	r3, r1
 8004a48:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004a4a:	7af9      	ldrb	r1, [r7, #11]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2301      	movs	r3, #1
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7fd f96f 	bl	8001d38 <OD_get_value>
 8004a5a:	4603      	mov	r3, r0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <OD_get_u32>:
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	460b      	mov	r3, r1
 8004a72:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004a74:	7af9      	ldrb	r1, [r7, #11]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7fd f95a 	bl	8001d38 <OD_get_value>
 8004a84:	4603      	mov	r3, r0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) { SYNC->counter = 1; }
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	7c9b      	ldrb	r3, [r3, #18]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	749a      	strb	r2, [r3, #18]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	7c9a      	ldrb	r2, [r3, #18]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	7c5b      	ldrb	r3, [r3, #17]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d902      	bls.n	8004ab4 <CO_SYNCsend+0x26>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	7c92      	ldrb	r2, [r2, #18]
 8004ad6:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f002 fcee 	bl	80074c4 <CO_CANsend>
 8004ae8:	4603      	mov	r3, r0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	791b      	ldrb	r3, [r3, #4]
 8004b04:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	7c5b      	ldrb	r3, [r3, #17]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10c      	bne.n	8004b2c <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e019      	b.n	8004b52 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	721a      	strb	r2, [r3, #8]
 8004b2a:	e012      	b.n	8004b52 <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d109      	bne.n	8004b46 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	3305      	adds	r3, #5
 8004b36:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	781a      	ldrb	r2, [r3, #0]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004b40:	2301      	movs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e005      	b.n	8004b52 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00c      	beq.n	8004b72 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b08f      	sub	sp, #60	@ 0x3c
 8004b84:	af04      	add	r7, sp, #16
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00c      	beq.n	8004bae <OD_write_1005+0x2e>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	7d1b      	ldrb	r3, [r3, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d108      	bne.n	8004bae <OD_write_1005+0x2e>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d102      	bne.n	8004bae <OD_write_1005+0x2e>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004bae:	2309      	movs	r3, #9
 8004bb0:	e0a3      	b.n	8004cfa <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	f7ff ff0b 	bl	80049d4 <CO_getUint32>
 8004bbe:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bc8:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	4b49      	ldr	r3, [pc, #292]	@ (8004d04 <OD_write_1005+0x184>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d133      	bne.n	8004c4e <OD_write_1005+0xce>
 8004be6:	8bfb      	ldrh	r3, [r7, #30]
 8004be8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bea:	d930      	bls.n	8004c4e <OD_write_1005+0xce>
 8004bec:	8bfb      	ldrh	r3, [r7, #30]
 8004bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf2:	d903      	bls.n	8004bfc <OD_write_1005+0x7c>
 8004bf4:	8bfb      	ldrh	r3, [r7, #30]
 8004bf6:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004bfa:	d928      	bls.n	8004c4e <OD_write_1005+0xce>
 8004bfc:	8bfb      	ldrh	r3, [r7, #30]
 8004bfe:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8004c02:	d903      	bls.n	8004c0c <OD_write_1005+0x8c>
 8004c04:	8bfb      	ldrh	r3, [r7, #30]
 8004c06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c0a:	d320      	bcc.n	8004c4e <OD_write_1005+0xce>
 8004c0c:	8bfb      	ldrh	r3, [r7, #30]
 8004c0e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c12:	d903      	bls.n	8004c1c <OD_write_1005+0x9c>
 8004c14:	8bfb      	ldrh	r3, [r7, #30]
 8004c16:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004c1a:	d318      	bcc.n	8004c4e <OD_write_1005+0xce>
 8004c1c:	8bfb      	ldrh	r3, [r7, #30]
 8004c1e:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8004c22:	d303      	bcc.n	8004c2c <OD_write_1005+0xac>
 8004c24:	8bfb      	ldrh	r3, [r7, #30]
 8004c26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c2a:	d310      	bcc.n	8004c4e <OD_write_1005+0xce>
 8004c2c:	8bfb      	ldrh	r3, [r7, #30]
 8004c2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c32:	d80c      	bhi.n	8004c4e <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <OD_write_1005+0xd2>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <OD_write_1005+0xd2>
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c48:	8bfa      	ldrh	r2, [r7, #30]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8004c4e:	230f      	movs	r3, #15
 8004c50:	e053      	b.n	8004cfa <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c58:	8bfa      	ldrh	r2, [r7, #30]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d03a      	beq.n	8004cd4 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 8004c66:	8bfa      	ldrh	r2, [r7, #30]
 8004c68:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <OD_write_1005+0x188>)
 8004c6a:	9302      	str	r3, [sp, #8]
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	2300      	movs	r3, #0
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004c78:	f002 fb08 	bl	800728c <CO_CANrxBufferInit>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8004c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004c88:	2309      	movs	r3, #9
 8004c8a:	e036      	b.n	8004cfa <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf14      	ite	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	2300      	moveq	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461c      	mov	r4, r3
 8004ca6:	8bfa      	ldrh	r2, [r7, #30]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	9400      	str	r4, [sp, #0]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f002 fb4a 	bl	8007348 <CO_CANtxBufferInit>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	629a      	str	r2, [r3, #40]	@ 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d104      	bne.n	8004ccc <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 8004cc8:	2309      	movs	r3, #9
 8004cca:	e016      	b.n	8004cfa <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cce:	8bfa      	ldrh	r2, [r7, #30]
 8004cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	2200      	movs	r2, #0
 8004cea:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7fc fe36 	bl	8001964 <OD_writeOriginal>
 8004cf8:	4603      	mov	r3, r0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	372c      	adds	r7, #44	@ 0x2c
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	bffff800 	.word	0xbffff800
 8004d08:	08004af3 	.word	0x08004af3

08004d0c <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b089      	sub	sp, #36	@ 0x24
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <OD_write_1019+0x2e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	7d1b      	ldrb	r3, [r3, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <OD_write_1019+0x2e>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d102      	bne.n	8004d3a <OD_write_1019+0x2e>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004d3a:	2309      	movs	r3, #9
 8004d3c:	e041      	b.n	8004dc2 <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8004d44:	68b8      	ldr	r0, [r7, #8]
 8004d46:	f7ff fe37 	bl	80049b8 <CO_getUint8>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d002      	beq.n	8004d5a <OD_write_1019+0x4e>
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2bf0      	cmp	r3, #240	@ 0xf0
 8004d58:	d901      	bls.n	8004d5e <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8004d5a:	230f      	movs	r3, #15
 8004d5c:	e031      	b.n	8004dc2 <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8004d68:	2317      	movs	r3, #23
 8004d6a:	e02a      	b.n	8004dc2 <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bf14      	ite	ne
 8004d82:	2301      	movne	r3, #1
 8004d84:	2300      	moveq	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461c      	mov	r4, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	9400      	str	r4, [sp, #0]
 8004d90:	2300      	movs	r3, #0
 8004d92:	f002 fad9 	bl	8007348 <CO_CANtxBufferInit>
 8004d96:	4602      	mov	r2, r0
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2200      	movs	r2, #0
 8004da8:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 8004daa:	2309      	movs	r3, #9
 8004dac:	e009      	b.n	8004dc2 <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	7cfa      	ldrb	r2, [r7, #19]
 8004db2:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7fc fdd2 	bl	8001964 <OD_writeOriginal>
 8004dc0:	4603      	mov	r3, r0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd90      	pop	{r4, r7, pc}
	...

08004dcc <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	@ 0x30
 8004dd0:	af04      	add	r7, sp, #16
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00e      	beq.n	8004dfe <CO_SYNC_init+0x32>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <CO_SYNC_init+0x32>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <CO_SYNC_init+0x32>
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004dfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e02:	e0fe      	b.n	8005002 <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004e04:	2260      	movs	r2, #96	@ 0x60
 8004e06:	2100      	movs	r1, #0
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f008 fcc7 	bl	800d79c <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004e0e:	2380      	movs	r3, #128	@ 0x80
 8004e10:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004e12:	f107 0218 	add.w	r2, r7, #24
 8004e16:	2301      	movs	r3, #1
 8004e18:	2100      	movs	r1, #0
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fe22 	bl	8004a64 <OD_get_u32>
 8004e20:	4603      	mov	r3, r0
 8004e22:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004e24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00c      	beq.n	8004e46 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1005_cobIdSync); }
 8004e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <CO_SYNC_init+0x74>
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fddc 	bl	80049f0 <OD_getIndex>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e3e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004e40:	f06f 030b 	mvn.w	r3, #11
 8004e44:	e0dd      	b.n	8005002 <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	635a      	str	r2, [r3, #52]	@ 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800500c <CO_SYNC_init+0x240>)
 8004e50:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a6e      	ldr	r2, [pc, #440]	@ (8005010 <CO_SYNC_init+0x244>)
 8004e56:	63da      	str	r2, [r3, #60]	@ 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3334      	adds	r3, #52	@ 0x34
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fdd7 	bl	8004a12 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8004e64:	2300      	movs	r3, #0
 8004e66:	2204      	movs	r2, #4
 8004e68:	2100      	movs	r1, #0
 8004e6a:	6838      	ldr	r0, [r7, #0]
 8004e6c:	f7fc ffcb 	bl	8001e06 <OD_getPtr>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10c      	bne.n	8004e98 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) { 
 8004e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d006      	beq.n	8004e92 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8004e84:	6838      	ldr	r0, [r7, #0]
 8004e86:	f7ff fdb3 	bl	80049f0 <OD_getIndex>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e90:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004e92:	f06f 030b 	mvn.w	r3, #11
 8004e96:	e0b4      	b.n	8005002 <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea0:	f7fc ffb1 	bl	8001e06 <OD_getPtr>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d010      	beq.n	8004ed2 <CO_SYNC_init+0x106>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10c      	bne.n	8004ed2 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d006      	beq.n	8004ecc <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ec0:	f7ff fd96 	bl	80049f0 <OD_getIndex>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eca:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004ecc:	f06f 030b 	mvn.w	r3, #11
 8004ed0:	e097      	b.n	8005002 <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d033      	beq.n	8004f44 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004edc:	f107 0217 	add.w	r2, r7, #23
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ee6:	f7ff fda8 	bl	8004a3a <OD_get_u8>
 8004eea:	4603      	mov	r3, r0
 8004eec:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8004eee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00c      	beq.n	8004f10 <CO_SYNC_init+0x144>
            if (errInfo != NULL) { 
 8004ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8004efc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004efe:	f7ff fd77 	bl	80049f0 <OD_getIndex>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f08:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8004f0a:	f06f 030b 	mvn.w	r3, #11
 8004f0e:	e078      	b.n	8005002 <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) { syncCounterOvf = 2; }
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d102      	bne.n	8004f1c <CO_SYNC_init+0x150>
 8004f16:	2302      	movs	r3, #2
 8004f18:	75fb      	strb	r3, [r7, #23]
 8004f1a:	e004      	b.n	8004f26 <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) { syncCounterOvf = 240; }
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2bf0      	cmp	r3, #240	@ 0xf0
 8004f20:	d901      	bls.n	8004f26 <CO_SYNC_init+0x15a>
 8004f22:	23f0      	movs	r3, #240	@ 0xf0
 8004f24:	75fb      	strb	r3, [r7, #23]
        else { /* MISRA C 2004 14.10 */ }

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a37      	ldr	r2, [pc, #220]	@ (800500c <CO_SYNC_init+0x240>)
 8004f30:	655a      	str	r2, [r3, #84]	@ 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a37      	ldr	r2, [pc, #220]	@ (8005014 <CO_SYNC_init+0x248>)
 8004f36:	659a      	str	r2, [r3, #88]	@ 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3350      	adds	r3, #80	@ 0x50
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f40:	f7ff fd67 	bl	8004a12 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8004f44:	7dfa      	ldrb	r2, [r7, #23]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    SYNC->CANdevRx = CANdevRx;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004f80:	861a      	strh	r2, [r3, #48]	@ 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f86:	649a      	str	r2, [r3, #72]	@ 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004f8c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005018 <CO_SYNC_init+0x24c>)
 8004f9e:	9302      	str	r3, [sp, #8]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fae:	f002 f96d 	bl	800728c <CO_CANrxBufferInit>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8004fb6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <CO_SYNC_init+0x1f8>
        return ret;
 8004fbe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004fc2:	e01e      	b.n	8005002 <CO_SYNC_init+0x236>
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	4618      	mov	r0, r3
 8004fdc:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	9000      	str	r0, [sp, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004fe8:	f002 f9ae 	bl	8007348 <CO_CANtxBufferInit>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	629a      	str	r2, [r3, #40]	@ 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ffe:	e000      	b.n	8005002 <CO_SYNC_init+0x236>
    }
#endif

    return CO_ERROR_NO;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	080018b5 	.word	0x080018b5
 8005010:	08004b81 	.word	0x08004b81
 8005014:	08004d0d 	.word	0x08004d0d
 8005018:	08004af3 	.word	0x08004af3

0800501c <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	@ 0x28
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 800502a:	2300      	movs	r3, #0
 800502c:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8088 	beq.w	8005146 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) { SYNC->timer = timerNew; }
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	429a      	cmp	r2, r3
 8005048:	d902      	bls.n	8005050 <CO_SYNC_process+0x34>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 800505e:	2301      	movs	r3, #1
 8005060:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <CO_SYNC_process+0x5c>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	e000      	b.n	800507a <CO_SYNC_process+0x5e>
 8005078:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 800507a:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d031      	beq.n	80050e6 <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d828      	bhi.n	80050e6 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8005094:	2301      	movs	r3, #1
 8005096:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff fcf8 	bl	8004a8e <CO_SYNCsend>
 800509e:	e022      	b.n	80050e6 <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	7c1b      	ldrb	r3, [r3, #16]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d11e      	bne.n	80050e6 <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) {
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d202      	bcs.n	80050c0 <CO_SYNC_process+0xa4>
                    periodTimeout = 0xFFFFFFFF;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050be:	61bb      	str	r3, [r7, #24]
                }

                if (SYNC->timer > periodTimeout) {
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d20d      	bcs.n	80050e6 <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80050d8:	2218      	movs	r2, #24
 80050da:	2101      	movs	r1, #1
 80050dc:	f7fb fdd8 	bl	8000c90 <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2202      	movs	r2, #2
 80050e4:	741a      	strb	r2, [r3, #16]
            }
            else { /* MISRA C 2004 14.10 */ }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d015      	beq.n	800511a <CO_SYNC_process+0xfe>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d909      	bls.n	800511a <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800510e:	2302      	movs	r3, #2
 8005110:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	615a      	str	r2, [r3, #20]
 8005118:	e002      	b.n	8005120 <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	7a1b      	ldrb	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01a      	beq.n	800515e <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	7a1b      	ldrb	r3, [r3, #8]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	f248 2340 	movw	r3, #33344	@ 0x8240
 8005136:	2219      	movs	r2, #25
 8005138:	2101      	movs	r1, #1
 800513a:	f7fb fda9 	bl	8000c90 <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	721a      	strb	r2, [r3, #8]
 8005144:	e00b      	b.n	800515e <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800515e:	7ffb      	ldrb	r3, [r7, #31]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d10f      	bne.n	8005184 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	7c1b      	ldrb	r3, [r3, #16]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d108      	bne.n	800517e <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	2300      	movs	r3, #0
 8005176:	2218      	movs	r2, #24
 8005178:	2100      	movs	r1, #0
 800517a:	f7fb fd89 	bl	8000c90 <CO_error>
        }
        SYNC->timeoutError = 1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8005184:	7ffb      	ldrb	r3, [r7, #31]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	81fb      	strh	r3, [r7, #14]
 800519e:	89fb      	ldrh	r3, [r7, #14]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <OD_getIndex+0x14>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	e000      	b.n	80051de <OD_getIndex+0x16>
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <OD_extension_init>:
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) { return ODR_IDX_NOT_EXIST; }
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <OD_extension_init+0x14>
 80051fa:	2305      	movs	r3, #5
 80051fc:	e003      	b.n	8005206 <OD_extension_init+0x1c>
    entry->extension = extension;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <OD_get_u32>:
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b086      	sub	sp, #24
 8005216:	af02      	add	r7, sp, #8
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	460b      	mov	r3, r1
 8005220:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005222:	7af9      	ldrb	r1, [r7, #11]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2304      	movs	r3, #4
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7fc fd83 	bl	8001d38 <OD_get_value>
 8005232:	4603      	mov	r3, r0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	791b      	ldrb	r3, [r3, #4]
 800524e:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	3305      	adds	r3, #5
 8005254:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005256:	7cfb      	ldrb	r3, [r7, #19]
 8005258:	2b06      	cmp	r3, #6
 800525a:	d108      	bne.n	800526e <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2206      	movs	r2, #6
 8005260:	68f9      	ldr	r1, [r7, #12]
 8005262:	4618      	mov	r0, r3
 8005264:	f008 fb25 	bl	800d8b2 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2201      	movs	r2, #1
 800526c:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 800526e:	bf00      	nop
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <OD_write_1012+0x2e>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	7d1b      	ldrb	r3, [r3, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d108      	bne.n	80052a6 <OD_write_1012+0x2e>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d102      	bne.n	80052a6 <OD_write_1012+0x2e>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80052a6:	2309      	movs	r3, #9
 80052a8:	e051      	b.n	800534e <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80052b0:	68b8      	ldr	r0, [r7, #8]
 80052b2:	f7ff ff7b 	bl	80051ac <CO_getUint32>
 80052b6:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052c0:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4b24      	ldr	r3, [pc, #144]	@ (8005358 <OD_write_1012+0xe0>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d126      	bne.n	800531a <OD_write_1012+0xa2>
 80052cc:	8afb      	ldrh	r3, [r7, #22]
 80052ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80052d0:	d923      	bls.n	800531a <OD_write_1012+0xa2>
 80052d2:	8afb      	ldrh	r3, [r7, #22]
 80052d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d8:	d903      	bls.n	80052e2 <OD_write_1012+0x6a>
 80052da:	8afb      	ldrh	r3, [r7, #22]
 80052dc:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80052e0:	d91b      	bls.n	800531a <OD_write_1012+0xa2>
 80052e2:	8afb      	ldrh	r3, [r7, #22]
 80052e4:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80052e8:	d903      	bls.n	80052f2 <OD_write_1012+0x7a>
 80052ea:	8afb      	ldrh	r3, [r7, #22]
 80052ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052f0:	d313      	bcc.n	800531a <OD_write_1012+0xa2>
 80052f2:	8afb      	ldrh	r3, [r7, #22]
 80052f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052f8:	d903      	bls.n	8005302 <OD_write_1012+0x8a>
 80052fa:	8afb      	ldrh	r3, [r7, #22]
 80052fc:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8005300:	d30b      	bcc.n	800531a <OD_write_1012+0xa2>
 8005302:	8afb      	ldrh	r3, [r7, #22]
 8005304:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8005308:	d303      	bcc.n	8005312 <OD_write_1012+0x9a>
 800530a:	8afb      	ldrh	r3, [r7, #22]
 800530c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005310:	d303      	bcc.n	800531a <OD_write_1012+0xa2>
 8005312:	8afb      	ldrh	r3, [r7, #22]
 8005314:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005318:	d901      	bls.n	800531e <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 800531a:	230f      	movs	r3, #15
 800531c:	e017      	b.n	800534e <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	0fdb      	lsrs	r3, r3, #31
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7fc fb0c 	bl	8001964 <OD_writeOriginal>
 800534c:	4603      	mov	r3, r0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	3ffff800 	.word	0x3ffff800

0800535c <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	@ 0x30
 8005360:	af04      	add	r7, sp, #16
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <CO_TIME_init+0x20>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <CO_TIME_init+0x20>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005380:	e061      	b.n	8005446 <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8005382:	222c      	movs	r2, #44	@ 0x2c
 8005384:	2100      	movs	r1, #0
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f008 fa08 	bl	800d79c <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 800538c:	f107 0214 	add.w	r2, r7, #20
 8005390:	2301      	movs	r3, #1
 8005392:	2100      	movs	r1, #0
 8005394:	68b8      	ldr	r0, [r7, #8]
 8005396:	f7ff ff3c 	bl	8005212 <OD_get_u32>
 800539a:	4603      	mov	r3, r0
 800539c:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800539e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <CO_TIME_init+0x64>
        if (errInfo != NULL) { *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp); }
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <CO_TIME_init+0x5e>
 80053ac:	68b8      	ldr	r0, [r7, #8]
 80053ae:	f7ff ff0b 	bl	80051c8 <OD_getIndex>
 80053b2:	4603      	mov	r3, r0
 80053b4:	461a      	mov	r2, r3
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80053ba:	f06f 030b 	mvn.w	r3, #11
 80053be:	e042      	b.n	8005446 <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a21      	ldr	r2, [pc, #132]	@ (8005450 <CO_TIME_init+0xf4>)
 80053ca:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a21      	ldr	r2, [pc, #132]	@ (8005454 <CO_TIME_init+0xf8>)
 80053d0:	625a      	str	r2, [r3, #36]	@ 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	331c      	adds	r3, #28
 80053d6:	4619      	mov	r1, r3
 80053d8:	68b8      	ldr	r0, [r7, #8]
 80053da:	f7ff ff06 	bl	80051ea <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053e6:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	0fdb      	lsrs	r3, r3, #31
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf14      	ite	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	2300      	moveq	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d015      	beq.n	8005444 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005418:	8bba      	ldrh	r2, [r7, #28]
 800541a:	8879      	ldrh	r1, [r7, #2]
 800541c:	4b0e      	ldr	r3, [pc, #56]	@ (8005458 <CO_TIME_init+0xfc>)
 800541e:	9302      	str	r3, [sp, #8]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	2300      	movs	r3, #0
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 ff2d 	bl	800728c <CO_CANrxBufferInit>
 8005432:	4603      	mov	r3, r0
 8005434:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO) {
 8005436:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <CO_TIME_init+0xe8>
            return ret;
 800543e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005442:	e000      	b.n	8005446 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	080018b5 	.word	0x080018b5
 8005454:	08005279 	.word	0x08005279
 8005458:	0800523d 	.word	0x0800523d

0800545c <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	@ 0x28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d024      	beq.n	80054bc <CO_TIME_process+0x60>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d020      	beq.n	80054bc <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01f      	beq.n	80054c2 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff fe91 	bl	80051ac <CO_getUint32>
 800548a:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3304      	adds	r3, #4
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fe7c 	bl	800518e <CO_getUint16>
 8005496:	4603      	mov	r3, r0
 8005498:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8bfa      	ldrh	r2, [r7, #30]
 80054a8:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 80054b0:	2301      	movs	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 80054ba:	e002      	b.n	80054c2 <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d132      	bne.n	8005532 <CO_TIME_process+0xd6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d02f      	beq.n	8005532 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	89db      	ldrh	r3, [r3, #14]
 80054d6:	461a      	mov	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4413      	add	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4a16      	ldr	r2, [pc, #88]	@ (800553c <CO_TIME_process+0xe0>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	099b      	lsrs	r3, r3, #6
 80054e8:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4b13      	ldr	r3, [pc, #76]	@ (800553c <CO_TIME_process+0xe0>)
 80054ee:	fba3 1302 	umull	r1, r3, r3, r2
 80054f2:	099b      	lsrs	r3, r3, #6
 80054f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	441a      	add	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4a0a      	ldr	r2, [pc, #40]	@ (8005540 <CO_TIME_process+0xe4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d90b      	bls.n	8005532 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	4b09      	ldr	r3, [pc, #36]	@ (8005544 <CO_TIME_process+0xe8>)
 8005520:	4413      	add	r3, r2
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	899b      	ldrh	r3, [r3, #12]
 800552a:	3301      	adds	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005534:	4618      	mov	r0, r3
 8005536:	3728      	adds	r7, #40	@ 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	10624dd3 	.word	0x10624dd3
 8005540:	05265bff 	.word	0x05265bff
 8005544:	fad9a400 	.word	0xfad9a400

08005548 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005550:	2300      	movs	r3, #0
 8005552:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800555e:	e006      	b.n	800556e <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005560:	220c      	movs	r2, #12
 8005562:	2100      	movs	r1, #0
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f008 f919 	bl	800d79c <memset>

    return ret;
 800556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8005578:	b480      	push	{r7}
 800557a:	b089      	sub	sp, #36	@ 0x24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	441a      	add	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 80055a0:	e112      	b.n	80057c8 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	7a5b      	ldrb	r3, [r3, #9]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	613b      	str	r3, [r7, #16]

        tick = true;
 80055b6:	2301      	movs	r3, #1
 80055b8:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 80055c2:	3b50      	subs	r3, #80	@ 0x50
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	791b      	ldrb	r3, [r3, #4]
 80055cc:	3301      	adds	r3, #1
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	711a      	strb	r2, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	791b      	ldrb	r3, [r3, #4]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	f240 80dd 	bls.w	8005798 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	77bb      	strb	r3, [r7, #30]
 80055e8:	7fbb      	ldrb	r3, [r7, #30]
 80055ea:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) { rd |= CO_LED_blink; }
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	7a5b      	ldrb	r3, [r3, #9]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <CO_LEDs_process+0x8a>
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e003      	b.n	800560a <CO_LEDs_process+0x92>
            else                                    { gr |= CO_LED_blink; }
 8005602:	7fbb      	ldrb	r3, [r7, #30]
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	795b      	ldrb	r3, [r3, #5]
 800560e:	3301      	adds	r3, #1
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	715a      	strb	r2, [r3, #5]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	795b      	ldrb	r3, [r3, #5]
 800561a:	2b06      	cmp	r3, #6
 800561c:	d010      	beq.n	8005640 <CO_LEDs_process+0xc8>
 800561e:	2b06      	cmp	r3, #6
 8005620:	dc12      	bgt.n	8005648 <CO_LEDs_process+0xd0>
 8005622:	2b01      	cmp	r3, #1
 8005624:	d002      	beq.n	800562c <CO_LEDs_process+0xb4>
 8005626:	2b02      	cmp	r3, #2
 8005628:	d005      	beq.n	8005636 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 800562a:	e00d      	b.n	8005648 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 800562c:	7ffb      	ldrb	r3, [r7, #31]
 800562e:	f043 0304 	orr.w	r3, r3, #4
 8005632:	77fb      	strb	r3, [r7, #31]
 8005634:	e009      	b.n	800564a <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8005636:	7fbb      	ldrb	r3, [r7, #30]
 8005638:	f043 0304 	orr.w	r3, r3, #4
 800563c:	77bb      	strb	r3, [r7, #30]
 800563e:	e004      	b.n	800564a <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	715a      	strb	r2, [r3, #5]
 8005646:	e000      	b.n	800564a <CO_LEDs_process+0xd2>
                default: break;
 8005648:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	799b      	ldrb	r3, [r3, #6]
 800564e:	3301      	adds	r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	719a      	strb	r2, [r3, #6]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	799b      	ldrb	r3, [r3, #6]
 800565a:	3b01      	subs	r3, #1
 800565c:	2b07      	cmp	r3, #7
 800565e:	d821      	bhi.n	80056a4 <CO_LEDs_process+0x12c>
 8005660:	a201      	add	r2, pc, #4	@ (adr r2, 8005668 <CO_LEDs_process+0xf0>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	08005689 	.word	0x08005689
 800566c:	08005693 	.word	0x08005693
 8005670:	08005689 	.word	0x08005689
 8005674:	08005693 	.word	0x08005693
 8005678:	080056a5 	.word	0x080056a5
 800567c:	080056a5 	.word	0x080056a5
 8005680:	080056a5 	.word	0x080056a5
 8005684:	0800569d 	.word	0x0800569d
                case 1: case 3: rd |= CO_LED_flash_2; break;
 8005688:	7ffb      	ldrb	r3, [r7, #31]
 800568a:	f043 0308 	orr.w	r3, r3, #8
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e009      	b.n	80056a6 <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 8005692:	7fbb      	ldrb	r3, [r7, #30]
 8005694:	f043 0308 	orr.w	r3, r3, #8
 8005698:	77bb      	strb	r3, [r7, #30]
 800569a:	e004      	b.n	80056a6 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	719a      	strb	r2, [r3, #6]
 80056a2:	e000      	b.n	80056a6 <CO_LEDs_process+0x12e>
                default: break;
 80056a4:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	79db      	ldrb	r3, [r3, #7]
 80056aa:	3301      	adds	r3, #1
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	71da      	strb	r2, [r3, #7]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	79db      	ldrb	r3, [r3, #7]
 80056b6:	2b0a      	cmp	r3, #10
 80056b8:	bf8c      	ite	hi
 80056ba:	2201      	movhi	r2, #1
 80056bc:	2200      	movls	r2, #0
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	2a00      	cmp	r2, #0
 80056c2:	d12c      	bne.n	800571e <CO_LEDs_process+0x1a6>
 80056c4:	2201      	movs	r2, #1
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	f003 0254 	and.w	r2, r3, #84	@ 0x54
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	bf14      	ite	ne
 80056d2:	2201      	movne	r2, #1
 80056d4:	2200      	moveq	r2, #0
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	2a00      	cmp	r2, #0
 80056da:	d117      	bne.n	800570c <CO_LEDs_process+0x194>
 80056dc:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	bf14      	ite	ne
 80056e4:	2201      	movne	r2, #1
 80056e6:	2200      	moveq	r2, #0
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	d109      	bne.n	8005702 <CO_LEDs_process+0x18a>
 80056ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <CO_LEDs_process+0x19e>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: break;
 8005700:	e00d      	b.n	800571e <CO_LEDs_process+0x1a6>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 8005702:	7ffb      	ldrb	r3, [r7, #31]
 8005704:	f043 0310 	orr.w	r3, r3, #16
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e009      	b.n	8005720 <CO_LEDs_process+0x1a8>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 800570c:	7fbb      	ldrb	r3, [r7, #30]
 800570e:	f043 0310 	orr.w	r3, r3, #16
 8005712:	77bb      	strb	r3, [r7, #30]
 8005714:	e004      	b.n	8005720 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	71da      	strb	r2, [r3, #7]
 800571c:	e000      	b.n	8005720 <CO_LEDs_process+0x1a8>
                default: break;
 800571e:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	7a1b      	ldrb	r3, [r3, #8]
 8005724:	3301      	adds	r3, #1
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	721a      	strb	r2, [r3, #8]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	7a1b      	ldrb	r3, [r3, #8]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	bf8c      	ite	hi
 8005734:	2201      	movhi	r2, #1
 8005736:	2200      	movls	r2, #0
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	2a00      	cmp	r2, #0
 800573c:	d137      	bne.n	80057ae <CO_LEDs_process+0x236>
 800573e:	2201      	movs	r2, #1
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 8005748:	2a00      	cmp	r2, #0
 800574a:	bf14      	ite	ne
 800574c:	2201      	movne	r2, #1
 800574e:	2200      	moveq	r2, #0
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	2a00      	cmp	r2, #0
 8005754:	d117      	bne.n	8005786 <CO_LEDs_process+0x20e>
 8005756:	f003 02aa 	and.w	r2, r3, #170	@ 0xaa
 800575a:	2a00      	cmp	r2, #0
 800575c:	bf14      	ite	ne
 800575e:	2201      	movne	r2, #1
 8005760:	2200      	moveq	r2, #0
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	2a00      	cmp	r2, #0
 8005766:	d109      	bne.n	800577c <CO_LEDs_process+0x204>
 8005768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <CO_LEDs_process+0x218>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: break;
 800577a:	e018      	b.n	80057ae <CO_LEDs_process+0x236>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 800577c:	7ffb      	ldrb	r3, [r7, #31]
 800577e:	f043 0320 	orr.w	r3, r3, #32
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e014      	b.n	80057b0 <CO_LEDs_process+0x238>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 8005786:	7fbb      	ldrb	r3, [r7, #30]
 8005788:	f043 0320 	orr.w	r3, r3, #32
 800578c:	77bb      	strb	r3, [r7, #30]
 800578e:	e00f      	b.n	80057b0 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	721a      	strb	r2, [r3, #8]
 8005796:	e00b      	b.n	80057b0 <CO_LEDs_process+0x238>
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	7a5b      	ldrb	r3, [r3, #9]
 800579c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80057a0:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	7a9b      	ldrb	r3, [r3, #10]
 80057a6:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80057aa:	77bb      	strb	r3, [r7, #30]
 80057ac:	e000      	b.n	80057b0 <CO_LEDs_process+0x238>
                default: break;
 80057ae:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) { rd |= CO_LED_flicker; }
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <CO_LEDs_process+0x248>
 80057b6:	7ffb      	ldrb	r3, [r7, #31]
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	77fb      	strb	r3, [r7, #31]
 80057be:	e003      	b.n	80057c8 <CO_LEDs_process+0x250>
        else               { gr |= CO_LED_flicker; }
 80057c0:	7fbb      	ldrb	r3, [r7, #30]
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80057d0:	4293      	cmp	r3, r2
 80057d2:	f63f aee6 	bhi.w	80055a2 <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d077      	beq.n	80058cc <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                   { rd_co = 1;}
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <CO_LEDs_process+0x270>
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
 80057e6:	e032      	b.n	800584e <CO_LEDs_process+0x2d6>
        else if (NMTstate == CO_NMT_INITIALIZING){ rd_co = rd & CO_LED_flicker;}
 80057e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d104      	bne.n	80057fa <CO_LEDs_process+0x282>
 80057f0:	7ffb      	ldrb	r3, [r7, #31]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]
 80057f8:	e029      	b.n	800584e <CO_LEDs_process+0x2d6>
        else if (ErrRpdo)                        { rd_co = rd & CO_LED_flash_4;}
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <CO_LEDs_process+0x292>
 8005800:	7ffb      	ldrb	r3, [r7, #31]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	75fb      	strb	r3, [r7, #23]
 8005808:	e021      	b.n	800584e <CO_LEDs_process+0x2d6>
        else if (ErrSync)                        { rd_co = rd & CO_LED_flash_3;}
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <CO_LEDs_process+0x2a2>
 8005810:	7ffb      	ldrb	r3, [r7, #31]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	75fb      	strb	r3, [r7, #23]
 8005818:	e019      	b.n	800584e <CO_LEDs_process+0x2d6>
        else if (ErrHbCons)                      { rd_co = rd & CO_LED_flash_2;}
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <CO_LEDs_process+0x2b2>
 8005820:	7ffb      	ldrb	r3, [r7, #31]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	75fb      	strb	r3, [r7, #23]
 8005828:	e011      	b.n	800584e <CO_LEDs_process+0x2d6>
        else if (ErrCANbusWarn)                  { rd_co = rd & CO_LED_flash_1;}
 800582a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <CO_LEDs_process+0x2c2>
 8005830:	7ffb      	ldrb	r3, [r7, #31]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	75fb      	strb	r3, [r7, #23]
 8005838:	e009      	b.n	800584e <CO_LEDs_process+0x2d6>
        else if (ErrOther)                       { rd_co = rd & CO_LED_blink;}
 800583a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <CO_LEDs_process+0x2d2>
 8005840:	7ffb      	ldrb	r3, [r7, #31]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	75fb      	strb	r3, [r7, #23]
 8005848:	e001      	b.n	800584e <CO_LEDs_process+0x2d6>
        else                                     { rd_co = 0;}
 800584a:	2300      	movs	r3, #0
 800584c:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         {gr_co = gr & CO_LED_flicker;}
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <CO_LEDs_process+0x2e6>
 8005854:	7fbb      	ldrb	r3, [r7, #30]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	75bb      	strb	r3, [r7, #22]
 800585c:	e022      	b.n	80058a4 <CO_LEDs_process+0x32c>
        else if (firmwareDownload)                  {gr_co = gr & CO_LED_flash_3;}
 800585e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <CO_LEDs_process+0x2f6>
 8005864:	7fbb      	ldrb	r3, [r7, #30]
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	75bb      	strb	r3, [r7, #22]
 800586c:	e01a      	b.n	80058a4 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_STOPPED)        {gr_co = gr & CO_LED_flash_1;}
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	2b04      	cmp	r3, #4
 8005874:	d104      	bne.n	8005880 <CO_LEDs_process+0x308>
 8005876:	7fbb      	ldrb	r3, [r7, #30]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	75bb      	strb	r3, [r7, #22]
 800587e:	e011      	b.n	80058a4 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL){gr_co = gr & CO_LED_blink;}
 8005880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005884:	2b7f      	cmp	r3, #127	@ 0x7f
 8005886:	d104      	bne.n	8005892 <CO_LEDs_process+0x31a>
 8005888:	7fbb      	ldrb	r3, [r7, #30]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	75bb      	strb	r3, [r7, #22]
 8005890:	e008      	b.n	80058a4 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_OPERATIONAL)    {gr_co = 1;}
 8005892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005896:	2b05      	cmp	r3, #5
 8005898:	d102      	bne.n	80058a0 <CO_LEDs_process+0x328>
 800589a:	2301      	movs	r3, #1
 800589c:	75bb      	strb	r3, [r7, #22]
 800589e:	e001      	b.n	80058a4 <CO_LEDs_process+0x32c>
        else                                        {gr_co = 0;}
 80058a0:	2300      	movs	r3, #0
 80058a2:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) { rd |= CO_LED_CANopen; }
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <CO_LEDs_process+0x33a>
 80058aa:	7ffb      	ldrb	r3, [r7, #31]
 80058ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058b0:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) { gr |= CO_LED_CANopen; }
 80058b2:	7dbb      	ldrb	r3, [r7, #22]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <CO_LEDs_process+0x348>
 80058b8:	7fbb      	ldrb	r3, [r7, #30]
 80058ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058be:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	7ffa      	ldrb	r2, [r7, #31]
 80058c4:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	7fba      	ldrb	r2, [r7, #30]
 80058ca:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 80058cc:	bf00      	nop
 80058ce:	3724      	adds	r7, #36	@ 0x24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b090      	sub	sp, #64	@ 0x40
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	791b      	ldrb	r3, [r3, #4]
 80058ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 80058ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	f040 814c 	bne.w	8005b90 <CO_LSSslave_receive+0x2b8>
 80058f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f040 8147 	bne.w	8005b90 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 8005902:	2300      	movs	r3, #0
 8005904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	3305      	adds	r3, #5
 800590a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 800590c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005914:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005918:	2b04      	cmp	r3, #4
 800591a:	d12c      	bne.n	8005976 <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005922:	7ffb      	ldrb	r3, [r7, #31]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <CO_LSSslave_receive+0x56>
 8005928:	2b01      	cmp	r3, #1
 800592a:	d020      	beq.n	800596e <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 800592c:	e12a      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005930:	7c1b      	ldrb	r3, [r3, #16]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d110      	bne.n	8005958 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005938:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800593c:	2bff      	cmp	r3, #255	@ 0xff
 800593e:	d10b      	bne.n	8005958 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8005940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005944:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005946:	2bff      	cmp	r3, #255	@ 0xff
 8005948:	d006      	beq.n	8005958 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 800594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005950:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8005954:	2301      	movs	r3, #1
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595a:	2200      	movs	r2, #0
 800595c:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 800595e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005960:	3314      	adds	r3, #20
 8005962:	2210      	movs	r2, #16
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f007 ff18 	bl	800d79c <memset>
                    break;
 800596c:	e10a      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800596e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005970:	2201      	movs	r2, #1
 8005972:	741a      	strb	r2, [r3, #16]
                    break;
 8005974:	e106      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005978:	7c1b      	ldrb	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f040 80ee 	bne.w	8005b5c <CO_LSSslave_receive+0x284>
            switch (cs) {
 8005980:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005984:	3b40      	subs	r3, #64	@ 0x40
 8005986:	2b11      	cmp	r3, #17
 8005988:	f200 80f7 	bhi.w	8005b7a <CO_LSSslave_receive+0x2a2>
 800598c:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <CO_LSSslave_receive+0xbc>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	080059dd 	.word	0x080059dd
 8005998:	080059ed 	.word	0x080059ed
 800599c:	080059fd 	.word	0x080059fd
 80059a0:	08005a0d 	.word	0x08005a0d
 80059a4:	08005b7b 	.word	0x08005b7b
 80059a8:	08005b7b 	.word	0x08005b7b
 80059ac:	08005b7b 	.word	0x08005b7b
 80059b0:	08005b7b 	.word	0x08005b7b
 80059b4:	08005b7b 	.word	0x08005b7b
 80059b8:	08005b7b 	.word	0x08005b7b
 80059bc:	08005b7b 	.word	0x08005b7b
 80059c0:	08005b7b 	.word	0x08005b7b
 80059c4:	08005b7b 	.word	0x08005b7b
 80059c8:	08005b7b 	.word	0x08005b7b
 80059cc:	08005b7b 	.word	0x08005b7b
 80059d0:	08005b7b 	.word	0x08005b7b
 80059d4:	08005b7b 	.word	0x08005b7b
 80059d8:	08005a69 	.word	0x08005a69
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80059dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059de:	3301      	adds	r3, #1
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e8:	615a      	str	r2, [r3, #20]
                break;
 80059ea:	e0cb      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80059ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ee:	3301      	adds	r3, #1
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f8:	619a      	str	r2, [r3, #24]
                break;
 80059fa:	e0c3      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80059fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fe:	3301      	adds	r3, #1
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a08:	61da      	str	r2, [r3, #28]
                break;
 8005a0a:	e0bb      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	3301      	adds	r3, #1
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	f040 80ab 	bne.w	8005b7e <CO_LSSslave_receive+0x2a6>
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	f040 80a4 	bne.w	8005b7e <CO_LSSslave_receive+0x2a6>
 8005a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	f040 809d 	bne.w	8005b7e <CO_LSSslave_receive+0x2a6>
 8005a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	f040 8096 	bne.w	8005b7e <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a54:	2201      	movs	r2, #1
 8005a56:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8005a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005a5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                    request_LSSslave_process = true;
 8005a62:	2301      	movs	r3, #1
 8005a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                break;
 8005a66:	e08a      	b.n	8005b7e <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2bff      	cmp	r3, #255	@ 0xff
 8005a70:	f040 8087 	bne.w	8005b82 <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005a7a:	2bff      	cmp	r3, #255	@ 0xff
 8005a7c:	f040 8081 	bne.w	8005b82 <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8005a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a82:	795b      	ldrb	r3, [r3, #5]
 8005a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                    uint8_t lssSub = data[6];
 8005a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8a:	799b      	ldrb	r3, [r3, #6]
 8005a8c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    uint8_t lssNext = data[7];
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	79db      	ldrb	r3, [r3, #7]
 8005a94:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 8005a98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a9c:	2b1f      	cmp	r3, #31
 8005a9e:	d903      	bls.n	8005aa8 <CO_LSSslave_receive+0x1d0>
 8005aa0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005aa4:	2b80      	cmp	r3, #128	@ 0x80
 8005aa6:	d16d      	bne.n	8005b84 <CO_LSSslave_receive+0x2ac>
 8005aa8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d869      	bhi.n	8005b84 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8005ab0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d865      	bhi.n	8005b84 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aba:	3301      	adds	r3, #1
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
                    ack = false;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63bb      	str	r3, [r7, #56]	@ 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8005ac8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005acc:	2b80      	cmp	r3, #128	@ 0x80
 8005ace:	d10d      	bne.n	8005aec <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8005adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ade:	3324      	adds	r3, #36	@ 0x24
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f007 fe59 	bl	800d79c <memset>
 8005aea:	e02c      	b.n	8005b46 <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8005aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005af2:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d125      	bne.n	8005b46 <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8005afa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005b08:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	405a      	eors	r2, r3
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d113      	bne.n	8005b46 <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = lssNext;
 8005b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b24:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8005b2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d108      	bne.n	8005b46 <CO_LSSslave_receive+0x26e>
 8005b34:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005b38:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d202      	bcs.n	8005b46 <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b42:	2201      	movs	r2, #1
 8005b44:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    else { /* MISRA C 2004 14.10 */ }
                    if (ack) {
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01a      	beq.n	8005b82 <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005b52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8005b56:	2301      	movs	r3, #1
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                    }
                }
                break;
 8005b5a:	e012      	b.n	8005b82 <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5e:	3349      	adds	r3, #73	@ 0x49
 8005b60:	2208      	movs	r2, #8
 8005b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b64:	4618      	mov	r0, r3
 8005b66:	f007 fea4 	bl	800d8b2 <memcpy>
            LSSslave->service = cs;
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005b70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 8005b74:	2301      	movs	r3, #1
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b78:	e004      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
                break;
 8005b7a:	bf00      	nop
 8005b7c:	e002      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
                break;
 8005b7e:	bf00      	nop
 8005b80:	e000      	b.n	8005b84 <CO_LSSslave_receive+0x2ac>
                break;
 8005b82:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8005b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	645a      	str	r2, [r3, #68]	@ 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005b90:	bf00      	nop
 8005b92:	3740      	adds	r7, #64	@ 0x40
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	@ 0x28
 8005b9c:	af04      	add	r7, sp, #16
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d018      	beq.n	8005be2 <CO_LSSslave_init+0x4a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d015      	beq.n	8005be2 <CO_LSSslave_init+0x4a>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d012      	beq.n	8005be2 <CO_LSSslave_init+0x4a>
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00f      	beq.n	8005be2 <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00c      	beq.n	8005be2 <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da06      	bge.n	8005be8 <CO_LSSslave_init+0x50>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2bff      	cmp	r3, #255	@ 0xff
 8005be0:	d002      	beq.n	8005be8 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005be6:	e046      	b.n	8005c76 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005be8:	2274      	movs	r2, #116	@ 0x74
 8005bea:	2100      	movs	r1, #0
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f007 fdd5 	bl	800d79c <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f007 fe5a 	bl	800d8b2 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8005c28:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c2a:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005c2c:	4b14      	ldr	r3, [pc, #80]	@ (8005c80 <CO_LSSslave_init+0xe8>)
 8005c2e:	9302      	str	r3, [sp, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	2300      	movs	r3, #0
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005c3c:	6a38      	ldr	r0, [r7, #32]
 8005c3e:	f001 fb25 	bl	800728c <CO_CANrxBufferInit>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8005c4c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c4e:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8005c50:	2300      	movs	r3, #0
 8005c52:	9301      	str	r3, [sp, #4]
 8005c54:	2308      	movs	r3, #8
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c5c:	f001 fb74 	bl	8007348 <CO_CANtxBufferInit>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	671a      	str	r2, [r3, #112]	@ 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005c6e:	23ff      	movs	r3, #255	@ 0xff
 8005c70:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	080058d9 	.word	0x080058d9

08005c84 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08c      	sub	sp, #48	@ 0x30
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8202 	beq.w	800609e <CO_LSSslave_process+0x41a>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca2:	3305      	adds	r3, #5
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f007 fd77 	bl	800d79c <memset>

        switch (LSSslave->service) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	2b5a      	cmp	r3, #90	@ 0x5a
 8005cb8:	f200 81dc 	bhi.w	8006074 <CO_LSSslave_process+0x3f0>
 8005cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <CO_LSSslave_process+0x40>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005e31 	.word	0x08005e31
 8005cc8:	08006075 	.word	0x08006075
 8005ccc:	08006075 	.word	0x08006075
 8005cd0:	08006075 	.word	0x08006075
 8005cd4:	08006075 	.word	0x08006075
 8005cd8:	08006075 	.word	0x08006075
 8005cdc:	08006075 	.word	0x08006075
 8005ce0:	08006075 	.word	0x08006075
 8005ce4:	08006075 	.word	0x08006075
 8005ce8:	08006075 	.word	0x08006075
 8005cec:	08006075 	.word	0x08006075
 8005cf0:	08006075 	.word	0x08006075
 8005cf4:	08006075 	.word	0x08006075
 8005cf8:	08005e45 	.word	0x08005e45
 8005cfc:	08006075 	.word	0x08006075
 8005d00:	08005e93 	.word	0x08005e93
 8005d04:	08006075 	.word	0x08006075
 8005d08:	08005f2f 	.word	0x08005f2f
 8005d0c:	08006075 	.word	0x08006075
 8005d10:	08005f6b 	.word	0x08005f6b
 8005d14:	08006075 	.word	0x08006075
 8005d18:	08006075 	.word	0x08006075
 8005d1c:	08006075 	.word	0x08006075
 8005d20:	08006075 	.word	0x08006075
 8005d24:	08006075 	.word	0x08006075
 8005d28:	08006075 	.word	0x08006075
 8005d2c:	08006075 	.word	0x08006075
 8005d30:	08006075 	.word	0x08006075
 8005d34:	08006075 	.word	0x08006075
 8005d38:	08006075 	.word	0x08006075
 8005d3c:	08006075 	.word	0x08006075
 8005d40:	08006075 	.word	0x08006075
 8005d44:	08006075 	.word	0x08006075
 8005d48:	08006075 	.word	0x08006075
 8005d4c:	08006075 	.word	0x08006075
 8005d50:	08006075 	.word	0x08006075
 8005d54:	08006075 	.word	0x08006075
 8005d58:	08006075 	.word	0x08006075
 8005d5c:	08006075 	.word	0x08006075
 8005d60:	08006075 	.word	0x08006075
 8005d64:	08006075 	.word	0x08006075
 8005d68:	08006075 	.word	0x08006075
 8005d6c:	08006075 	.word	0x08006075
 8005d70:	08006075 	.word	0x08006075
 8005d74:	08006075 	.word	0x08006075
 8005d78:	08006075 	.word	0x08006075
 8005d7c:	08006075 	.word	0x08006075
 8005d80:	08006075 	.word	0x08006075
 8005d84:	08006075 	.word	0x08006075
 8005d88:	08006075 	.word	0x08006075
 8005d8c:	08006075 	.word	0x08006075
 8005d90:	08006075 	.word	0x08006075
 8005d94:	08006075 	.word	0x08006075
 8005d98:	08006075 	.word	0x08006075
 8005d9c:	08006075 	.word	0x08006075
 8005da0:	08006075 	.word	0x08006075
 8005da4:	08006075 	.word	0x08006075
 8005da8:	08006075 	.word	0x08006075
 8005dac:	08006075 	.word	0x08006075
 8005db0:	08006075 	.word	0x08006075
 8005db4:	08006075 	.word	0x08006075
 8005db8:	08006075 	.word	0x08006075
 8005dbc:	08006075 	.word	0x08006075
 8005dc0:	08005e37 	.word	0x08005e37
 8005dc4:	08006075 	.word	0x08006075
 8005dc8:	08006075 	.word	0x08006075
 8005dcc:	08006075 	.word	0x08006075
 8005dd0:	08006075 	.word	0x08006075
 8005dd4:	08006075 	.word	0x08006075
 8005dd8:	08006075 	.word	0x08006075
 8005ddc:	08006075 	.word	0x08006075
 8005de0:	08006075 	.word	0x08006075
 8005de4:	08006075 	.word	0x08006075
 8005de8:	08006075 	.word	0x08006075
 8005dec:	08006075 	.word	0x08006075
 8005df0:	08006075 	.word	0x08006075
 8005df4:	08006075 	.word	0x08006075
 8005df8:	08006067 	.word	0x08006067
 8005dfc:	08006075 	.word	0x08006075
 8005e00:	08006075 	.word	0x08006075
 8005e04:	08006075 	.word	0x08006075
 8005e08:	08006075 	.word	0x08006075
 8005e0c:	08006075 	.word	0x08006075
 8005e10:	08006075 	.word	0x08006075
 8005e14:	08006075 	.word	0x08006075
 8005e18:	08006075 	.word	0x08006075
 8005e1c:	08005fc1 	.word	0x08005fc1
 8005e20:	08005fe3 	.word	0x08005fe3
 8005e24:	08006005 	.word	0x08006005
 8005e28:	08006027 	.word	0x08006027
 8005e2c:	08006049 	.word	0x08006049
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8005e30:	2301      	movs	r3, #1
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005e34:	e125      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3a:	2244      	movs	r2, #68	@ 0x44
 8005e3c:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005e42:	e11e      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005e4a:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <CO_LSSslave_process+0x1dc>
 8005e58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	da02      	bge.n	8005e66 <CO_LSSslave_process+0x1e2>
 8005e60:	7cfb      	ldrb	r3, [r7, #19]
 8005e62:	2bff      	cmp	r3, #255	@ 0xff
 8005e64:	d104      	bne.n	8005e70 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e6a:	7cfa      	ldrb	r2, [r7, #19]
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e002      	b.n	8005e76 <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005e80:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e86:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005e8a:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005e90:	e0f7      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80ee 	beq.w	8006078 <CO_LSSslave_process+0x3f4>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005ea2:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005eaa:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005eb8:	7f7b      	ldrb	r3, [r7, #29]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d121      	bne.n	8005f02 <CO_LSSslave_process+0x27e>
 8005ebe:	7f3b      	ldrb	r3, [r7, #28]
 8005ec0:	2b05      	cmp	r3, #5
 8005ec2:	d01e      	beq.n	8005f02 <CO_LSSslave_process+0x27e>
 8005ec4:	7f3b      	ldrb	r3, [r7, #28]
 8005ec6:	2b09      	cmp	r3, #9
 8005ec8:	d81b      	bhi.n	8005f02 <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8005eca:	7f3b      	ldrb	r3, [r7, #28]
 8005ecc:	4a76      	ldr	r2, [pc, #472]	@ (80060a8 <CO_LSSslave_process+0x424>)
 8005ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed2:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005edc:	8b79      	ldrh	r1, [r7, #26]
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4798      	blx	r3
 8005ee2:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	8b7a      	ldrh	r2, [r7, #26]
 8005ef0:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005ef2:	e009      	b.n	8005f08 <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8005ef4:	23ff      	movs	r3, #255	@ 0xff
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005f00:	e002      	b.n	8005f08 <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005f12:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f18:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005f1c:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8005f26:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005f2c:	e0a9      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 80a2 	beq.w	800607c <CO_LSSslave_process+0x3f8>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 809f 	beq.w	8006080 <CO_LSSslave_process+0x3fc>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8005f52:	461a      	mov	r2, r3
 8005f54:	8bfb      	ldrh	r3, [r7, #30]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8005f62:	8bf9      	ldrh	r1, [r7, #30]
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 8005f68:	e08a      	b.n	8006080 <CO_LSSslave_process+0x3fc>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d103      	bne.n	8005f80 <CO_LSSslave_process+0x2fc>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7e:	e011      	b.n	8005fa4 <CO_LSSslave_process+0x320>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6e90      	ldr	r0, [r2, #104]	@ 0x68
                                               *LSSslave->pendingNodeID,
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005f8c:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6b92      	ldr	r2, [r2, #56]	@ 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005f92:	8812      	ldrh	r2, [r2, #0]
 8005f94:	4798      	blx	r3
 8005f96:	6238      	str	r0, [r7, #32]
                if (!result) {
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <CO_LSSslave_process+0x320>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005fae:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005fb8:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005fbe:	e060      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005fca:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd6:	3306      	adds	r3, #6
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005fe0:	e04f      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005fec:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff8:	3306      	adds	r3, #6
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8005ffe:	2301      	movs	r3, #1
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006002:	e03e      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800600e:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601a:	3306      	adds	r3, #6
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006020:	2301      	movs	r3, #1
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006024:	e02d      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006030:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603c:	3306      	adds	r3, #6
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006042:	2301      	movs	r3, #1
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006046:	e01c      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006052:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800605e:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8006060:	2301      	movs	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006064:	e00d      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	224f      	movs	r2, #79	@ 0x4f
 800606c:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 800606e:	2301      	movs	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006072:	e006      	b.n	8006082 <CO_LSSslave_process+0x3fe>
        }
        default: {
            break;
 8006074:	bf00      	nop
 8006076:	e004      	b.n	8006082 <CO_LSSslave_process+0x3fe>
                break;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <CO_LSSslave_process+0x3fe>
                break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <CO_LSSslave_process+0x3fe>
            break;
 8006080:	bf00      	nop
        }
        }

        if(CANsend) {
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <CO_LSSslave_process+0x414>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f001 fa16 	bl	80074c4 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 800609e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3730      	adds	r7, #48	@ 0x30
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	0800e25c 	.word	0x0800e25c

080060ac <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	08db      	lsrs	r3, r3, #3
 80060bc:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	2201      	movs	r2, #1
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d807      	bhi.n	80060e8 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	5cd2      	ldrb	r2, [r2, r3]
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	4013      	ands	r3, r2
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <CO_isError+0x40>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <CO_isError+0x42>
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <CO_getErrorRegister+0x1e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <CO_getErrorRegister+0x1e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	e000      	b.n	800611a <CO_getErrorRegister+0x20>
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <CO_NMT_getInternalState+0x16>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f993 3000 	ldrsb.w	r3, [r3]
 800613a:	e000      	b.n	800613e <CO_NMT_getInternalState+0x18>
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <CO_LSSslave_getState+0x14>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	7c1b      	ldrb	r3, [r3, #16]
 800615c:	e000      	b.n	8006160 <CO_LSSslave_getState+0x16>
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8006182:	2140      	movs	r1, #64	@ 0x40
 8006184:	2001      	movs	r0, #1
 8006186:	f006 ff53 	bl	800d030 <calloc>
 800618a:	4603      	mov	r3, r0
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8101 	beq.w	8006398 <CO_new+0x22c>
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3340      	adds	r3, #64	@ 0x40
 800619a:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 800619c:	212c      	movs	r1, #44	@ 0x2c
 800619e:	2001      	movs	r0, #1
 80061a0:	f006 ff46 	bl	800d030 <calloc>
 80061a4:	4603      	mov	r3, r0
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	611a      	str	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80f1 	beq.w	8006398 <CO_new+0x22c>
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	332c      	adds	r3, #44	@ 0x2c
 80061ba:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 80061bc:	2308      	movs	r3, #8
 80061be:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80061c0:	2130      	movs	r1, #48	@ 0x30
 80061c2:	2001      	movs	r0, #1
 80061c4:	f006 ff34 	bl	800d030 <calloc>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	615a      	str	r2, [r3, #20]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80df 	beq.w	8006398 <CO_new+0x22c>
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3330      	adds	r3, #48	@ 0x30
 80061de:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	2110      	movs	r1, #16
 80061e4:	4618      	mov	r0, r3
 80061e6:	f006 ff23 	bl	800d030 <calloc>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80ce 	beq.w	8006398 <CO_new+0x22c>
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006206:	2150      	movs	r1, #80	@ 0x50
 8006208:	2001      	movs	r0, #1
 800620a:	f006 ff11 	bl	800d030 <calloc>
 800620e:	4603      	mov	r3, r0
 8006210:	461a      	mov	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	61da      	str	r2, [r3, #28]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80bc 	beq.w	8006398 <CO_new+0x22c>
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	3350      	adds	r3, #80	@ 0x50
 8006224:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8006226:	2311      	movs	r3, #17
 8006228:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 800622a:	7abb      	ldrb	r3, [r7, #10]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d912      	bls.n	8006256 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006230:	7abb      	ldrb	r3, [r7, #10]
 8006232:	2108      	movs	r1, #8
 8006234:	4618      	mov	r0, r3
 8006236:	f006 fefb 	bl	800d030 <calloc>
 800623a:	4603      	mov	r3, r0
 800623c:	461a      	mov	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	621a      	str	r2, [r3, #32]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 80a6 	beq.w	8006398 <CO_new+0x22c>
 800624c:	7abb      	ldrb	r3, [r7, #10]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006256:	21ac      	movs	r1, #172	@ 0xac
 8006258:	2001      	movs	r0, #1
 800625a:	f006 fee9 	bl	800d030 <calloc>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	625a      	str	r2, [r3, #36]	@ 0x24
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 8094 	beq.w	8006398 <CO_new+0x22c>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	33ac      	adds	r3, #172	@ 0xac
 8006274:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006276:	212c      	movs	r1, #44	@ 0x2c
 8006278:	2001      	movs	r0, #1
 800627a:	f006 fed9 	bl	800d030 <calloc>
 800627e:	4603      	mov	r3, r0
 8006280:	461a      	mov	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	629a      	str	r2, [r3, #40]	@ 0x28
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8084 	beq.w	8006398 <CO_new+0x22c>
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	332c      	adds	r3, #44	@ 0x2c
 8006294:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006296:	2160      	movs	r1, #96	@ 0x60
 8006298:	2001      	movs	r0, #1
 800629a:	f006 fec9 	bl	800d030 <calloc>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d074      	beq.n	8006398 <CO_new+0x22c>
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	3360      	adds	r3, #96	@ 0x60
 80062b2:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 80062b4:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80062b8:	2004      	movs	r0, #4
 80062ba:	f006 feb9 	bl	800d030 <calloc>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d064      	beq.n	8006398 <CO_new+0x22c>
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80062d4:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 80062d6:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80062da:	2004      	movs	r0, #4
 80062dc:	f006 fea8 	bl	800d030 <calloc>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d053      	beq.n	8006398 <CO_new+0x22c>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80062f6:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80062f8:	210c      	movs	r1, #12
 80062fa:	2001      	movs	r0, #1
 80062fc:	f006 fe98 	bl	800d030 <calloc>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	639a      	str	r2, [r3, #56]	@ 0x38
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	2b00      	cmp	r3, #0
 800630e:	d043      	beq.n	8006398 <CO_new+0x22c>
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	330c      	adds	r3, #12
 8006314:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006316:	2174      	movs	r1, #116	@ 0x74
 8006318:	2001      	movs	r0, #1
 800631a:	f006 fe89 	bl	800d030 <calloc>
 800631e:	4603      	mov	r3, r0
 8006320:	461a      	mov	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d034      	beq.n	8006398 <CO_new+0x22c>
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3374      	adds	r3, #116	@ 0x74
 8006332:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006334:	2138      	movs	r1, #56	@ 0x38
 8006336:	2001      	movs	r0, #1
 8006338:	f006 fe7a 	bl	800d030 <calloc>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	605a      	str	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d025      	beq.n	8006398 <CO_new+0x22c>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	3338      	adds	r3, #56	@ 0x38
 8006350:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006352:	210c      	movs	r1, #12
 8006354:	2011      	movs	r0, #17
 8006356:	f006 fe6b 	bl	800d030 <calloc>
 800635a:	4603      	mov	r3, r0
 800635c:	461a      	mov	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	609a      	str	r2, [r3, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d016      	beq.n	8006398 <CO_new+0x22c>
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	33cc      	adds	r3, #204	@ 0xcc
 800636e:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006370:	2118      	movs	r1, #24
 8006372:	2009      	movs	r0, #9
 8006374:	f006 fe5c 	bl	800d030 <calloc>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	60da      	str	r2, [r3, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <CO_new+0x22c>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	33d8      	adds	r3, #216	@ 0xd8
 800638c:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <CO_new+0x238>
        CO_delete(co);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 f80b 	bl	80063ba <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <CO_new+0x244>
        *heapMemoryUsed = mem;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 80063b0:	697b      	ldr	r3, [r7, #20]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <CO_delete>:

void CO_delete(CO_t *co) {
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d053      	beq.n	8006470 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 ff47 	bl	8007260 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f006 fe46 	bl	800d068 <free>
    CO_free(co->CANrx);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f006 fe41 	bl	800d068 <free>
    CO_free(co->CANmodule);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f006 fe3c 	bl	800d068 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	4618      	mov	r0, r3
 80063f6:	f006 fe37 	bl	800d068 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fe:	4618      	mov	r0, r3
 8006400:	f006 fe32 	bl	800d068 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006408:	4618      	mov	r0, r3
 800640a:	f006 fe2d 	bl	800d068 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006412:	4618      	mov	r0, r3
 8006414:	f006 fe28 	bl	800d068 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	4618      	mov	r0, r3
 800641e:	f006 fe23 	bl	800d068 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006426:	4618      	mov	r0, r3
 8006428:	f006 fe1e 	bl	800d068 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	4618      	mov	r0, r3
 8006432:	f006 fe19 	bl	800d068 <free>

    /* Emergency */
    CO_free(co->em);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	4618      	mov	r0, r3
 800643c:	f006 fe14 	bl	800d068 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	4618      	mov	r0, r3
 8006446:	f006 fe0f 	bl	800d068 <free>
#if (CO_CONFIG_NODE_GUARDING) & CO_CONFIG_NODE_GUARDING_MASTER_ENABLE
    CO_free(co->NGmaster);
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	4618      	mov	r0, r3
 8006450:	f006 fe0a 	bl	800d068 <free>
    CO_free(co->HBcons);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	4618      	mov	r0, r3
 800645a:	f006 fe05 	bl	800d068 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	4618      	mov	r0, r3
 8006464:	f006 fe00 	bl	800d068 <free>

    /* CANopen object */
    CO_free(co);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f006 fdfd 	bl	800d068 <free>
 800646e:	e000      	b.n	8006472 <CO_delete+0xb8>
        return;
 8006470:	bf00      	nop
}
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	@ 0x28
 800647c:	af04      	add	r7, sp, #16
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) { return CO_ERROR_ILLEGAL_ARGUMENT; }
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <CO_CANinit+0x1a>
 800648c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006490:	e01a      	b.n	80064c8 <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800649a:	68b8      	ldr	r0, [r7, #8]
 800649c:	f000 fe0e 	bl	80070bc <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6858      	ldr	r0, [r3, #4]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6899      	ldr	r1, [r3, #8]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	88fa      	ldrh	r2, [r7, #6]
 80064ae:	9202      	str	r2, [sp, #8]
 80064b0:	2209      	movs	r2, #9
 80064b2:	9201      	str	r2, [sp, #4]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	2311      	movs	r3, #17
 80064b8:	460a      	mov	r2, r1
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	f000 fe26 	bl	800710c <CO_CANmodule_init>
 80064c0:	4603      	mov	r3, r0
 80064c2:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 80064c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08c      	sub	sp, #48	@ 0x30
 80064d4:	af06      	add	r7, sp, #24
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d102      	bne.n	80064ea <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80064e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064e8:	e01a      	b.n	8006520 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	6852      	ldr	r2, [r2, #4]
 80064f6:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 80064fa:	9105      	str	r1, [sp, #20]
 80064fc:	2108      	movs	r1, #8
 80064fe:	9104      	str	r1, [sp, #16]
 8006500:	9203      	str	r2, [sp, #12]
 8006502:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 8006506:	9202      	str	r2, [sp, #8]
 8006508:	2210      	movs	r2, #16
 800650a:	9201      	str	r2, [sp, #4]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	f7ff fb40 	bl	8005b98 <CO_LSSslave_init>
 8006518:	4603      	mov	r3, r0
 800651a:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 800651c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8006528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652a:	b091      	sub	sp, #68	@ 0x44
 800652c:	af0a      	add	r7, sp, #40	@ 0x28
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800653c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006540:	e134      	b.n	80067ac <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <CO_CANopenInit+0x26>
        em = co->em;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8006554:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006558:	2bff      	cmp	r3, #255	@ 0xff
 800655a:	d103      	bne.n	8006564 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e00a      	b.n	800657a <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8006564:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <CO_CANopenInit+0x4c>
 800656c:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8006570:	2b00      	cmp	r3, #0
 8006572:	da02      	bge.n	800657a <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006578:	e118      	b.n	80067ac <CO_CANopenInit+0x284>
    }
    else { /* MISRA C 2004 14.10 */ }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe ffe2 	bl	8005548 <CO_LEDs_init>
 8006584:	4603      	mov	r3, r0
 8006586:	747b      	strb	r3, [r7, #17]
        if (err) { return err; }
 8006588:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <CO_CANopenInit+0x6e>
 8006590:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006594:	e10a      	b.n	80067ac <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 800659e:	f06f 0312 	mvn.w	r3, #18
 80065a2:	e103      	b.n	80067ac <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	69d8      	ldr	r0, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 80065ac:	4b81      	ldr	r3, [pc, #516]	@ (80067b4 <CO_CANopenInit+0x28c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 80065ba:	4b7e      	ldr	r3, [pc, #504]	@ (80067b4 <CO_CANopenInit+0x28c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 80065c0:	336c      	adds	r3, #108	@ 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 80065c2:	4a7c      	ldr	r2, [pc, #496]	@ (80067b4 <CO_CANopenInit+0x28c>)
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 80065c8:	3218      	adds	r2, #24
 80065ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80065cc:	9105      	str	r1, [sp, #20]
 80065ce:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 80065d2:	9104      	str	r1, [sp, #16]
 80065d4:	9203      	str	r2, [sp, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	9202      	str	r2, [sp, #8]
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	2311      	movs	r3, #17
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4633      	mov	r3, r6
 80065e2:	462a      	mov	r2, r5
 80065e4:	4621      	mov	r1, r4
 80065e6:	f7fa f929 	bl	800083c <CO_EM_init>
 80065ea:	4603      	mov	r3, r0
 80065ec:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) { return err; }
 80065ee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <CO_CANopenInit+0xd4>
 80065f6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80065fa:	e0d7      	b.n	80067ac <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8006600:	4b6c      	ldr	r3, [pc, #432]	@ (80067b4 <CO_CANopenInit+0x28c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8006606:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	6852      	ldr	r2, [r2, #4]
 8006612:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8006616:	b289      	uxth	r1, r1
 8006618:	f501 61e0 	add.w	r1, r1, #1792	@ 0x700
 800661c:	b289      	uxth	r1, r1
 800661e:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 8006622:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006624:	9008      	str	r0, [sp, #32]
 8006626:	9107      	str	r1, [sp, #28]
 8006628:	2107      	movs	r1, #7
 800662a:	9106      	str	r1, [sp, #24]
 800662c:	9205      	str	r2, [sp, #20]
 800662e:	2200      	movs	r2, #0
 8006630:	9204      	str	r2, [sp, #16]
 8006632:	2200      	movs	r2, #0
 8006634:	9203      	str	r2, [sp, #12]
 8006636:	9302      	str	r3, [sp, #8]
 8006638:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4633      	mov	r3, r6
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4629      	mov	r1, r5
 8006646:	4620      	mov	r0, r4
 8006648:	f7fa ff88 	bl	800155c <CO_NMT_init>
 800664c:	4603      	mov	r3, r0
 800664e:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) { return err; }
 8006650:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <CO_CANopenInit+0x136>
 8006658:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800665c:	e0a6      	b.n	80067ac <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6958      	ldr	r0, [r3, #20]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8006666:	4b53      	ldr	r3, [pc, #332]	@ (80067b4 <CO_CANopenInit+0x28c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 800666c:	3384      	adds	r3, #132	@ 0x84
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	6852      	ldr	r2, [r2, #4]
 8006672:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006674:	9103      	str	r1, [sp, #12]
 8006676:	2108      	movs	r1, #8
 8006678:	9102      	str	r1, [sp, #8]
 800667a:	9201      	str	r2, [sp, #4]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	2308      	movs	r3, #8
 8006680:	4622      	mov	r2, r4
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	f7fa fc6e 	bl	8000f64 <CO_HBconsumer_init>
 8006688:	4603      	mov	r3, r0
 800668a:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) { return err; }
 800668c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <CO_CANopenInit+0x172>
 8006694:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006698:	e088      	b.n	80067ac <CO_CANopenInit+0x284>
    if (err) { return err; }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 800669a:	4b46      	ldr	r3, [pc, #280]	@ (80067b4 <CO_CANopenInit+0x28c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	33b4      	adds	r3, #180	@ 0xb4
 80066a2:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80066a4:	2300      	movs	r3, #0
 80066a6:	827b      	strh	r3, [r7, #18]
 80066a8:	e033      	b.n	8006712 <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066b2:	21ac      	movs	r1, #172	@ 0xac
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	18d6      	adds	r6, r2, r3
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	f102 030c 	add.w	r3, r2, #12
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	8a79      	ldrh	r1, [r7, #18]
 80066c8:	3107      	adds	r1, #7
 80066ca:	b289      	uxth	r1, r1
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	6840      	ldr	r0, [r0, #4]
 80066d0:	8a7c      	ldrh	r4, [r7, #18]
 80066d2:	3406      	adds	r4, #6
 80066d4:	b2a4      	uxth	r4, r4
 80066d6:	f897 c048 	ldrb.w	ip, [r7, #72]	@ 0x48
 80066da:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 80066dc:	9505      	str	r5, [sp, #20]
 80066de:	9404      	str	r4, [sp, #16]
 80066e0:	9003      	str	r0, [sp, #12]
 80066e2:	9102      	str	r1, [sp, #8]
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4663      	mov	r3, ip
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	4630      	mov	r0, r6
 80066f0:	f7fd f982 	bl	80039f8 <CO_SDOserver_init>
 80066f4:	4603      	mov	r3, r0
 80066f6:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) { return err; }
 80066f8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <CO_CANopenInit+0x1de>
 8006700:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006704:	e052      	b.n	80067ac <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800670a:	b29b      	uxth	r3, r3
 800670c:	3301      	adds	r3, #1
 800670e:	b29b      	uxth	r3, r3
 8006710:	827b      	strh	r3, [r7, #18]
 8006712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006716:	2b00      	cmp	r3, #0
 8006718:	ddc7      	ble.n	80066aa <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 800671e:	4b25      	ldr	r3, [pc, #148]	@ (80067b4 <CO_CANopenInit+0x28c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8006724:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	2302      	movs	r3, #2
 8006732:	f7fe fe13 	bl	800535c <CO_TIME_init>
 8006736:	4603      	mov	r3, r0
 8006738:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) { return err; }
 800673a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <CO_CANopenInit+0x220>
 8006742:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006746:	e031      	b.n	80067ac <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 800674c:	4b19      	ldr	r3, [pc, #100]	@ (80067b4 <CO_CANopenInit+0x28c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006752:	f103 0624 	add.w	r6, r3, #36	@ 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006756:	4b17      	ldr	r3, [pc, #92]	@ (80067b4 <CO_CANopenInit+0x28c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 800675c:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8006760:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <CO_CANopenInit+0x28c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006766:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006768:	4a12      	ldr	r2, [pc, #72]	@ (80067b4 <CO_CANopenInit+0x28c>)
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 800676e:	32a8      	adds	r2, #168	@ 0xa8
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	6849      	ldr	r1, [r1, #4]
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	6840      	ldr	r0, [r0, #4]
 8006778:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800677a:	9406      	str	r4, [sp, #24]
 800677c:	2400      	movs	r4, #0
 800677e:	9405      	str	r4, [sp, #20]
 8006780:	9004      	str	r0, [sp, #16]
 8006782:	2001      	movs	r0, #1
 8006784:	9003      	str	r0, [sp, #12]
 8006786:	9102      	str	r1, [sp, #8]
 8006788:	9201      	str	r2, [sp, #4]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	4663      	mov	r3, ip
 800678e:	4632      	mov	r2, r6
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	4628      	mov	r0, r5
 8006794:	f7fe fb1a 	bl	8004dcc <CO_SYNC_init>
 8006798:	4603      	mov	r3, r0
 800679a:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) { return err; }
 800679c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <CO_CANopenInit+0x282>
 80067a4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067a8:	e000      	b.n	80067ac <CO_CANopenInit+0x284>
            if (err) { return err; }
        }
    }
#endif

    return CO_ERROR_NO;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b4:	200003cc 	.word	0x200003cc

080067b8 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 80067b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ba:	b093      	sub	sp, #76	@ 0x4c
 80067bc:	af06      	add	r7, sp, #24
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d102      	bne.n	80067d2 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80067cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067d0:	e0c3      	b.n	800695a <CO_CANopenInitPDO+0x1a2>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <CO_CANopenInitPDO+0x30>
 80067d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	db03      	blt.n	80067e8 <CO_CANopenInitPDO+0x30>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <CO_CANopenInitPDO+0x3e>
 80067f0:	f06f 0312 	mvn.w	r3, #18
 80067f4:	e0b1      	b.n	800695a <CO_CANopenInitPDO+0x1a2>
 80067f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067fa:	e0ae      	b.n	800695a <CO_CANopenInitPDO+0x1a2>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 80067fc:	4b59      	ldr	r3, [pc, #356]	@ (8006964 <CO_CANopenInitPDO+0x1ac>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	33cc      	adds	r3, #204	@ 0xcc
 8006804:	62fb      	str	r3, [r7, #44]	@ 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8006806:	4b57      	ldr	r3, [pc, #348]	@ (8006964 <CO_CANopenInitPDO+0x1ac>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	33fc      	adds	r3, #252	@ 0xfc
 800680e:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006810:	2300      	movs	r3, #0
 8006812:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006814:	e044      	b.n	80068a0 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 800681a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800681e:	2b03      	cmp	r3, #3
 8006820:	dc09      	bgt.n	8006836 <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8006822:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006826:	3302      	adds	r3, #2
 8006828:	b29b      	uxth	r3, r3
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	b29a      	uxth	r2, r3
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	b29b      	uxth	r3, r3
 8006832:	4413      	add	r3, r2
 8006834:	84bb      	strh	r3, [r7, #36]	@ 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800683a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800683e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	18d5      	adds	r5, r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 800684c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684e:	f103 020c 	add.w	r2, r3, #12
 8006852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006856:	f102 010c 	add.w	r1, r2, #12
 800685a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800685c:	68f9      	ldr	r1, [r7, #12]
 800685e:	6849      	ldr	r1, [r1, #4]
 8006860:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8006862:	3003      	adds	r0, #3
 8006864:	b280      	uxth	r0, r0
 8006866:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8006868:	9405      	str	r4, [sp, #20]
 800686a:	9004      	str	r0, [sp, #16]
 800686c:	9103      	str	r1, [sp, #12]
 800686e:	9202      	str	r2, [sp, #8]
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4633      	mov	r3, r6
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4628      	mov	r0, r5
 800687e:	f7fb ffad 	bl	80027dc <CO_RPDO_init>
 8006882:	4603      	mov	r3, r0
 8006884:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) { return err; }
 8006886:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <CO_CANopenInitPDO+0xdc>
 800688e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006892:	e062      	b.n	800695a <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006894:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006898:	b29b      	uxth	r3, r3
 800689a:	3301      	adds	r3, #1
 800689c:	b29b      	uxth	r3, r3
 800689e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80068a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	ddb6      	ble.n	8006816 <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80068a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006964 <CO_CANopenInitPDO+0x1ac>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80068b2:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 80068b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006964 <CO_CANopenInitPDO+0x1ac>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80068be:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80068c0:	2300      	movs	r3, #0
 80068c2:	837b      	strh	r3, [r7, #26]
 80068c4:	e044      	b.n	8006950 <CO_CANopenInitPDO+0x198>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 80068ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	dc09      	bgt.n	80068e6 <CO_CANopenInitPDO+0x12e>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 80068d2:	8b7b      	ldrh	r3, [r7, #26]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	4413      	add	r3, r2
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80068e4:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80068ee:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	18d5      	adds	r5, r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f103 020c 	add.w	r2, r3, #12
 8006902:	623a      	str	r2, [r7, #32]
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	f102 010c 	add.w	r1, r2, #12
 800690a:	61f9      	str	r1, [r7, #28]
 800690c:	68f9      	ldr	r1, [r7, #12]
 800690e:	6849      	ldr	r1, [r1, #4]
 8006910:	8b78      	ldrh	r0, [r7, #26]
 8006912:	3002      	adds	r0, #2
 8006914:	b280      	uxth	r0, r0
 8006916:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8006918:	9405      	str	r4, [sp, #20]
 800691a:	9004      	str	r0, [sp, #16]
 800691c:	9103      	str	r1, [sp, #12]
 800691e:	9202      	str	r2, [sp, #8]
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	8b3b      	ldrh	r3, [r7, #24]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4633      	mov	r3, r6
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4628      	mov	r0, r5
 800692e:	f7fc fb1f 	bl	8002f70 <CO_TPDO_init>
 8006932:	4603      	mov	r3, r0
 8006934:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) { return err; }
 8006936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <CO_CANopenInitPDO+0x18c>
 800693e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006942:	e00a      	b.n	800695a <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006944:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006948:	b29b      	uxth	r3, r3
 800694a:	3301      	adds	r3, #1
 800694c:	b29b      	uxth	r3, r3
 800694e:	837b      	strh	r3, [r7, #26]
 8006950:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006954:	2b03      	cmp	r3, #3
 8006956:	ddb6      	ble.n	80068c6 <CO_CANopenInitPDO+0x10e>
        }
    }
#endif

    return CO_ERROR_NO;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3734      	adds	r7, #52	@ 0x34
 800695e:	46bd      	mov	sp, r7
 8006960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006962:	bf00      	nop
 8006964:	200003cc 	.word	0x200003cc

08006968 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8006968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696a:	b097      	sub	sp, #92	@ 0x5c
 800696c:	af08      	add	r7, sp, #32
 800696e:	61f8      	str	r0, [r7, #28]
 8006970:	61b9      	str	r1, [r7, #24]
 8006972:	617a      	str	r2, [r7, #20]
 8006974:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8006976:	2300      	movs	r3, #0
 8006978:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fbd0 	bl	8006126 <CO_NMT_getInternalState>
 8006986:	4603      	mov	r3, r0
 8006988:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 800698c:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8006990:	2b7f      	cmp	r3, #127	@ 0x7f
 8006992:	d003      	beq.n	800699c <CO_process+0x34>
 8006994:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006998:	2b05      	cmp	r3, #5
 800699a:	d101      	bne.n	80069a0 <CO_process+0x38>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <CO_process+0x3a>
 80069a0:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80069a2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fe34 	bl	8007616 <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff f966 	bl	8005c84 <CO_LSSslave_process>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	8a5b      	ldrh	r3, [r3, #18]
 80069d0:	847b      	strh	r3, [r7, #34]	@ 0x22
    bool_t LSSslave_configuration = false;
 80069d2:	2300      	movs	r3, #0
 80069d4:	633b      	str	r3, [r7, #48]	@ 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fbb5 	bl	800614a <CO_LSSslave_getState>
 80069e0:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 80069e6:	2301      	movs	r3, #1
 80069e8:	633b      	str	r3, [r7, #48]	@ 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <CO_process+0x92>
 80069f4:	f997 4021 	ldrsb.w	r4, [r7, #33]	@ 0x21
 80069f8:	e000      	b.n	80069fc <CO_process+0x94>
 80069fa:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 80069fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80069fe:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bf14      	ite	ne
 8006a06:	2301      	movne	r3, #1
 8006a08:	2300      	moveq	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8006a0e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006a10:	f240 3303 	movw	r3, #771	@ 0x303
 8006a14:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bf14      	ite	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d107      	bne.n	8006a38 <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	2118      	movs	r1, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fb3c 	bl	80060ac <CO_isError>
 8006a34:	4605      	mov	r5, r0
 8006a36:	e000      	b.n	8006a3a <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 8006a38:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d113      	bne.n	8006a68 <CO_process+0x100>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	211b      	movs	r1, #27
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fb30 	bl	80060ac <CO_isError>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d108      	bne.n	8006a64 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	211c      	movs	r1, #28
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fb27 	bl	80060ac <CO_isError>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <CO_process+0x102>
 8006a68:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 8006a6a:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff fb42 	bl	80060fa <CO_getErrorRegister>
 8006a76:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9306      	str	r3, [sp, #24]
 8006a8c:	9205      	str	r2, [sp, #20]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	9304      	str	r3, [sp, #16]
 8006a92:	9503      	str	r5, [sp, #12]
 8006a94:	2300      	movs	r3, #0
 8006a96:	9302      	str	r3, [sp, #8]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	6979      	ldr	r1, [r7, #20]
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7fe fd66 	bl	8005578 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <CO_process+0x152>
        return reset;
 8006ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ab8:	e047      	b.n	8006b4a <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	69d8      	ldr	r0, [r3, #28]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ac4:	f7f9 ff9a 	bl	80009fc <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	6918      	ldr	r0, [r3, #16]
 8006acc:	f107 0121 	add.w	r1, r7, #33	@ 0x21
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	f7fa fe00 	bl	80016d8 <CO_NMT_process>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006ade:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8006ae2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ae4:	d003      	beq.n	8006aee <CO_process+0x186>
 8006ae6:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d101      	bne.n	8006af2 <CO_process+0x18a>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <CO_process+0x18c>
 8006af2:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006af6:	2300      	movs	r3, #0
 8006af8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006afc:	e011      	b.n	8006b22 <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b06:	21ac      	movs	r1, #172	@ 0xac
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	18d0      	adds	r0, r2, r3
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b14:	f7fd fa4c 	bl	8003fb0 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006b18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0e9      	beq.n	8006afe <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	6958      	ldr	r0, [r3, #20]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b34:	f7fa fb5a 	bl	80011ec <CO_HBconsumer_process>
                                  timerNext_us);
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe fc8b 	bl	800545c <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 8006b46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	373c      	adds	r7, #60	@ 0x3c
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b52 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b088      	sub	sp, #32
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d131      	bne.n	8006bce <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fad9 	bl	8006126 <CO_NMT_getInternalState>
 8006b74:	4603      	mov	r3, r0
 8006b76:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 8006b78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b7e:	d003      	beq.n	8006b88 <CO_process_SYNC+0x36>
 8006b80:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006b84:	2b05      	cmp	r3, #5
 8006b86:	d101      	bne.n	8006b8c <CO_process_SYNC+0x3a>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <CO_process_SYNC+0x3c>
 8006b8c:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006b8e:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	6979      	ldr	r1, [r7, #20]
 8006b9a:	f7fe fa3f 	bl	800501c <CO_SYNC_process>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8006ba2:	7cfb      	ldrb	r3, [r7, #19]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d009      	beq.n	8006bbc <CO_process_SYNC+0x6a>
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	dc0d      	bgt.n	8006bc8 <CO_process_SYNC+0x76>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00d      	beq.n	8006bcc <CO_process_SYNC+0x7a>
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d000      	beq.n	8006bb6 <CO_process_SYNC+0x64>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
                break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8006bb4:	e008      	b.n	8006bc8 <CO_process_SYNC+0x76>
                syncWas = true;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	61fb      	str	r3, [r7, #28]
                break;
 8006bba:	e008      	b.n	8006bce <CO_process_SYNC+0x7c>
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 fcc2 	bl	800754a <CO_CANclearPendingSyncPDOs>
                break;
 8006bc6:	e002      	b.n	8006bce <CO_process_SYNC+0x7c>
                break;
 8006bc8:	bf00      	nop
 8006bca:	e000      	b.n	8006bce <CO_process_SYNC+0x7c>
                break;
 8006bcc:	bf00      	nop
        }
    }

    return syncWas;
 8006bce:	69fb      	ldr	r3, [r7, #28]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d129      	bne.n	8006c42 <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff fa97 	bl	8006126 <CO_NMT_getInternalState>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8006c04:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006c06:	2300      	movs	r3, #0
 8006c08:	82fb      	strh	r3, [r7, #22]
 8006c0a:	e015      	b.n	8006c38 <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c14:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	18d0      	adds	r0, r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	f7fb ff1e 	bl	8002a68 <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3301      	adds	r3, #1
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	82fb      	strh	r3, [r7, #22]
 8006c38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	dde5      	ble.n	8006c0c <CO_process_RPDO+0x34>
 8006c40:	e000      	b.n	8006c44 <CO_process_RPDO+0x6c>
        return;
 8006c42:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b088      	sub	sp, #32
 8006c4e:	af02      	add	r7, sp, #8
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d129      	bne.n	8006cb4 <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fa5e 	bl	8006126 <CO_NMT_getInternalState>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b05      	cmp	r3, #5
 8006c6e:	bf0c      	ite	eq
 8006c70:	2301      	moveq	r3, #1
 8006c72:	2300      	movne	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8006c76:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006c78:	2300      	movs	r3, #0
 8006c7a:	82fb      	strh	r3, [r7, #22]
 8006c7c:	e015      	b.n	8006caa <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c86:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8006c8a:	fb01 f303 	mul.w	r3, r1, r3
 8006c8e:	18d0      	adds	r0, r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	f7fc fb82 	bl	80033a2 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006c9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	82fb      	strh	r3, [r7, #22]
 8006caa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	dde5      	ble.n	8006c7e <CO_process_TPDO+0x34>
 8006cb2:	e000      	b.n	8006cb6 <CO_process_TPDO+0x6c>
        return;
 8006cb4:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006cc4:	4a13      	ldr	r2, [pc, #76]	@ (8006d14 <canopen_app_init+0x58>)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006cce:	f107 0308 	add.w	r3, r7, #8
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff fa49 	bl	800616c <CO_new>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8006d18 <canopen_app_init+0x5c>)
 8006cde:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <canopen_app_init+0x5c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006ce8:	480c      	ldr	r0, [pc, #48]	@ (8006d1c <canopen_app_init+0x60>)
 8006cea:	f006 fc5d 	bl	800d5a8 <puts>
        return 1;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e00c      	b.n	8006d0c <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	480a      	ldr	r0, [pc, #40]	@ (8006d20 <canopen_app_init+0x64>)
 8006cf8:	f006 fbee 	bl	800d4d8 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006cfc:	4b05      	ldr	r3, [pc, #20]	@ (8006d14 <canopen_app_init+0x58>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a05      	ldr	r2, [pc, #20]	@ (8006d18 <canopen_app_init+0x5c>)
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006d06:	f000 f80d 	bl	8006d24 <canopen_app_resetCommunication>
    return 0;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000454 	.word	0x20000454
 8006d18:	20000458 	.word	0x20000458
 8006d1c:	0800e024 	.word	0x0800e024
 8006d20:	0800e044 	.word	0x0800e044

08006d24 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b08f      	sub	sp, #60	@ 0x3c
 8006d28:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006d2a:	487d      	ldr	r0, [pc, #500]	@ (8006f20 <canopen_app_resetCommunication+0x1fc>)
 8006d2c:	f006 fc3c 	bl	800d5a8 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006d30:	4b7c      	ldr	r3, [pc, #496]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f9bc 	bl	80070bc <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006d44:	4b77      	ldr	r3, [pc, #476]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fa88 	bl	8007260 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006d50:	4b74      	ldr	r3, [pc, #464]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a74      	ldr	r2, [pc, #464]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006d56:	6811      	ldr	r1, [r2, #0]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fb8c 	bl	8006478 <CO_CANinit>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	4b71      	ldr	r3, [pc, #452]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006d66:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006d68:	4b70      	ldr	r3, [pc, #448]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8006d72:	4b6e      	ldr	r3, [pc, #440]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006d74:	f993 3000 	ldrsb.w	r3, [r3]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	486d      	ldr	r0, [pc, #436]	@ (8006f30 <canopen_app_resetCommunication+0x20c>)
 8006d7c:	f006 fbac 	bl	800d4d8 <iprintf>
        return 1;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0c8      	b.n	8006f16 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006d84:	4b6b      	ldr	r3, [pc, #428]	@ (8006f34 <canopen_app_resetCommunication+0x210>)
 8006d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d88:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8006d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f34 <canopen_app_resetCommunication+0x210>)
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006d8e:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8006d90:	4b68      	ldr	r3, [pc, #416]	@ (8006f34 <canopen_app_resetCommunication+0x210>)
 8006d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006d94:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8006d96:	4b67      	ldr	r3, [pc, #412]	@ (8006f34 <canopen_app_resetCommunication+0x210>)
 8006d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006d9a:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006d9c:	4b61      	ldr	r3, [pc, #388]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	4b61      	ldr	r3, [pc, #388]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	4b60      	ldr	r3, [pc, #384]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3302      	adds	r3, #2
 8006dac:	f107 0108 	add.w	r1, r7, #8
 8006db0:	f7ff fb8e 	bl	80064d0 <CO_LSSinit>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	4b5c      	ldr	r3, [pc, #368]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006dba:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d008      	beq.n	8006dd8 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006dc6:	4b59      	ldr	r3, [pc, #356]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	485a      	ldr	r0, [pc, #360]	@ (8006f38 <canopen_app_resetCommunication+0x214>)
 8006dd0:	f006 fb82 	bl	800d4d8 <iprintf>
        return 2;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e09e      	b.n	8006f16 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006dd8:	4b53      	ldr	r3, [pc, #332]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	4b52      	ldr	r3, [pc, #328]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	7812      	ldrb	r2, [r2, #0]
 8006de2:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006de8:	4b4e      	ldr	r3, [pc, #312]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	4b53      	ldr	r3, [pc, #332]	@ (8006f3c <canopen_app_resetCommunication+0x218>)
 8006dee:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006df0:	4b4d      	ldr	r3, [pc, #308]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006df2:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	1d3a      	adds	r2, r7, #4
 8006df8:	9207      	str	r2, [sp, #28]
 8006dfa:	9306      	str	r3, [sp, #24]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9305      	str	r3, [sp, #20]
 8006e00:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006e0a:	9303      	str	r3, [sp, #12]
 8006e0c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006e10:	9302      	str	r3, [sp, #8]
 8006e12:	f242 1311 	movw	r3, #8465	@ 0x2111
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2100      	movs	r1, #0
 8006e22:	f7ff fb81 	bl	8006528 <CO_CANopenInit>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4b40      	ldr	r3, [pc, #256]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006e2c:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006e30:	f993 3000 	ldrsb.w	r3, [r3]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01a      	beq.n	8006e6e <canopen_app_resetCommunication+0x14a>
 8006e38:	4b3c      	ldr	r3, [pc, #240]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006e3a:	f993 3000 	ldrsb.w	r3, [r3]
 8006e3e:	f113 0f13 	cmn.w	r3, #19
 8006e42:	d014      	beq.n	8006e6e <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006e44:	4b39      	ldr	r3, [pc, #228]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006e46:	f993 3000 	ldrsb.w	r3, [r3]
 8006e4a:	f113 0f0c 	cmn.w	r3, #12
 8006e4e:	d105      	bne.n	8006e5c <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4619      	mov	r1, r3
 8006e54:	483a      	ldr	r0, [pc, #232]	@ (8006f40 <canopen_app_resetCommunication+0x21c>)
 8006e56:	f006 fb3f 	bl	800d4d8 <iprintf>
 8006e5a:	e006      	b.n	8006e6a <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006e5c:	4b33      	ldr	r3, [pc, #204]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006e5e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e62:	4619      	mov	r1, r3
 8006e64:	4837      	ldr	r0, [pc, #220]	@ (8006f44 <canopen_app_resetCommunication+0x220>)
 8006e66:	f006 fb37 	bl	800d4d8 <iprintf>
        }
        return 3;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e053      	b.n	8006f16 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8006e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	4b2c      	ldr	r3, [pc, #176]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69d9      	ldr	r1, [r3, #28]
 8006e78:	4b30      	ldr	r3, [pc, #192]	@ (8006f3c <canopen_app_resetCommunication+0x218>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	785c      	ldrb	r4, [r3, #1]
 8006e82:	1d3b      	adds	r3, r7, #4
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	4623      	mov	r3, r4
 8006e88:	f7ff fc96 	bl	80067b8 <CO_CANopenInitPDO>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	4b26      	ldr	r3, [pc, #152]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006e92:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006e94:	4b25      	ldr	r3, [pc, #148]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006e96:	f993 3000 	ldrsb.w	r3, [r3]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d014      	beq.n	8006ec8 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006e9e:	4b23      	ldr	r3, [pc, #140]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006ea0:	f993 3000 	ldrsb.w	r3, [r3]
 8006ea4:	f113 0f0c 	cmn.w	r3, #12
 8006ea8:	d105      	bne.n	8006eb6 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4619      	mov	r1, r3
 8006eae:	4824      	ldr	r0, [pc, #144]	@ (8006f40 <canopen_app_resetCommunication+0x21c>)
 8006eb0:	f006 fb12 	bl	800d4d8 <iprintf>
 8006eb4:	e006      	b.n	8006ec4 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f2c <canopen_app_resetCommunication+0x208>)
 8006eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4822      	ldr	r0, [pc, #136]	@ (8006f48 <canopen_app_resetCommunication+0x224>)
 8006ec0:	f006 fb0a 	bl	800d4d8 <iprintf>
        }
        return 4;
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	e026      	b.n	8006f16 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006ec8:	4b17      	ldr	r3, [pc, #92]	@ (8006f28 <canopen_app_resetCommunication+0x204>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f004 f8c4 	bl	800b05c <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006ed4:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8006ede:	481b      	ldr	r0, [pc, #108]	@ (8006f4c <canopen_app_resetCommunication+0x228>)
 8006ee0:	f006 fb62 	bl	800d5a8 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <canopen_app_resetCommunication+0x200>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f8f6 	bl	80070dc <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8006ef0:	4817      	ldr	r0, [pc, #92]	@ (8006f50 <canopen_app_resetCommunication+0x22c>)
 8006ef2:	f006 fb59 	bl	800d5a8 <puts>
    fflush(stdout);
 8006ef6:	4b17      	ldr	r3, [pc, #92]	@ (8006f54 <canopen_app_resetCommunication+0x230>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f006 fa15 	bl	800d32c <fflush>
    time_old = time_current = HAL_GetTick();
 8006f02:	f001 fae3 	bl	80084cc <HAL_GetTick>
 8006f06:	4603      	mov	r3, r0
 8006f08:	4a13      	ldr	r2, [pc, #76]	@ (8006f58 <canopen_app_resetCommunication+0x234>)
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	4b12      	ldr	r3, [pc, #72]	@ (8006f58 <canopen_app_resetCommunication+0x234>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a12      	ldr	r2, [pc, #72]	@ (8006f5c <canopen_app_resetCommunication+0x238>)
 8006f12:	6013      	str	r3, [r2, #0]
    return 0;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd90      	pop	{r4, r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	0800e06c 	.word	0x0800e06c
 8006f24:	20000458 	.word	0x20000458
 8006f28:	20000454 	.word	0x20000454
 8006f2c:	20000464 	.word	0x20000464
 8006f30:	0800e094 	.word	0x0800e094
 8006f34:	20000000 	.word	0x20000000
 8006f38:	0800e0bc 	.word	0x0800e0bc
 8006f3c:	200003cc 	.word	0x200003cc
 8006f40:	0800e0e8 	.word	0x0800e0e8
 8006f44:	0800e110 	.word	0x0800e110
 8006f48:	0800e13c 	.word	0x0800e13c
 8006f4c:	0800e164 	.word	0x0800e164
 8006f50:	0800e18c 	.word	0x0800e18c
 8006f54:	200003e8 	.word	0x200003e8
 8006f58:	20000460 	.word	0x20000460
 8006f5c:	2000045c 	.word	0x2000045c

08006f60 <canopen_app_process>:

void
canopen_app_process() {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8006f66:	f001 fab1 	bl	80084cc <HAL_GetTick>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8007020 <canopen_app_process+0xc0>)
 8006f6e:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8006f70:	4b2b      	ldr	r3, [pc, #172]	@ (8007020 <canopen_app_process+0xc0>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	4b2b      	ldr	r3, [pc, #172]	@ (8007024 <canopen_app_process+0xc4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d04c      	beq.n	8007016 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8006f7c:	4b28      	ldr	r3, [pc, #160]	@ (8007020 <canopen_app_process+0xc0>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	4b28      	ldr	r3, [pc, #160]	@ (8007024 <canopen_app_process+0xc4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8006f90:	4b23      	ldr	r3, [pc, #140]	@ (8007020 <canopen_app_process+0xc0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a23      	ldr	r2, [pc, #140]	@ (8007024 <canopen_app_process+0xc4>)
 8006f96:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8006f98:	4b23      	ldr	r3, [pc, #140]	@ (8007028 <canopen_app_process+0xc8>)
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f7ff fce1 	bl	8006968 <CO_process>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8006faa:	4b1f      	ldr	r3, [pc, #124]	@ (8007028 <canopen_app_process+0xc8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	7a5a      	ldrb	r2, [r3, #9]
 8006fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800702c <canopen_app_process+0xcc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	09d2      	lsrs	r2, r2, #7
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8006fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8007028 <canopen_app_process+0xc8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc2:	7a9a      	ldrb	r2, [r3, #10]
 8006fc4:	4b19      	ldr	r3, [pc, #100]	@ (800702c <canopen_app_process+0xcc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	09d2      	lsrs	r2, r2, #7
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d118      	bne.n	8007006 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8006fd4:	4b15      	ldr	r3, [pc, #84]	@ (800702c <canopen_app_process+0xcc>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f004 f8b6 	bl	800b14c <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006fe0:	4b12      	ldr	r3, [pc, #72]	@ (800702c <canopen_app_process+0xcc>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 f869 	bl	80070bc <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8006fea:	4b0f      	ldr	r3, [pc, #60]	@ (8007028 <canopen_app_process+0xc8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff f9e3 	bl	80063ba <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8006ff4:	480e      	ldr	r0, [pc, #56]	@ (8007030 <canopen_app_process+0xd0>)
 8006ff6:	f006 fad7 	bl	800d5a8 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800702c <canopen_app_process+0xcc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7ff fe5c 	bl	8006cbc <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8007004:	e007      	b.n	8007016 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d104      	bne.n	8007016 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 800700c:	4809      	ldr	r0, [pc, #36]	@ (8007034 <canopen_app_process+0xd4>)
 800700e:	f006 facb 	bl	800d5a8 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8007012:	f001 fb80 	bl	8008716 <HAL_NVIC_SystemReset>
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000460 	.word	0x20000460
 8007024:	2000045c 	.word	0x2000045c
 8007028:	20000458 	.word	0x20000458
 800702c:	20000454 	.word	0x20000454
 8007030:	0800e1a8 	.word	0x0800e1a8
 8007034:	0800e1d0 	.word	0x0800e1d0

08007038 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 800703e:	4b1e      	ldr	r3, [pc, #120]	@ (80070b8 <canopen_app_interrupt+0x80>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007044:	f3ef 8210 	mrs	r2, PRIMASK
 8007048:	607a      	str	r2, [r7, #4]
  return(result);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800704e:	b672      	cpsid	i
}
 8007050:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007052:	4b19      	ldr	r3, [pc, #100]	@ (80070b8 <canopen_app_interrupt+0x80>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d120      	bne.n	800709e <canopen_app_interrupt+0x66>
 800705c:	4b16      	ldr	r3, [pc, #88]	@ (80070b8 <canopen_app_interrupt+0x80>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01a      	beq.n	800709e <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 800706c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007070:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007072:	4b11      	ldr	r3, [pc, #68]	@ (80070b8 <canopen_app_interrupt+0x80>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff fd69 	bl	8006b52 <CO_process_SYNC>
 8007080:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007082:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <canopen_app_interrupt+0x80>)
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	2300      	movs	r3, #0
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	68f9      	ldr	r1, [r7, #12]
 800708c:	f7ff fda4 	bl	8006bd8 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007090:	4b09      	ldr	r3, [pc, #36]	@ (80070b8 <canopen_app_interrupt+0x80>)
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	2300      	movs	r3, #0
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	68f9      	ldr	r1, [r7, #12]
 800709a:	f7ff fdd6 	bl	8006c4a <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 800709e:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <canopen_app_interrupt+0x80>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a6:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f383 8810 	msr	PRIMASK, r3
}
 80070ae:	bf00      	nop
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000458 	.word	0x20000458

080070bc <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 fce5 	bl	8008a9e <HAL_FDCAN_Stop>
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#endif
    }
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 fcab 	bl	8008a4e <HAL_FDCAN_Start>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d102      	bne.n	8007104 <CO_CANsetNormalMode+0x28>
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#endif
        {
            CANmodule->CANnormal = true;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	615a      	str	r2, [r3, #20]
        }
    }
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <CO_CANmodule_init+0x20>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <CO_CANmodule_init+0x20>
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800712c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007130:	e08e      	b.n	8007250 <CO_CANmodule_init+0x144>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8007138:	4a47      	ldr	r2, [pc, #284]	@ (8007258 <CO_CANmodule_init+0x14c>)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	887a      	ldrh	r2, [r7, #2]
 8007148:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a3a      	ldr	r2, [r7, #32]
 800714e:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007154:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007180:	2300      	movs	r3, #0
 8007182:	82fb      	strh	r3, [r7, #22]
 8007184:	e02b      	b.n	80071de <CO_CANmodule_init+0xd2>
        rxArray[i].ident = 0U;
 8007186:	8afa      	ldrh	r2, [r7, #22]
 8007188:	4613      	mov	r3, r2
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4413      	add	r3, r2
 8007196:	2200      	movs	r2, #0
 8007198:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 800719a:	8afa      	ldrh	r2, [r7, #22]
 800719c:	4613      	mov	r3, r2
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	461a      	mov	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4413      	add	r3, r2
 80071aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071ae:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 80071b0:	8afa      	ldrh	r2, [r7, #22]
 80071b2:	4613      	mov	r3, r2
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4413      	add	r3, r2
 80071c0:	2200      	movs	r2, #0
 80071c2:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 80071c4:	8afa      	ldrh	r2, [r7, #22]
 80071c6:	4613      	mov	r3, r2
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4413      	add	r3, r2
 80071d4:	2200      	movs	r2, #0
 80071d6:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 80071d8:	8afb      	ldrh	r3, [r7, #22]
 80071da:	3301      	adds	r3, #1
 80071dc:	82fb      	strh	r3, [r7, #22]
 80071de:	8afa      	ldrh	r2, [r7, #22]
 80071e0:	887b      	ldrh	r3, [r7, #2]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d3cf      	bcc.n	8007186 <CO_CANmodule_init+0x7a>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 80071e6:	2300      	movs	r3, #0
 80071e8:	82bb      	strh	r3, [r7, #20]
 80071ea:	e00c      	b.n	8007206 <CO_CANmodule_init+0xfa>
        txArray[i].bufferFull = false;
 80071ec:	8aba      	ldrh	r2, [r7, #20]
 80071ee:	4613      	mov	r3, r2
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	4413      	add	r3, r2
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	461a      	mov	r2, r3
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	4413      	add	r3, r2
 80071fc:	2200      	movs	r2, #0
 80071fe:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8007200:	8abb      	ldrh	r3, [r7, #20]
 8007202:	3301      	adds	r3, #1
 8007204:	82bb      	strh	r3, [r7, #20]
 8007206:	8aba      	ldrh	r2, [r7, #20]
 8007208:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800720a:	429a      	cmp	r2, r3
 800720c:	d3ee      	bcc.n	80071ec <CO_CANmodule_init+0xe0>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	4798      	blx	r3
     * Accept non-matching standard ID messages
     * Reject non-matching extended ID messages
     */

#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ConfigGlobalFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT,
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6898      	ldr	r0, [r3, #8]
 8007218:	2300      	movs	r3, #0
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	2300      	movs	r3, #0
 800721e:	2202      	movs	r2, #2
 8007220:	2100      	movs	r1, #0
 8007222:	f001 fbe3 	bl	80089ec <HAL_FDCAN_ConfigGlobalFilter>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <CO_CANmodule_init+0x126>
                                     FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800722c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007230:	e00e      	b.n	8007250 <CO_CANmodule_init+0x144>
    }
#endif
    /* Enable notifications */
    /* Activate the CAN notification interrupts */
#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle,
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800723a:	4908      	ldr	r1, [pc, #32]	@ (800725c <CO_CANmodule_init+0x150>)
 800723c:	4618      	mov	r0, r3
 800723e:	f001 fdfd 	bl	8008e3c <HAL_FDCAN_ActivateNotification>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <CO_CANmodule_init+0x142>
                                           | FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_FIFO_EMPTY | FDCAN_IT_BUS_OFF
                                           | FDCAN_IT_ARB_PROTOCOL_ERROR | FDCAN_IT_DATA_PROTOCOL_ERROR
                                           | FDCAN_IT_ERROR_PASSIVE | FDCAN_IT_ERROR_WARNING,
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800724c:	e000      	b.n	8007250 <CO_CANmodule_init+0x144>
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20000468 	.word	0x20000468
 800725c:	006e0289 	.word	0x006e0289

08007260 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d009      	beq.n	8007282 <CO_CANmodule_disable+0x22>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fc0e 	bl	8008a9e <HAL_FDCAN_Stop>

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
#endif
    }
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	4603      	mov	r3, r0
 800729c:	817b      	strh	r3, [r7, #10]
 800729e:	460b      	mov	r3, r1
 80072a0:	813b      	strh	r3, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80072a6:	2300      	movs	r3, #0
 80072a8:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d03c      	beq.n	800732a <CO_CANrxBufferInit+0x9e>
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d039      	beq.n	800732a <CO_CANrxBufferInit+0x9e>
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d036      	beq.n	800732a <CO_CANrxBufferInit+0x9e>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	891b      	ldrh	r3, [r3, #8]
 80072c0:	897a      	ldrh	r2, [r7, #10]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d231      	bcs.n	800732a <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6859      	ldr	r1, [r3, #4]
 80072ca:	897a      	ldrh	r2, [r7, #10]
 80072cc:	4613      	mov	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072dc:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072e2:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 80072e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80072e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ec:	b21b      	sxth	r3, r3
 80072ee:	6a3a      	ldr	r2, [r7, #32]
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	d001      	beq.n	80072f8 <CO_CANrxBufferInit+0x6c>
 80072f4:	4a13      	ldr	r2, [pc, #76]	@ (8007344 <CO_CANrxBufferInit+0xb8>)
 80072f6:	e000      	b.n	80072fa <CO_CANrxBufferInit+0x6e>
 80072f8:	2200      	movs	r2, #0
 80072fa:	4313      	orrs	r3, r2
 80072fc:	b21b      	sxth	r3, r3
 80072fe:	b29a      	uxth	r2, r3
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800730c:	b21b      	sxth	r3, r3
 800730e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007316:	b21b      	sxth	r3, r3
 8007318:	b29a      	uxth	r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d004      	beq.n	8007330 <CO_CANrxBufferInit+0xa4>
            __NOP();
 8007326:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007328:	e002      	b.n	8007330 <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800732a:	23ff      	movs	r3, #255	@ 0xff
 800732c:	75fb      	strb	r3, [r7, #23]
 800732e:	e000      	b.n	8007332 <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007330:	bf00      	nop
    }

    return ret;
 8007332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007336:	4618      	mov	r0, r3
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	ffff8000 	.word	0xffff8000

08007348 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	817b      	strh	r3, [r7, #10]
 8007356:	4613      	mov	r3, r2
 8007358:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d024      	beq.n	80073ae <CO_CANtxBufferInit+0x66>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8a1b      	ldrh	r3, [r3, #16]
 8007368:	897a      	ldrh	r2, [r7, #10]
 800736a:	429a      	cmp	r2, r3
 800736c:	d21f      	bcs.n	80073ae <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68d9      	ldr	r1, [r3, #12]
 8007372:	897a      	ldrh	r2, [r7, #10]
 8007374:	4613      	mov	r3, r2
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	4413      	add	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	440b      	add	r3, r1
 800737e:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8007380:	893b      	ldrh	r3, [r7, #8]
 8007382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	2a00      	cmp	r2, #0
 800738a:	d002      	beq.n	8007392 <CO_CANtxBufferInit+0x4a>
 800738c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007390:	e000      	b.n	8007394 <CO_CANtxBufferInit+0x4c>
 8007392:	2200      	movs	r2, #0
 8007394:	431a      	orrs	r2, r3
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80073a0:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2200      	movs	r2, #0
 80073a6:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ac:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 80073ae:	697b      	ldr	r3, [r7, #20]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]

    /* Check if TX FIFO is ready to accept more messages */
#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_TxHeaderTypeDef tx_hdr;
    if (HAL_FDCAN_GetTxFifoFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 fd21 	bl	8008e18 <HAL_FDCAN_GetTxFifoFreeLevel>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d06c      	beq.n	80074b6 <prv_send_can_message+0xfa>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073e4:	4a36      	ldr	r2, [pc, #216]	@ (80074c0 <prv_send_can_message+0x104>)
 80073e6:	6013      	str	r3, [r2, #0]
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	039b      	lsls	r3, r3, #14
 80073ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073f2:	4a33      	ldr	r2, [pc, #204]	@ (80074c0 <prv_send_can_message+0x104>)
 80073f4:	6093      	str	r3, [r2, #8]
        tx_hdr.IdType = FDCAN_STANDARD_ID;
 80073f6:	4b32      	ldr	r3, [pc, #200]	@ (80074c0 <prv_send_can_message+0x104>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	605a      	str	r2, [r3, #4]
        tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
 80073fc:	4b30      	ldr	r3, [pc, #192]	@ (80074c0 <prv_send_can_message+0x104>)
 80073fe:	2200      	movs	r2, #0
 8007400:	619a      	str	r2, [r3, #24]
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 8007402:	4b2f      	ldr	r3, [pc, #188]	@ (80074c0 <prv_send_can_message+0x104>)
 8007404:	2200      	movs	r2, #0
 8007406:	615a      	str	r2, [r3, #20]
        tx_hdr.MessageMarker = 0;
 8007408:	4b2d      	ldr	r3, [pc, #180]	@ (80074c0 <prv_send_can_message+0x104>)
 800740a:	2200      	movs	r2, #0
 800740c:	621a      	str	r2, [r3, #32]
        tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800740e:	4b2c      	ldr	r3, [pc, #176]	@ (80074c0 <prv_send_can_message+0x104>)
 8007410:	2200      	movs	r2, #0
 8007412:	611a      	str	r2, [r3, #16]
        tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007414:	4b2a      	ldr	r3, [pc, #168]	@ (80074c0 <prv_send_can_message+0x104>)
 8007416:	2200      	movs	r2, #0
 8007418:	61da      	str	r2, [r3, #28]

        switch (buffer->DLC) {
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	791b      	ldrb	r3, [r3, #4]
 800741e:	2b08      	cmp	r3, #8
 8007420:	d838      	bhi.n	8007494 <prv_send_can_message+0xd8>
 8007422:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <prv_send_can_message+0x6c>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	0800744d 	.word	0x0800744d
 800742c:	08007455 	.word	0x08007455
 8007430:	0800745d 	.word	0x0800745d
 8007434:	08007465 	.word	0x08007465
 8007438:	0800746d 	.word	0x0800746d
 800743c:	08007475 	.word	0x08007475
 8007440:	0800747d 	.word	0x0800747d
 8007444:	08007485 	.word	0x08007485
 8007448:	0800748d 	.word	0x0800748d
            case 0:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_0;
 800744c:	4b1c      	ldr	r3, [pc, #112]	@ (80074c0 <prv_send_can_message+0x104>)
 800744e:	2200      	movs	r2, #0
 8007450:	60da      	str	r2, [r3, #12]
                break;
 8007452:	e020      	b.n	8007496 <prv_send_can_message+0xda>
            case 1:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_1;
 8007454:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <prv_send_can_message+0x104>)
 8007456:	2201      	movs	r2, #1
 8007458:	60da      	str	r2, [r3, #12]
                break;
 800745a:	e01c      	b.n	8007496 <prv_send_can_message+0xda>
            case 2:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_2;
 800745c:	4b18      	ldr	r3, [pc, #96]	@ (80074c0 <prv_send_can_message+0x104>)
 800745e:	2202      	movs	r2, #2
 8007460:	60da      	str	r2, [r3, #12]
                break;
 8007462:	e018      	b.n	8007496 <prv_send_can_message+0xda>
            case 3:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_3;
 8007464:	4b16      	ldr	r3, [pc, #88]	@ (80074c0 <prv_send_can_message+0x104>)
 8007466:	2203      	movs	r2, #3
 8007468:	60da      	str	r2, [r3, #12]
                break;
 800746a:	e014      	b.n	8007496 <prv_send_can_message+0xda>
            case 4:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_4;
 800746c:	4b14      	ldr	r3, [pc, #80]	@ (80074c0 <prv_send_can_message+0x104>)
 800746e:	2204      	movs	r2, #4
 8007470:	60da      	str	r2, [r3, #12]
                break;
 8007472:	e010      	b.n	8007496 <prv_send_can_message+0xda>
            case 5:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_5;
 8007474:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <prv_send_can_message+0x104>)
 8007476:	2205      	movs	r2, #5
 8007478:	60da      	str	r2, [r3, #12]
                break;
 800747a:	e00c      	b.n	8007496 <prv_send_can_message+0xda>
            case 6:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_6;
 800747c:	4b10      	ldr	r3, [pc, #64]	@ (80074c0 <prv_send_can_message+0x104>)
 800747e:	2206      	movs	r2, #6
 8007480:	60da      	str	r2, [r3, #12]
                break;
 8007482:	e008      	b.n	8007496 <prv_send_can_message+0xda>
            case 7:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_7;
 8007484:	4b0e      	ldr	r3, [pc, #56]	@ (80074c0 <prv_send_can_message+0x104>)
 8007486:	2207      	movs	r2, #7
 8007488:	60da      	str	r2, [r3, #12]
                break;
 800748a:	e004      	b.n	8007496 <prv_send_can_message+0xda>
            case 8:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_8;
 800748c:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <prv_send_can_message+0x104>)
 800748e:	2208      	movs	r2, #8
 8007490:	60da      	str	r2, [r3, #12]
                break;
 8007492:	e000      	b.n	8007496 <prv_send_can_message+0xda>
            default: /* Hard error... */
                break;
 8007494:	bf00      	nop
        }

        /* Now add message to FIFO. Should not fail */
        success =
            HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6898      	ldr	r0, [r3, #8]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	3305      	adds	r3, #5
 80074a0:	461a      	mov	r2, r3
 80074a2:	4907      	ldr	r1, [pc, #28]	@ (80074c0 <prv_send_can_message+0x104>)
 80074a4:	f001 fb6b 	bl	8008b7e <HAL_FDCAN_AddMessageToTxFifoQ>
 80074a8:	4603      	mov	r3, r0
            == HAL_OK;
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bf0c      	ite	eq
 80074ae:	2301      	moveq	r3, #1
 80074b0:	2300      	movne	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
        success =
 80074b4:	73fb      	strb	r3, [r7, #15]
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
                                       &TxMailboxNum)
                  == HAL_OK;
    }
#endif
    return success;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	2000046c 	.word	0x2000046c

080074c4 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00c      	beq.n	80074f4 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d106      	bne.n	80074f0 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	8a5b      	ldrh	r3, [r3, #18]
 80074e6:	f043 0308 	orr.w	r3, r3, #8
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 80074f0:	23f7      	movs	r3, #247	@ 0xf7
 80074f2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f4:	f3ef 8310 	mrs	r3, PRIMASK
 80074f8:	613b      	str	r3, [r7, #16]
  return(result);
 80074fa:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007500:	b672      	cpsid	i
}
 8007502:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff ff58 	bl	80073bc <prv_send_can_message>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	61da      	str	r2, [r3, #28]
 800751a:	e009      	b.n	8007530 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2201      	movs	r2, #1
 8007520:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007526:	b29b      	uxth	r3, r3
 8007528:	3301      	adds	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f383 8810 	msr	PRIMASK, r3
}
 800753c:	bf00      	nop

    return err;
 800753e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 800754a:	b480      	push	{r7}
 800754c:	b087      	sub	sp, #28
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007556:	f3ef 8310 	mrs	r3, PRIMASK
 800755a:	60fb      	str	r3, [r7, #12]
  return(result);
 800755c:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007562:	b672      	cpsid	i
}
 8007564:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007574:	2301      	movs	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d032      	beq.n	80075e8 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8a1b      	ldrh	r3, [r3, #16]
 8007586:	827b      	strh	r3, [r7, #18]
 8007588:	e02b      	b.n	80075e2 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68d9      	ldr	r1, [r3, #12]
 800758e:	8a7a      	ldrh	r2, [r7, #18]
 8007590:	4613      	mov	r3, r2
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	4413      	add	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	440b      	add	r3, r1
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01d      	beq.n	80075dc <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68d9      	ldr	r1, [r3, #12]
 80075a4:	8a7a      	ldrh	r2, [r7, #18]
 80075a6:	4613      	mov	r3, r2
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	4413      	add	r3, r2
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	440b      	add	r3, r1
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d012      	beq.n	80075dc <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68d9      	ldr	r1, [r3, #12]
 80075ba:	8a7a      	ldrh	r2, [r7, #18]
 80075bc:	4613      	mov	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4413      	add	r3, r2
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	440b      	add	r3, r1
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	849a      	strh	r2, [r3, #36]	@ 0x24
                    tpdoDeleted = 2U;
 80075d8:	2302      	movs	r3, #2
 80075da:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80075dc:	8a7b      	ldrh	r3, [r7, #18]
 80075de:	3b01      	subs	r3, #1
 80075e0:	827b      	strh	r3, [r7, #18]
 80075e2:	8a7b      	ldrh	r3, [r7, #18]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1d0      	bne.n	800758a <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f383 8810 	msr	PRIMASK, r3
}
 80075f4:	bf00      	nop
    if (tpdoDeleted) {
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8a5b      	ldrh	r3, [r3, #18]
 8007600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007604:	b29a      	uxth	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	825a      	strh	r2, [r3, #18]
    }
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]
    // CANOpen just care about Bus_off, Warning, Passive and Overflow
    // I didn't find overflow error register in STM32, if you find it please let me know

#ifdef CO_STM32_FDCAN_Driver

    err = ((FDCAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->PSR
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007630:	60bb      	str	r3, [r7, #8]
          & (FDCAN_PSR_BO | FDCAN_PSR_EW | FDCAN_PSR_EP);

    if (CANmodule->errOld != err) {
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	429a      	cmp	r2, r3
 800763a:	d02e      	beq.n	800769a <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8a5b      	ldrh	r3, [r3, #18]
 8007640:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & FDCAN_PSR_BO) {
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8007652:	89fb      	ldrh	r3, [r7, #14]
 8007654:	f043 0304 	orr.w	r3, r3, #4
 8007658:	81fb      	strh	r3, [r7, #14]
 800765a:	e01b      	b.n	8007694 <CO_CANmodule_process+0x7e>
            // In this driver we expect that the controller is automatically handling the protocol exceptions.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 800765c:	89fb      	ldrh	r3, [r7, #14]
 800765e:	f423 7341 	bic.w	r3, r3, #772	@ 0x304
 8007662:	f023 0303 	bic.w	r3, r3, #3
 8007666:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & FDCAN_PSR_EW) {
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8007672:	89fb      	ldrh	r3, [r7, #14]
 8007674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007678:	f043 0301 	orr.w	r3, r3, #1
 800767c:	81fb      	strh	r3, [r7, #14]
            }

            if (err & FDCAN_PSR_EP) {
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8007688:	89fb      	ldrh	r3, [r7, #14]
 800768a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800768e:	f043 0302 	orr.w	r3, r3, #2
 8007692:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	89fa      	ldrh	r2, [r7, #14]
 8007698:	825a      	strh	r2, [r3, #18]

        CANmodule->CANerrorStatus = status;
    }

#endif
}
 800769a:	bf00      	nop
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08c      	sub	sp, #48	@ 0x30
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 80076b4:	2300      	movs	r3, #0
 80076b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80076be:	f107 0314 	add.w	r3, r7, #20
 80076c2:	3305      	adds	r3, #5
 80076c4:	4a47      	ldr	r2, [pc, #284]	@ (80077e4 <prv_read_can_received_msg+0x13c>)
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f001 fa9d 	bl	8008c08 <HAL_FDCAN_GetRxMessage>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 8082 	bne.w	80077da <prv_read_can_received_msg+0x132>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 80076d6:	4b43      	ldr	r3, [pc, #268]	@ (80077e4 <prv_read_can_received_msg+0x13c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a42      	ldr	r2, [pc, #264]	@ (80077e4 <prv_read_can_received_msg+0x13c>)
 80076dc:	6892      	ldr	r2, [r2, #8]
 80076de:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80076e2:	d102      	bne.n	80076ea <prv_read_can_received_msg+0x42>
 80076e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80076e8:	e000      	b.n	80076ec <prv_read_can_received_msg+0x44>
 80076ea:	2200      	movs	r2, #0
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
    switch (rx_hdr.DataLength) {
 80076f0:	4b3c      	ldr	r3, [pc, #240]	@ (80077e4 <prv_read_can_received_msg+0x13c>)
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d830      	bhi.n	800775a <prv_read_can_received_msg+0xb2>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <prv_read_can_received_msg+0x58>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007725 	.word	0x08007725
 8007704:	0800772b 	.word	0x0800772b
 8007708:	08007731 	.word	0x08007731
 800770c:	08007737 	.word	0x08007737
 8007710:	0800773d 	.word	0x0800773d
 8007714:	08007743 	.word	0x08007743
 8007718:	08007749 	.word	0x08007749
 800771c:	0800774f 	.word	0x0800774f
 8007720:	08007755 	.word	0x08007755
        case FDCAN_DLC_BYTES_0:
            rcvMsg.dlc = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	763b      	strb	r3, [r7, #24]
            break;
 8007728:	e01a      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        case FDCAN_DLC_BYTES_1:
            rcvMsg.dlc = 1;
 800772a:	2301      	movs	r3, #1
 800772c:	763b      	strb	r3, [r7, #24]
            break;
 800772e:	e017      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        case FDCAN_DLC_BYTES_2:
            rcvMsg.dlc = 2;
 8007730:	2302      	movs	r3, #2
 8007732:	763b      	strb	r3, [r7, #24]
            break;
 8007734:	e014      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        case FDCAN_DLC_BYTES_3:
            rcvMsg.dlc = 3;
 8007736:	2303      	movs	r3, #3
 8007738:	763b      	strb	r3, [r7, #24]
            break;
 800773a:	e011      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        case FDCAN_DLC_BYTES_4:
            rcvMsg.dlc = 4;
 800773c:	2304      	movs	r3, #4
 800773e:	763b      	strb	r3, [r7, #24]
            break;
 8007740:	e00e      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        case FDCAN_DLC_BYTES_5:
            rcvMsg.dlc = 5;
 8007742:	2305      	movs	r3, #5
 8007744:	763b      	strb	r3, [r7, #24]
            break;
 8007746:	e00b      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        case FDCAN_DLC_BYTES_6:
            rcvMsg.dlc = 6;
 8007748:	2306      	movs	r3, #6
 800774a:	763b      	strb	r3, [r7, #24]
            break;
 800774c:	e008      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        case FDCAN_DLC_BYTES_7:
            rcvMsg.dlc = 7;
 800774e:	2307      	movs	r3, #7
 8007750:	763b      	strb	r3, [r7, #24]
            break;
 8007752:	e005      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        case FDCAN_DLC_BYTES_8:
            rcvMsg.dlc = 8;
 8007754:	2308      	movs	r3, #8
 8007756:	763b      	strb	r3, [r7, #24]
            break;
 8007758:	e002      	b.n	8007760 <prv_read_can_received_msg+0xb8>
        default:
            rcvMsg.dlc = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	763b      	strb	r3, [r7, #24]
            break; /* Invalid length when more than 8 */
 800775e:	bf00      	nop
    }
    rcvMsgIdent = rcvMsg.ident;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8007764:	4b20      	ldr	r3, [pc, #128]	@ (80077e8 <prv_read_can_received_msg+0x140>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <prv_read_can_received_msg+0xca>
        __BKPT(0);
 800776e:	be00      	bkpt	0x0000
 8007770:	e01f      	b.n	80077b2 <prv_read_can_received_msg+0x10a>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8007772:	4b1d      	ldr	r3, [pc, #116]	@ (80077e8 <prv_read_can_received_msg+0x140>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800777a:	4b1b      	ldr	r3, [pc, #108]	@ (80077e8 <prv_read_can_received_msg+0x140>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	891b      	ldrh	r3, [r3, #8]
 8007780:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007782:	e013      	b.n	80077ac <prv_read_can_received_msg+0x104>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8007784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	4053      	eors	r3, r2
 800778e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007790:	8852      	ldrh	r2, [r2, #2]
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <prv_read_can_received_msg+0xf8>
                messageFound = 1;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                break;
 800779e:	e008      	b.n	80077b2 <prv_read_can_received_msg+0x10a>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80077a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80077a2:	3b01      	subs	r3, #1
 80077a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	330c      	adds	r3, #12
 80077aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e8      	bne.n	8007784 <prv_read_can_received_msg+0xdc>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 80077b2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d010      	beq.n	80077dc <prv_read_can_received_msg+0x134>
 80077ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00d      	beq.n	80077dc <prv_read_can_received_msg+0x134>
 80077c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <prv_read_can_received_msg+0x134>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 80077c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ce:	6852      	ldr	r2, [r2, #4]
 80077d0:	f107 0114 	add.w	r1, r7, #20
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	e000      	b.n	80077dc <prv_read_can_received_msg+0x134>
        return;
 80077da:	bf00      	nop
    }
}
 80077dc:	3730      	adds	r7, #48	@ 0x30
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000490 	.word	0x20000490
 80077e8:	20000468 	.word	0x20000468

080077ec <HAL_FDCAN_RxFifo0Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <HAL_FDCAN_RxFifo0Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	2140      	movs	r1, #64	@ 0x40
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff ff4f 	bl	80076a8 <prv_read_can_received_msg>
    }
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_FDCAN_RxFifo1Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo1ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo1ITs) {
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
    if (RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) {
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d004      	beq.n	8007830 <HAL_FDCAN_RxFifo1Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO1, RxFifo1ITs);
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	2141      	movs	r1, #65	@ 0x41
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff ff3c 	bl	80076a8 <prv_read_can_received_msg>
    }
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef* hfdcan, uint32_t BufferIndexes) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
    CANModule_local->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8007842:	4b2c      	ldr	r3, [pc, #176]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2200      	movs	r2, #0
 8007848:	621a      	str	r2, [r3, #32]
    CANModule_local->bufferInhibitFlag = false;            /* Clear flag from previous message */
 800784a:	4b2a      	ldr	r3, [pc, #168]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2200      	movs	r2, #0
 8007850:	61da      	str	r2, [r3, #28]
    if (CANModule_local->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8007852:	4b28      	ldr	r3, [pc, #160]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d045      	beq.n	80078ea <HAL_FDCAN_TxBufferCompleteCallback+0xb2>
        CO_CANtx_t* buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 800785e:	4b25      	ldr	r3, [pc, #148]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	617b      	str	r3, [r7, #20]
         * This function is always called from interrupt,
         * however to make sure no preemption can happen, interrupts are anyway locked
         * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
         *  then no need to lock interrupts..)
         */
        CO_LOCK_CAN_SEND(CANModule_local);
 8007866:	4b23      	ldr	r3, [pc, #140]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8007868:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786a:	f3ef 8210 	mrs	r2, PRIMASK
 800786e:	60fa      	str	r2, [r7, #12]
  return(result);
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007874:	b672      	cpsid	i
}
 8007876:	bf00      	nop
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8007878:	4b1e      	ldr	r3, [pc, #120]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	8a1b      	ldrh	r3, [r3, #16]
 800787e:	827b      	strh	r3, [r7, #18]
 8007880:	e021      	b.n	80078c6 <HAL_FDCAN_TxBufferCompleteCallback+0x8e>
            /* Try to send message */
            if (buffer->bufferFull) {
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d017      	beq.n	80078ba <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                if (prv_send_can_message(CANModule_local, buffer)) {
 800788a:	4b1a      	ldr	r3, [pc, #104]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6979      	ldr	r1, [r7, #20]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fd93 	bl	80073bc <prv_send_can_message>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00e      	beq.n	80078ba <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                    buffer->bufferFull = false;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2200      	movs	r2, #0
 80078a0:	611a      	str	r2, [r3, #16]
                    CANModule_local->CANtxCount--;
 80078a2:	4b14      	ldr	r3, [pc, #80]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80078a8:	b292      	uxth	r2, r2
 80078aa:	3a01      	subs	r2, #1
 80078ac:	b292      	uxth	r2, r2
 80078ae:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 80078b0:	4b10      	ldr	r3, [pc, #64]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	6952      	ldr	r2, [r2, #20]
 80078b8:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 80078ba:	8a7b      	ldrh	r3, [r7, #18]
 80078bc:	3b01      	subs	r3, #1
 80078be:	827b      	strh	r3, [r7, #18]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	3318      	adds	r3, #24
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	8a7b      	ldrh	r3, [r7, #18]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1da      	bne.n	8007882 <HAL_FDCAN_TxBufferCompleteCallback+0x4a>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 80078cc:	8a7b      	ldrh	r3, [r7, #18]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d103      	bne.n	80078da <HAL_FDCAN_TxBufferCompleteCallback+0xa2>
            CANModule_local->CANtxCount = 0U;
 80078d2:	4b08      	ldr	r3, [pc, #32]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	849a      	strh	r2, [r3, #36]	@ 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 80078da:	4b06      	ldr	r3, [pc, #24]	@ (80078f4 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f383 8810 	msr	PRIMASK, r3
}
 80078e8:	bf00      	nop
    }
}
 80078ea:	bf00      	nop
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000468 	.word	0x20000468

080078f8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM6_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a08      	ldr	r2, [pc, #32]	@ (8007928 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d101      	bne.n	800790e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800790a:	f000 fdcd 	bl	80084a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  // Handle CANOpen app interrupts
  if (htim == canopenNodeSTM32->timerHandle) {
 800790e:	4b07      	ldr	r3, [pc, #28]	@ (800792c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	d101      	bne.n	800791e <HAL_TIM_PeriodElapsedCallback+0x26>
      canopen_app_interrupt();
 800791a:	f7ff fb8d 	bl	8007038 <canopen_app_interrupt>
  }
  /* USER CODE END Callback 1 */
}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40012c00 	.word	0x40012c00
 800792c:	20000454 	.word	0x20000454

08007930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007936:	f000 fd64 	bl	8008402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800793a:	f000 f84f 	bl	80079dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800793e:	f000 f9f9 	bl	8007d34 <MX_GPIO_Init>
  MX_FDCAN3_Init();
 8007942:	f000 f897 	bl	8007a74 <MX_FDCAN3_Init>
  MX_LPUART1_UART_Init();
 8007946:	f000 f8db 	bl	8007b00 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800794a:	f000 f9bd 	bl	8007cc8 <MX_TIM6_Init>
  MX_SPI1_Init();
 800794e:	f000 f921 	bl	8007b94 <MX_SPI1_Init>
  MX_TIM3_Init();
 8007952:	f000 f95d 	bl	8007c10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hfdcan3;
 8007956:	4b1a      	ldr	r3, [pc, #104]	@ (80079c0 <main+0x90>)
 8007958:	613b      	str	r3, [r7, #16]
  canOpenNodeSTM32.HWInitFunction = MX_FDCAN3_Init;
 800795a:	4b1a      	ldr	r3, [pc, #104]	@ (80079c4 <main+0x94>)
 800795c:	617b      	str	r3, [r7, #20]
  canOpenNodeSTM32.timerHandle = &htim6;
 800795e:	4b1a      	ldr	r3, [pc, #104]	@ (80079c8 <main+0x98>)
 8007960:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.desiredNodeID = 29;
 8007962:	231d      	movs	r3, #29
 8007964:	723b      	strb	r3, [r7, #8]
  canOpenNodeSTM32.baudrate = 125;
 8007966:	237d      	movs	r3, #125	@ 0x7d
 8007968:	817b      	strh	r3, [r7, #10]
  canopen_app_init(&canOpenNodeSTM32);
 800796a:	f107 0308 	add.w	r3, r7, #8
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff f9a4 	bl	8006cbc <canopen_app_init>

  /* Stepper Driver Init Begin */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8007974:	2201      	movs	r2, #1
 8007976:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800797a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800797e:	f001 ff25 	bl	80097cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8007982:	2200      	movs	r2, #0
 8007984:	2140      	movs	r1, #64	@ 0x40
 8007986:	4811      	ldr	r0, [pc, #68]	@ (80079cc <main+0x9c>)
 8007988:	f001 ff20 	bl	80097cc <HAL_GPIO_WritePin>
  uint8_t pData[]={0x21,0x00,0x00,0x00,0xb8};
 800798c:	4a10      	ldr	r2, [pc, #64]	@ (80079d0 <main+0xa0>)
 800798e:	463b      	mov	r3, r7
 8007990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007994:	6018      	str	r0, [r3, #0]
 8007996:	3304      	adds	r3, #4
 8007998:	7019      	strb	r1, [r3, #0]
  HAL_SPI_Transmit(&hspi1, pData, sizeof(pData), 10);
 800799a:	4639      	mov	r1, r7
 800799c:	230a      	movs	r3, #10
 800799e:	2205      	movs	r2, #5
 80079a0:	480c      	ldr	r0, [pc, #48]	@ (80079d4 <main+0xa4>)
 80079a2:	f003 f82a 	bl	800a9fa <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80079a6:	2201      	movs	r2, #1
 80079a8:	2140      	movs	r1, #64	@ 0x40
 80079aa:	4808      	ldr	r0, [pc, #32]	@ (80079cc <main+0x9c>)
 80079ac:	f001 ff0e 	bl	80097cc <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80079b0:	2104      	movs	r1, #4
 80079b2:	4809      	ldr	r0, [pc, #36]	@ (80079d8 <main+0xa8>)
 80079b4:	f003 fc50 	bl	800b258 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    canopen_app_process();
 80079b8:	f7ff fad2 	bl	8006f60 <canopen_app_process>
 80079bc:	e7fc      	b.n	80079b8 <main+0x88>
 80079be:	bf00      	nop
 80079c0:	200004b8 	.word	0x200004b8
 80079c4:	08007a75 	.word	0x08007a75
 80079c8:	20000660 	.word	0x20000660
 80079cc:	48000400 	.word	0x48000400
 80079d0:	0800e1ec 	.word	0x0800e1ec
 80079d4:	200005b0 	.word	0x200005b0
 80079d8:	20000614 	.word	0x20000614

080079dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b094      	sub	sp, #80	@ 0x50
 80079e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079e2:	f107 0318 	add.w	r3, r7, #24
 80079e6:	2238      	movs	r2, #56	@ 0x38
 80079e8:	2100      	movs	r1, #0
 80079ea:	4618      	mov	r0, r3
 80079ec:	f005 fed6 	bl	800d79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079f0:	1d3b      	adds	r3, r7, #4
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	605a      	str	r2, [r3, #4]
 80079f8:	609a      	str	r2, [r3, #8]
 80079fa:	60da      	str	r2, [r3, #12]
 80079fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007a02:	f001 ff1f 	bl	8009844 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007a06:	2302      	movs	r3, #2
 8007a08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007a10:	2340      	movs	r3, #64	@ 0x40
 8007a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a14:	2302      	movs	r3, #2
 8007a16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8007a20:	2308      	movs	r3, #8
 8007a22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a24:	2302      	movs	r3, #2
 8007a26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007a28:	2302      	movs	r3, #2
 8007a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a30:	f107 0318 	add.w	r3, r7, #24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 ffb9 	bl	80099ac <HAL_RCC_OscConfig>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8007a40:	f000 f9fe 	bl	8007e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a44:	230f      	movs	r3, #15
 8007a46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007a50:	2300      	movs	r3, #0
 8007a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007a58:	1d3b      	adds	r3, r7, #4
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f002 fab7 	bl	8009fd0 <HAL_RCC_ClockConfig>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8007a68:	f000 f9ea 	bl	8007e40 <Error_Handler>
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	3750      	adds	r7, #80	@ 0x50
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8007a78:	4b1f      	ldr	r3, [pc, #124]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007a7a:	4a20      	ldr	r2, [pc, #128]	@ (8007afc <MX_FDCAN3_Init+0x88>)
 8007a7c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8007a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007a84:	4b1c      	ldr	r3, [pc, #112]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8007a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8007a90:	4b19      	ldr	r3, [pc, #100]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = ENABLE;
 8007a96:	4b18      	ldr	r3, [pc, #96]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8007a9c:	4b16      	ldr	r3, [pc, #88]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 32;
 8007aa2:	4b15      	ldr	r3, [pc, #84]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8007aa8:	4b13      	ldr	r3, [pc, #76]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 13;
 8007aae:	4b12      	ldr	r3, [pc, #72]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ab0:	220d      	movs	r2, #13
 8007ab2:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8007ab4:	4b10      	ldr	r3, [pc, #64]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 32;
 8007aba:	4b0f      	ldr	r3, [pc, #60]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007abc:	2220      	movs	r2, #32
 8007abe:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8007ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 13;
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ac8:	220d      	movs	r2, #13
 8007aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 2;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ace:	2202      	movs	r2, #2
 8007ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8007ad2:	4b09      	ldr	r3, [pc, #36]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8007ad8:	4b07      	ldr	r3, [pc, #28]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007ade:	4b06      	ldr	r3, [pc, #24]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8007ae4:	4804      	ldr	r0, [pc, #16]	@ (8007af8 <MX_FDCAN3_Init+0x84>)
 8007ae6:	f000 fe27 	bl	8008738 <HAL_FDCAN_Init>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8007af0:	f000 f9a6 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8007af4:	bf00      	nop
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	200004b8 	.word	0x200004b8
 8007afc:	40006c00 	.word	0x40006c00

08007b00 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007b04:	4b21      	ldr	r3, [pc, #132]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b06:	4a22      	ldr	r2, [pc, #136]	@ (8007b90 <MX_LPUART1_UART_Init+0x90>)
 8007b08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8007b0a:	4b20      	ldr	r3, [pc, #128]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007b10:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007b12:	4b1e      	ldr	r3, [pc, #120]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007b18:	4b1c      	ldr	r3, [pc, #112]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8007b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8007b24:	4b19      	ldr	r3, [pc, #100]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b26:	220c      	movs	r2, #12
 8007b28:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b2a:	4b18      	ldr	r3, [pc, #96]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007b30:	4b16      	ldr	r3, [pc, #88]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007b36:	4b15      	ldr	r3, [pc, #84]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007b3c:	4b13      	ldr	r3, [pc, #76]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007b42:	4812      	ldr	r0, [pc, #72]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b44:	f004 fc06 	bl	800c354 <HAL_UART_Init>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8007b4e:	f000 f977 	bl	8007e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007b52:	2100      	movs	r1, #0
 8007b54:	480d      	ldr	r0, [pc, #52]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b56:	f005 f9a1 	bl	800ce9c <HAL_UARTEx_SetTxFifoThreshold>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8007b60:	f000 f96e 	bl	8007e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007b64:	2100      	movs	r1, #0
 8007b66:	4809      	ldr	r0, [pc, #36]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b68:	f005 f9d6 	bl	800cf18 <HAL_UARTEx_SetRxFifoThreshold>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8007b72:	f000 f965 	bl	8007e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007b76:	4805      	ldr	r0, [pc, #20]	@ (8007b8c <MX_LPUART1_UART_Init+0x8c>)
 8007b78:	f005 f957 	bl	800ce2a <HAL_UARTEx_DisableFifoMode>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8007b82:	f000 f95d 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007b86:	bf00      	nop
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000051c 	.word	0x2000051c
 8007b90:	40008000 	.word	0x40008000

08007b94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007b98:	4b1b      	ldr	r3, [pc, #108]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8007c0c <MX_SPI1_Init+0x78>)
 8007b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007ba0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007ba4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007ba6:	4b18      	ldr	r3, [pc, #96]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007bac:	4b16      	ldr	r3, [pc, #88]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007bb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007bb4:	4b14      	ldr	r3, [pc, #80]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007bba:	4b13      	ldr	r3, [pc, #76]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007bc0:	4b11      	ldr	r3, [pc, #68]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bca:	2220      	movs	r2, #32
 8007bcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007bce:	4b0e      	ldr	r3, [pc, #56]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bda:	4b0b      	ldr	r3, [pc, #44]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007be0:	4b09      	ldr	r3, [pc, #36]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007be2:	2207      	movs	r2, #7
 8007be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007be6:	4b08      	ldr	r3, [pc, #32]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007bec:	4b06      	ldr	r3, [pc, #24]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bee:	2208      	movs	r2, #8
 8007bf0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007bf2:	4805      	ldr	r0, [pc, #20]	@ (8007c08 <MX_SPI1_Init+0x74>)
 8007bf4:	f002 fe56 	bl	800a8a4 <HAL_SPI_Init>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007bfe:	f000 f91f 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007c02:	bf00      	nop
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	200005b0 	.word	0x200005b0
 8007c0c:	40013000 	.word	0x40013000

08007c10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	@ 0x28
 8007c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c16:	f107 031c 	add.w	r3, r7, #28
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c22:	463b      	mov	r3, r7
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	611a      	str	r2, [r3, #16]
 8007c30:	615a      	str	r2, [r3, #20]
 8007c32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007c34:	4b22      	ldr	r3, [pc, #136]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007c36:	4a23      	ldr	r2, [pc, #140]	@ (8007cc4 <MX_TIM3_Init+0xb4>)
 8007c38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8007c3a:	4b21      	ldr	r3, [pc, #132]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007c3c:	2240      	movs	r2, #64	@ 0x40
 8007c3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c40:	4b1f      	ldr	r3, [pc, #124]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8007c46:	4b1e      	ldr	r3, [pc, #120]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007c48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c54:	4b1a      	ldr	r3, [pc, #104]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007c5a:	4819      	ldr	r0, [pc, #100]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007c5c:	f003 faa5 	bl	800b1aa <HAL_TIM_PWM_Init>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8007c66:	f000 f8eb 	bl	8007e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007c72:	f107 031c 	add.w	r3, r7, #28
 8007c76:	4619      	mov	r1, r3
 8007c78:	4811      	ldr	r0, [pc, #68]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007c7a:	f004 fa8f 	bl	800c19c <HAL_TIMEx_MasterConfigSynchronization>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8007c84:	f000 f8dc 	bl	8007e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007c88:	2360      	movs	r3, #96	@ 0x60
 8007c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8007c8c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007c90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007c9a:	463b      	mov	r3, r7
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4807      	ldr	r0, [pc, #28]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007ca2:	f003 fd3b 	bl	800b71c <HAL_TIM_PWM_ConfigChannel>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8007cac:	f000 f8c8 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007cb0:	4803      	ldr	r0, [pc, #12]	@ (8007cc0 <MX_TIM3_Init+0xb0>)
 8007cb2:	f000 fa39 	bl	8008128 <HAL_TIM_MspPostInit>

}
 8007cb6:	bf00      	nop
 8007cb8:	3728      	adds	r7, #40	@ 0x28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000614 	.word	0x20000614
 8007cc4:	40000400 	.word	0x40000400

08007cc8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cce:	1d3b      	adds	r3, r7, #4
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	605a      	str	r2, [r3, #4]
 8007cd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007cd8:	4b14      	ldr	r3, [pc, #80]	@ (8007d2c <MX_TIM6_Init+0x64>)
 8007cda:	4a15      	ldr	r2, [pc, #84]	@ (8007d30 <MX_TIM6_Init+0x68>)
 8007cdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 8007cde:	4b13      	ldr	r3, [pc, #76]	@ (8007d2c <MX_TIM6_Init+0x64>)
 8007ce0:	2240      	movs	r2, #64	@ 0x40
 8007ce2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ce4:	4b11      	ldr	r3, [pc, #68]	@ (8007d2c <MX_TIM6_Init+0x64>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8007cea:	4b10      	ldr	r3, [pc, #64]	@ (8007d2c <MX_TIM6_Init+0x64>)
 8007cec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007cf0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d2c <MX_TIM6_Init+0x64>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007cf8:	480c      	ldr	r0, [pc, #48]	@ (8007d2c <MX_TIM6_Init+0x64>)
 8007cfa:	f003 f957 	bl	800afac <HAL_TIM_Base_Init>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8007d04:	f000 f89c 	bl	8007e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007d10:	1d3b      	adds	r3, r7, #4
 8007d12:	4619      	mov	r1, r3
 8007d14:	4805      	ldr	r0, [pc, #20]	@ (8007d2c <MX_TIM6_Init+0x64>)
 8007d16:	f004 fa41 	bl	800c19c <HAL_TIMEx_MasterConfigSynchronization>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8007d20:	f000 f88e 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000660 	.word	0x20000660
 8007d30:	40001000 	.word	0x40001000

08007d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08a      	sub	sp, #40	@ 0x28
 8007d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d3a:	f107 0314 	add.w	r3, r7, #20
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	605a      	str	r2, [r3, #4]
 8007d44:	609a      	str	r2, [r3, #8]
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d4e:	4a39      	ldr	r2, [pc, #228]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d50:	f043 0304 	orr.w	r3, r3, #4
 8007d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d56:	4b37      	ldr	r3, [pc, #220]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	613b      	str	r3, [r7, #16]
 8007d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d62:	4b34      	ldr	r3, [pc, #208]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d66:	4a33      	ldr	r2, [pc, #204]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d68:	f043 0320 	orr.w	r3, r3, #32
 8007d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d6e:	4b31      	ldr	r3, [pc, #196]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d86:	4b2b      	ldr	r3, [pc, #172]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	60bb      	str	r3, [r7, #8]
 8007d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d92:	4b28      	ldr	r3, [pc, #160]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d96:	4a27      	ldr	r2, [pc, #156]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007d98:	f043 0302 	orr.w	r3, r3, #2
 8007d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d9e:	4b25      	ldr	r3, [pc, #148]	@ (8007e34 <MX_GPIO_Init+0x100>)
 8007da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	607b      	str	r3, [r7, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|RST_Pin, GPIO_PIN_RESET);
 8007daa:	2200      	movs	r2, #0
 8007dac:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007db4:	f001 fd0a 	bl	80097cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8007db8:	2200      	movs	r2, #0
 8007dba:	2140      	movs	r1, #64	@ 0x40
 8007dbc:	481e      	ldr	r0, [pc, #120]	@ (8007e38 <MX_GPIO_Init+0x104>)
 8007dbe:	f001 fd05 	bl	80097cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007dc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007dc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007dd2:	f107 0314 	add.w	r3, r7, #20
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4818      	ldr	r0, [pc, #96]	@ (8007e3c <MX_GPIO_Init+0x108>)
 8007dda:	f001 fb75 	bl	80094c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin RST_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|RST_Pin;
 8007dde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007de4:	2301      	movs	r3, #1
 8007de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dec:	2300      	movs	r3, #0
 8007dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007df0:	f107 0314 	add.w	r3, r7, #20
 8007df4:	4619      	mov	r1, r3
 8007df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007dfa:	f001 fb65 	bl	80094c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8007dfe:	2340      	movs	r3, #64	@ 0x40
 8007e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e02:	2301      	movs	r3, #1
 8007e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007e0e:	f107 0314 	add.w	r3, r7, #20
 8007e12:	4619      	mov	r1, r3
 8007e14:	4808      	ldr	r0, [pc, #32]	@ (8007e38 <MX_GPIO_Init+0x104>)
 8007e16:	f001 fb57 	bl	80094c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	2028      	movs	r0, #40	@ 0x28
 8007e20:	f000 fc51 	bl	80086c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007e24:	2028      	movs	r0, #40	@ 0x28
 8007e26:	f000 fc68 	bl	80086fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007e2a:	bf00      	nop
 8007e2c:	3728      	adds	r7, #40	@ 0x28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	40021000 	.word	0x40021000
 8007e38:	48000400 	.word	0x48000400
 8007e3c:	48000800 	.word	0x48000800

08007e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007e44:	b672      	cpsid	i
}
 8007e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <Error_Handler+0x8>

08007e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e52:	4b0f      	ldr	r3, [pc, #60]	@ (8007e90 <HAL_MspInit+0x44>)
 8007e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e56:	4a0e      	ldr	r2, [pc, #56]	@ (8007e90 <HAL_MspInit+0x44>)
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e90 <HAL_MspInit+0x44>)
 8007e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	607b      	str	r3, [r7, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e6a:	4b09      	ldr	r3, [pc, #36]	@ (8007e90 <HAL_MspInit+0x44>)
 8007e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e6e:	4a08      	ldr	r2, [pc, #32]	@ (8007e90 <HAL_MspInit+0x44>)
 8007e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e76:	4b06      	ldr	r3, [pc, #24]	@ (8007e90 <HAL_MspInit+0x44>)
 8007e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8007e82:	f001 fd83 	bl	800998c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40021000 	.word	0x40021000

08007e94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b09e      	sub	sp, #120	@ 0x78
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	605a      	str	r2, [r3, #4]
 8007ea6:	609a      	str	r2, [r3, #8]
 8007ea8:	60da      	str	r2, [r3, #12]
 8007eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007eac:	f107 0310 	add.w	r3, r7, #16
 8007eb0:	2254      	movs	r2, #84	@ 0x54
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f005 fc71 	bl	800d79c <memset>
  if(hfdcan->Instance==FDCAN3)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a27      	ldr	r2, [pc, #156]	@ (8007f5c <HAL_FDCAN_MspInit+0xc8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d147      	bne.n	8007f54 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8007ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ec8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8007eca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ece:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ed0:	f107 0310 	add.w	r3, r7, #16
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f002 fa97 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8007ee0:	f7ff ffae 	bl	8007e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8007ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f60 <HAL_FDCAN_MspInit+0xcc>)
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f60 <HAL_FDCAN_MspInit+0xcc>)
 8007eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8007f60 <HAL_FDCAN_MspInit+0xcc>)
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007efc:	4b18      	ldr	r3, [pc, #96]	@ (8007f60 <HAL_FDCAN_MspInit+0xcc>)
 8007efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f00:	4a17      	ldr	r2, [pc, #92]	@ (8007f60 <HAL_FDCAN_MspInit+0xcc>)
 8007f02:	f043 0302 	orr.w	r3, r3, #2
 8007f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f08:	4b15      	ldr	r3, [pc, #84]	@ (8007f60 <HAL_FDCAN_MspInit+0xcc>)
 8007f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	60bb      	str	r3, [r7, #8]
 8007f12:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PB3     ------> FDCAN3_RX
    PB4     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8007f14:	2318      	movs	r3, #24
 8007f16:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f20:	2300      	movs	r3, #0
 8007f22:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8007f24:	230b      	movs	r3, #11
 8007f26:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	480d      	ldr	r0, [pc, #52]	@ (8007f64 <HAL_FDCAN_MspInit+0xd0>)
 8007f30:	f001 faca 	bl	80094c8 <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8007f34:	2200      	movs	r2, #0
 8007f36:	2100      	movs	r1, #0
 8007f38:	2058      	movs	r0, #88	@ 0x58
 8007f3a:	f000 fbc4 	bl	80086c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8007f3e:	2058      	movs	r0, #88	@ 0x58
 8007f40:	f000 fbdb 	bl	80086fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8007f44:	2200      	movs	r2, #0
 8007f46:	2100      	movs	r1, #0
 8007f48:	2059      	movs	r0, #89	@ 0x59
 8007f4a:	f000 fbbc 	bl	80086c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8007f4e:	2059      	movs	r0, #89	@ 0x59
 8007f50:	f000 fbd3 	bl	80086fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8007f54:	bf00      	nop
 8007f56:	3778      	adds	r7, #120	@ 0x78
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40006c00 	.word	0x40006c00
 8007f60:	40021000 	.word	0x40021000
 8007f64:	48000400 	.word	0x48000400

08007f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b09e      	sub	sp, #120	@ 0x78
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	605a      	str	r2, [r3, #4]
 8007f7a:	609a      	str	r2, [r3, #8]
 8007f7c:	60da      	str	r2, [r3, #12]
 8007f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f80:	f107 0310 	add.w	r3, r7, #16
 8007f84:	2254      	movs	r2, #84	@ 0x54
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f005 fc07 	bl	800d79c <memset>
  if(huart->Instance==LPUART1)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a1f      	ldr	r2, [pc, #124]	@ (8008010 <HAL_UART_MspInit+0xa8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d136      	bne.n	8008006 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007f98:	2320      	movs	r3, #32
 8007f9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007fa0:	f107 0310 	add.w	r3, r7, #16
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f002 fa2f 	bl	800a408 <HAL_RCCEx_PeriphCLKConfig>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007fb0:	f7ff ff46 	bl	8007e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007fb4:	4b17      	ldr	r3, [pc, #92]	@ (8008014 <HAL_UART_MspInit+0xac>)
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb8:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <HAL_UART_MspInit+0xac>)
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8007fc0:	4b14      	ldr	r3, [pc, #80]	@ (8008014 <HAL_UART_MspInit+0xac>)
 8007fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fcc:	4b11      	ldr	r3, [pc, #68]	@ (8008014 <HAL_UART_MspInit+0xac>)
 8007fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd0:	4a10      	ldr	r2, [pc, #64]	@ (8008014 <HAL_UART_MspInit+0xac>)
 8007fd2:	f043 0301 	orr.w	r3, r3, #1
 8007fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <HAL_UART_MspInit+0xac>)
 8007fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8007fe4:	230c      	movs	r3, #12
 8007fe6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8007ff4:	230c      	movs	r3, #12
 8007ff6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ff8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008002:	f001 fa61 	bl	80094c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8008006:	bf00      	nop
 8008008:	3778      	adds	r7, #120	@ 0x78
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	40008000 	.word	0x40008000
 8008014:	40021000 	.word	0x40021000

08008018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	@ 0x28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008020:	f107 0314 	add.w	r3, r7, #20
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	605a      	str	r2, [r3, #4]
 800802a:	609a      	str	r2, [r3, #8]
 800802c:	60da      	str	r2, [r3, #12]
 800802e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a17      	ldr	r2, [pc, #92]	@ (8008094 <HAL_SPI_MspInit+0x7c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d128      	bne.n	800808c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800803a:	4b17      	ldr	r3, [pc, #92]	@ (8008098 <HAL_SPI_MspInit+0x80>)
 800803c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800803e:	4a16      	ldr	r2, [pc, #88]	@ (8008098 <HAL_SPI_MspInit+0x80>)
 8008040:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008044:	6613      	str	r3, [r2, #96]	@ 0x60
 8008046:	4b14      	ldr	r3, [pc, #80]	@ (8008098 <HAL_SPI_MspInit+0x80>)
 8008048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800804a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800804e:	613b      	str	r3, [r7, #16]
 8008050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008052:	4b11      	ldr	r3, [pc, #68]	@ (8008098 <HAL_SPI_MspInit+0x80>)
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	4a10      	ldr	r2, [pc, #64]	@ (8008098 <HAL_SPI_MspInit+0x80>)
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800805e:	4b0e      	ldr	r3, [pc, #56]	@ (8008098 <HAL_SPI_MspInit+0x80>)
 8008060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800806a:	23e0      	movs	r3, #224	@ 0xe0
 800806c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800806e:	2302      	movs	r3, #2
 8008070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008076:	2300      	movs	r3, #0
 8008078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800807a:	2305      	movs	r3, #5
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800807e:	f107 0314 	add.w	r3, r7, #20
 8008082:	4619      	mov	r1, r3
 8008084:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008088:	f001 fa1e 	bl	80094c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800808c:	bf00      	nop
 800808e:	3728      	adds	r7, #40	@ 0x28
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40013000 	.word	0x40013000
 8008098:	40021000 	.word	0x40021000

0800809c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a0a      	ldr	r2, [pc, #40]	@ (80080d4 <HAL_TIM_PWM_MspInit+0x38>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d10b      	bne.n	80080c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80080ae:	4b0a      	ldr	r3, [pc, #40]	@ (80080d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80080b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b2:	4a09      	ldr	r2, [pc, #36]	@ (80080d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80080b4:	f043 0302 	orr.w	r3, r3, #2
 80080b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ba:	4b07      	ldr	r3, [pc, #28]	@ (80080d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80080bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40000400 	.word	0x40000400
 80080d8:	40021000 	.word	0x40021000

080080dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008120 <HAL_TIM_Base_MspInit+0x44>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d113      	bne.n	8008116 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80080ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <HAL_TIM_Base_MspInit+0x48>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008124 <HAL_TIM_Base_MspInit+0x48>)
 80080f4:	f043 0310 	orr.w	r3, r3, #16
 80080f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80080fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <HAL_TIM_Base_MspInit+0x48>)
 80080fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080fe:	f003 0310 	and.w	r3, r3, #16
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	2036      	movs	r0, #54	@ 0x36
 800810c:	f000 fadb 	bl	80086c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008110:	2036      	movs	r0, #54	@ 0x36
 8008112:	f000 faf2 	bl	80086fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	40001000 	.word	0x40001000
 8008124:	40021000 	.word	0x40021000

08008128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008130:	f107 030c 	add.w	r3, r7, #12
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	605a      	str	r2, [r3, #4]
 800813a:	609a      	str	r2, [r3, #8]
 800813c:	60da      	str	r2, [r3, #12]
 800813e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a11      	ldr	r2, [pc, #68]	@ (800818c <HAL_TIM_MspPostInit+0x64>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d11b      	bne.n	8008182 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800814a:	4b11      	ldr	r3, [pc, #68]	@ (8008190 <HAL_TIM_MspPostInit+0x68>)
 800814c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800814e:	4a10      	ldr	r2, [pc, #64]	@ (8008190 <HAL_TIM_MspPostInit+0x68>)
 8008150:	f043 0304 	orr.w	r3, r3, #4
 8008154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008156:	4b0e      	ldr	r3, [pc, #56]	@ (8008190 <HAL_TIM_MspPostInit+0x68>)
 8008158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	60bb      	str	r3, [r7, #8]
 8008160:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008162:	2380      	movs	r3, #128	@ 0x80
 8008164:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008166:	2302      	movs	r3, #2
 8008168:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800816e:	2300      	movs	r3, #0
 8008170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008172:	2302      	movs	r3, #2
 8008174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008176:	f107 030c 	add.w	r3, r7, #12
 800817a:	4619      	mov	r1, r3
 800817c:	4805      	ldr	r0, [pc, #20]	@ (8008194 <HAL_TIM_MspPostInit+0x6c>)
 800817e:	f001 f9a3 	bl	80094c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008182:	bf00      	nop
 8008184:	3720      	adds	r7, #32
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40000400 	.word	0x40000400
 8008190:	40021000 	.word	0x40021000
 8008194:	48000800 	.word	0x48000800

08008198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800819c:	bf00      	nop
 800819e:	e7fd      	b.n	800819c <NMI_Handler+0x4>

080081a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <HardFault_Handler+0x4>

080081a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081ac:	bf00      	nop
 80081ae:	e7fd      	b.n	80081ac <MemManage_Handler+0x4>

080081b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <BusFault_Handler+0x4>

080081b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081bc:	bf00      	nop
 80081be:	e7fd      	b.n	80081bc <UsageFault_Handler+0x4>

080081c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081ce:	b480      	push	{r7}
 80081d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081d2:	bf00      	nop
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081e0:	bf00      	nop
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081ee:	f000 f95b 	bl	80084a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081f2:	bf00      	nop
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80081fa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80081fe:	f001 fafd 	bl	80097fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008202:	bf00      	nop
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800820c:	4802      	ldr	r0, [pc, #8]	@ (8008218 <TIM6_DAC_IRQHandler+0x10>)
 800820e:	f003 f935 	bl	800b47c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008212:	bf00      	nop
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000660 	.word	0x20000660

0800821c <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8008220:	4802      	ldr	r0, [pc, #8]	@ (800822c <FDCAN3_IT0_IRQHandler+0x10>)
 8008222:	f000 fef1 	bl	8009008 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8008226:	bf00      	nop
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	200004b8 	.word	0x200004b8

08008230 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8008234:	4802      	ldr	r0, [pc, #8]	@ (8008240 <FDCAN3_IT1_IRQHandler+0x10>)
 8008236:	f000 fee7 	bl	8009008 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 800823a:	bf00      	nop
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200004b8 	.word	0x200004b8

08008244 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008250:	2300      	movs	r3, #0
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	e00a      	b.n	800826c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008256:	f3af 8000 	nop.w
 800825a:	4601      	mov	r1, r0
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	60ba      	str	r2, [r7, #8]
 8008262:	b2ca      	uxtb	r2, r1
 8008264:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	3301      	adds	r3, #1
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	dbf0      	blt.n	8008256 <_read+0x12>
  }

  return len;
 8008274:	687b      	ldr	r3, [r7, #4]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	e009      	b.n	80082a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	60ba      	str	r2, [r7, #8]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	3301      	adds	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	dbf1      	blt.n	8008290 <_write+0x12>
  }
  return len;
 80082ac:	687b      	ldr	r3, [r7, #4]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <_close>:

int _close(int file)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80082be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80082de:	605a      	str	r2, [r3, #4]
  return 0;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <_isatty>:

int _isatty(int file)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80082f6:	2301      	movs	r3, #1
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008328:	4a14      	ldr	r2, [pc, #80]	@ (800837c <_sbrk+0x5c>)
 800832a:	4b15      	ldr	r3, [pc, #84]	@ (8008380 <_sbrk+0x60>)
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008334:	4b13      	ldr	r3, [pc, #76]	@ (8008384 <_sbrk+0x64>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d102      	bne.n	8008342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800833c:	4b11      	ldr	r3, [pc, #68]	@ (8008384 <_sbrk+0x64>)
 800833e:	4a12      	ldr	r2, [pc, #72]	@ (8008388 <_sbrk+0x68>)
 8008340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008342:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <_sbrk+0x64>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	429a      	cmp	r2, r3
 800834e:	d207      	bcs.n	8008360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008350:	f005 fa82 	bl	800d858 <__errno>
 8008354:	4603      	mov	r3, r0
 8008356:	220c      	movs	r2, #12
 8008358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800835a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800835e:	e009      	b.n	8008374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008360:	4b08      	ldr	r3, [pc, #32]	@ (8008384 <_sbrk+0x64>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008366:	4b07      	ldr	r3, [pc, #28]	@ (8008384 <_sbrk+0x64>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4413      	add	r3, r2
 800836e:	4a05      	ldr	r2, [pc, #20]	@ (8008384 <_sbrk+0x64>)
 8008370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008372:	68fb      	ldr	r3, [r7, #12]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20020000 	.word	0x20020000
 8008380:	00000400 	.word	0x00000400
 8008384:	200006ac 	.word	0x200006ac
 8008388:	20000800 	.word	0x20000800

0800838c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008390:	4b06      	ldr	r3, [pc, #24]	@ (80083ac <SystemInit+0x20>)
 8008392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008396:	4a05      	ldr	r2, [pc, #20]	@ (80083ac <SystemInit+0x20>)
 8008398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800839c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80083a0:	bf00      	nop
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	e000ed00 	.word	0xe000ed00

080083b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80083b0:	480d      	ldr	r0, [pc, #52]	@ (80083e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80083b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80083b4:	f7ff ffea 	bl	800838c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083b8:	480c      	ldr	r0, [pc, #48]	@ (80083ec <LoopForever+0x6>)
  ldr r1, =_edata
 80083ba:	490d      	ldr	r1, [pc, #52]	@ (80083f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80083bc:	4a0d      	ldr	r2, [pc, #52]	@ (80083f4 <LoopForever+0xe>)
  movs r3, #0
 80083be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80083c0:	e002      	b.n	80083c8 <LoopCopyDataInit>

080083c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083c6:	3304      	adds	r3, #4

080083c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083cc:	d3f9      	bcc.n	80083c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083ce:	4a0a      	ldr	r2, [pc, #40]	@ (80083f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80083d0:	4c0a      	ldr	r4, [pc, #40]	@ (80083fc <LoopForever+0x16>)
  movs r3, #0
 80083d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083d4:	e001      	b.n	80083da <LoopFillZerobss>

080083d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083d8:	3204      	adds	r2, #4

080083da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083dc:	d3fb      	bcc.n	80083d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80083de:	f005 fa41 	bl	800d864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80083e2:	f7ff faa5 	bl	8007930 <main>

080083e6 <LoopForever>:

LoopForever:
    b LoopForever
 80083e6:	e7fe      	b.n	80083e6 <LoopForever>
  ldr   r0, =_estack
 80083e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80083ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083f0:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 80083f4:	0800e99c 	.word	0x0800e99c
  ldr r2, =_sbss
 80083f8:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 80083fc:	20000800 	.word	0x20000800

08008400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008400:	e7fe      	b.n	8008400 <ADC1_2_IRQHandler>

08008402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800840c:	2003      	movs	r0, #3
 800840e:	f000 f94f 	bl	80086b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008412:	2000      	movs	r0, #0
 8008414:	f000 f80e 	bl	8008434 <HAL_InitTick>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	71fb      	strb	r3, [r7, #7]
 8008422:	e001      	b.n	8008428 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008424:	f7ff fd12 	bl	8007e4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008428:	79fb      	ldrb	r3, [r7, #7]

}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008440:	4b16      	ldr	r3, [pc, #88]	@ (800849c <HAL_InitTick+0x68>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008448:	4b15      	ldr	r3, [pc, #84]	@ (80084a0 <HAL_InitTick+0x6c>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	4b13      	ldr	r3, [pc, #76]	@ (800849c <HAL_InitTick+0x68>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008454:	fbb1 f3f3 	udiv	r3, r1, r3
 8008458:	fbb2 f3f3 	udiv	r3, r2, r3
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f95e 	bl	800871e <HAL_SYSTICK_Config>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10f      	bne.n	8008488 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b0f      	cmp	r3, #15
 800846c:	d809      	bhi.n	8008482 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800846e:	2200      	movs	r2, #0
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008476:	f000 f926 	bl	80086c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800847a:	4a0a      	ldr	r2, [pc, #40]	@ (80084a4 <HAL_InitTick+0x70>)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	e007      	b.n	8008492 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	73fb      	strb	r3, [r7, #15]
 8008486:	e004      	b.n	8008492 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
 800848c:	e001      	b.n	8008492 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200003d8 	.word	0x200003d8
 80084a0:	200003d0 	.word	0x200003d0
 80084a4:	200003d4 	.word	0x200003d4

080084a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084ac:	4b05      	ldr	r3, [pc, #20]	@ (80084c4 <HAL_IncTick+0x1c>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	4b05      	ldr	r3, [pc, #20]	@ (80084c8 <HAL_IncTick+0x20>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4413      	add	r3, r2
 80084b6:	4a03      	ldr	r2, [pc, #12]	@ (80084c4 <HAL_IncTick+0x1c>)
 80084b8:	6013      	str	r3, [r2, #0]
}
 80084ba:	bf00      	nop
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	200006b0 	.word	0x200006b0
 80084c8:	200003d8 	.word	0x200003d8

080084cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  return uwTick;
 80084d0:	4b03      	ldr	r3, [pc, #12]	@ (80084e0 <HAL_GetTick+0x14>)
 80084d2:	681b      	ldr	r3, [r3, #0]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	200006b0 	.word	0x200006b0

080084e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008528 <__NVIC_SetPriorityGrouping+0x44>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008500:	4013      	ands	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800850c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008516:	4a04      	ldr	r2, [pc, #16]	@ (8008528 <__NVIC_SetPriorityGrouping+0x44>)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	60d3      	str	r3, [r2, #12]
}
 800851c:	bf00      	nop
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	e000ed00 	.word	0xe000ed00

0800852c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008530:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <__NVIC_GetPriorityGrouping+0x18>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	0a1b      	lsrs	r3, r3, #8
 8008536:	f003 0307 	and.w	r3, r3, #7
}
 800853a:	4618      	mov	r0, r3
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	e000ed00 	.word	0xe000ed00

08008548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	db0b      	blt.n	8008572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	f003 021f 	and.w	r2, r3, #31
 8008560:	4907      	ldr	r1, [pc, #28]	@ (8008580 <__NVIC_EnableIRQ+0x38>)
 8008562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	2001      	movs	r0, #1
 800856a:	fa00 f202 	lsl.w	r2, r0, r2
 800856e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	e000e100 	.word	0xe000e100

08008584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008594:	2b00      	cmp	r3, #0
 8008596:	db0a      	blt.n	80085ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	b2da      	uxtb	r2, r3
 800859c:	490c      	ldr	r1, [pc, #48]	@ (80085d0 <__NVIC_SetPriority+0x4c>)
 800859e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085a2:	0112      	lsls	r2, r2, #4
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	440b      	add	r3, r1
 80085a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80085ac:	e00a      	b.n	80085c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	4908      	ldr	r1, [pc, #32]	@ (80085d4 <__NVIC_SetPriority+0x50>)
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	f003 030f 	and.w	r3, r3, #15
 80085ba:	3b04      	subs	r3, #4
 80085bc:	0112      	lsls	r2, r2, #4
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	440b      	add	r3, r1
 80085c2:	761a      	strb	r2, [r3, #24]
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	e000e100 	.word	0xe000e100
 80085d4:	e000ed00 	.word	0xe000ed00

080085d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085d8:	b480      	push	{r7}
 80085da:	b089      	sub	sp, #36	@ 0x24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f1c3 0307 	rsb	r3, r3, #7
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	bf28      	it	cs
 80085f6:	2304      	movcs	r3, #4
 80085f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3304      	adds	r3, #4
 80085fe:	2b06      	cmp	r3, #6
 8008600:	d902      	bls.n	8008608 <NVIC_EncodePriority+0x30>
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	3b03      	subs	r3, #3
 8008606:	e000      	b.n	800860a <NVIC_EncodePriority+0x32>
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800860c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
 8008616:	43da      	mvns	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	401a      	ands	r2, r3
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008620:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	fa01 f303 	lsl.w	r3, r1, r3
 800862a:	43d9      	mvns	r1, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008630:	4313      	orrs	r3, r2
         );
}
 8008632:	4618      	mov	r0, r3
 8008634:	3724      	adds	r7, #36	@ 0x24
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008644:	f3bf 8f4f 	dsb	sy
}
 8008648:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800864a:	4b06      	ldr	r3, [pc, #24]	@ (8008664 <__NVIC_SystemReset+0x24>)
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008652:	4904      	ldr	r1, [pc, #16]	@ (8008664 <__NVIC_SystemReset+0x24>)
 8008654:	4b04      	ldr	r3, [pc, #16]	@ (8008668 <__NVIC_SystemReset+0x28>)
 8008656:	4313      	orrs	r3, r2
 8008658:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800865a:	f3bf 8f4f 	dsb	sy
}
 800865e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008660:	bf00      	nop
 8008662:	e7fd      	b.n	8008660 <__NVIC_SystemReset+0x20>
 8008664:	e000ed00 	.word	0xe000ed00
 8008668:	05fa0004 	.word	0x05fa0004

0800866c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3b01      	subs	r3, #1
 8008678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800867c:	d301      	bcc.n	8008682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800867e:	2301      	movs	r3, #1
 8008680:	e00f      	b.n	80086a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008682:	4a0a      	ldr	r2, [pc, #40]	@ (80086ac <SysTick_Config+0x40>)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3b01      	subs	r3, #1
 8008688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800868a:	210f      	movs	r1, #15
 800868c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008690:	f7ff ff78 	bl	8008584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <SysTick_Config+0x40>)
 8008696:	2200      	movs	r2, #0
 8008698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800869a:	4b04      	ldr	r3, [pc, #16]	@ (80086ac <SysTick_Config+0x40>)
 800869c:	2207      	movs	r2, #7
 800869e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	e000e010 	.word	0xe000e010

080086b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff ff13 	bl	80084e4 <__NVIC_SetPriorityGrouping>
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	4603      	mov	r3, r0
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	607a      	str	r2, [r7, #4]
 80086d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80086d4:	f7ff ff2a 	bl	800852c <__NVIC_GetPriorityGrouping>
 80086d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	6978      	ldr	r0, [r7, #20]
 80086e0:	f7ff ff7a 	bl	80085d8 <NVIC_EncodePriority>
 80086e4:	4602      	mov	r2, r0
 80086e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ea:	4611      	mov	r1, r2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7ff ff49 	bl	8008584 <__NVIC_SetPriority>
}
 80086f2:	bf00      	nop
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	4603      	mov	r3, r0
 8008702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff ff1d 	bl	8008548 <__NVIC_EnableIRQ>
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800871a:	f7ff ff91 	bl	8008640 <__NVIC_SystemReset>

0800871e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7ff ffa0 	bl	800866c <SysTick_Config>
 800872c:	4603      	mov	r3, r0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e147      	b.n	80089da <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fb98 	bl	8007e94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f022 0210 	bic.w	r2, r2, #16
 8008772:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008774:	f7ff feaa 	bl	80084cc <HAL_GetTick>
 8008778:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800877a:	e012      	b.n	80087a2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800877c:	f7ff fea6 	bl	80084cc <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b0a      	cmp	r3, #10
 8008788:	d90b      	bls.n	80087a2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800878e:	f043 0201 	orr.w	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2203      	movs	r2, #3
 800879a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e11b      	b.n	80089da <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d0e5      	beq.n	800877c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	699a      	ldr	r2, [r3, #24]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087c0:	f7ff fe84 	bl	80084cc <HAL_GetTick>
 80087c4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80087c6:	e012      	b.n	80087ee <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80087c8:	f7ff fe80 	bl	80084cc <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b0a      	cmp	r3, #10
 80087d4:	d90b      	bls.n	80087ee <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087da:	f043 0201 	orr.w	r2, r3, #1
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2203      	movs	r2, #3
 80087e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e0f5      	b.n	80089da <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0e5      	beq.n	80087c8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0202 	orr.w	r2, r2, #2
 800880a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a74      	ldr	r2, [pc, #464]	@ (80089e4 <HAL_FDCAN_Init+0x2ac>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d103      	bne.n	800881e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008816:	4a74      	ldr	r2, [pc, #464]	@ (80089e8 <HAL_FDCAN_Init+0x2b0>)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7c1b      	ldrb	r3, [r3, #16]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d108      	bne.n	8008838 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	699a      	ldr	r2, [r3, #24]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008834:	619a      	str	r2, [r3, #24]
 8008836:	e007      	b.n	8008848 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699a      	ldr	r2, [r3, #24]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008846:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	7c5b      	ldrb	r3, [r3, #17]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d108      	bne.n	8008862 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	699a      	ldr	r2, [r3, #24]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800885e:	619a      	str	r2, [r3, #24]
 8008860:	e007      	b.n	8008872 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	699a      	ldr	r2, [r3, #24]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008870:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7c9b      	ldrb	r3, [r3, #18]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d108      	bne.n	800888c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008888:	619a      	str	r2, [r3, #24]
 800888a:	e007      	b.n	800889c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800889a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80088c0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0210 	bic.w	r2, r2, #16
 80088d0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d108      	bne.n	80088ec <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	699a      	ldr	r2, [r3, #24]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 0204 	orr.w	r2, r2, #4
 80088e8:	619a      	str	r2, [r3, #24]
 80088ea:	e02c      	b.n	8008946 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d028      	beq.n	8008946 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d01c      	beq.n	8008936 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699a      	ldr	r2, [r3, #24]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800890a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	691a      	ldr	r2, [r3, #16]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0210 	orr.w	r2, r2, #16
 800891a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b03      	cmp	r3, #3
 8008922:	d110      	bne.n	8008946 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0220 	orr.w	r2, r2, #32
 8008932:	619a      	str	r2, [r3, #24]
 8008934:	e007      	b.n	8008946 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0220 	orr.w	r2, r2, #32
 8008944:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	3b01      	subs	r3, #1
 800894c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	69db      	ldr	r3, [r3, #28]
 8008952:	3b01      	subs	r3, #1
 8008954:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008956:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800895e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	3b01      	subs	r3, #1
 8008968:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800896e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008970:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800897a:	d115      	bne.n	80089a8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	3b01      	subs	r3, #1
 8008988:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800898a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008990:	3b01      	subs	r3, #1
 8008992:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008994:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899c:	3b01      	subs	r3, #1
 800899e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80089a4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089a6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fc9a 	bl	80092f8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	40006400 	.word	0x40006400
 80089e8:	40006500 	.word	0x40006500

080089ec <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d116      	bne.n	8008a34 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a0e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	011a      	lsls	r2, r3, #4
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	431a      	orrs	r2, r3
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	431a      	orrs	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	e006      	b.n	8008a42 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a38:	f043 0204 	orr.w	r2, r3, #4
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
  }
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d110      	bne.n	8008a84 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2202      	movs	r2, #2
 8008a66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	699a      	ldr	r2, [r3, #24]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0201 	bic.w	r2, r2, #1
 8008a78:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	e006      	b.n	8008a92 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a88:	f043 0204 	orr.w	r2, r3, #4
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
  }
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d156      	bne.n	8008b64 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699a      	ldr	r2, [r3, #24]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f042 0201 	orr.w	r2, r2, #1
 8008ac4:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008ac6:	e011      	b.n	8008aec <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b0a      	cmp	r3, #10
 8008acc:	d90b      	bls.n	8008ae6 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad2:	f043 0201 	orr.w	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2203      	movs	r2, #3
 8008ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e045      	b.n	8008b72 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0e6      	beq.n	8008ac8 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0210 	bic.w	r2, r2, #16
 8008b0c:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008b0e:	e011      	b.n	8008b34 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b0a      	cmp	r3, #10
 8008b14:	d90b      	bls.n	8008b2e <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b1a:	f043 0201 	orr.w	r2, r3, #1
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2203      	movs	r2, #3
 8008b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e021      	b.n	8008b72 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3301      	adds	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d0e6      	beq.n	8008b10 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	699a      	ldr	r2, [r3, #24]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0202 	orr.w	r2, r2, #2
 8008b50:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Return function status */
    return HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	e006      	b.n	8008b72 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b68:	f043 0208 	orr.w	r2, r3, #8
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d12c      	bne.n	8008bf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008baa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e023      	b.n	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008bbe:	0c1b      	lsrs	r3, r3, #16
 8008bc0:	f003 0303 	and.w	r3, r3, #3
 8008bc4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fbff 	bl	80093d0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	fa01 f202 	lsl.w	r2, r1, r2
 8008bde:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008be2:	2201      	movs	r2, #1
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	409a      	lsls	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	e006      	b.n	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bf4:	f043 0208 	orr.w	r2, r3, #8
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b08b      	sub	sp, #44	@ 0x2c
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
 8008c14:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c20:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8008c22:	7efb      	ldrb	r3, [r7, #27]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	f040 80e8 	bne.w	8008dfa <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b40      	cmp	r3, #64	@ 0x40
 8008c2e:	d137      	bne.n	8008ca0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d107      	bne.n	8008c50 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e0db      	b.n	8008e08 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c58:	0e1b      	lsrs	r3, r3, #24
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d10a      	bne.n	8008c78 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c6a:	0a5b      	lsrs	r3, r3, #9
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008c74:	2301      	movs	r3, #1
 8008c76:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c80:	0a1b      	lsrs	r3, r3, #8
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	4613      	mov	r3, r2
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	4413      	add	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	440b      	add	r3, r1
 8008c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c9e:	e036      	b.n	8008d0e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d107      	bne.n	8008cc0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0a3      	b.n	8008e08 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cc8:	0e1b      	lsrs	r3, r3, #24
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d10a      	bne.n	8008ce8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cda:	0a1b      	lsrs	r3, r3, #8
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cf0:	0a1b      	lsrs	r3, r3, #8
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	4613      	mov	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	4413      	add	r3, r2
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	440b      	add	r3, r1
 8008d0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d107      	bne.n	8008d32 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	0c9b      	lsrs	r3, r3, #18
 8008d28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e005      	b.n	8008d3e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d58:	3304      	adds	r3, #4
 8008d5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	0c1b      	lsrs	r3, r3, #16
 8008d6c:	f003 020f 	and.w	r2, r3, #15
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	0e1b      	lsrs	r3, r3, #24
 8008d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	0fda      	lsrs	r2, r3, #31
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	3304      	adds	r3, #4
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008dae:	2300      	movs	r3, #0
 8008db0:	623b      	str	r3, [r7, #32]
 8008db2:	e00a      	b.n	8008dca <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	441a      	add	r2, r3
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	440b      	add	r3, r1
 8008dc0:	7812      	ldrb	r2, [r2, #0]
 8008dc2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	623b      	str	r3, [r7, #32]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	4a11      	ldr	r2, [pc, #68]	@ (8008e14 <HAL_FDCAN_GetRxMessage+0x20c>)
 8008dd0:	5cd3      	ldrb	r3, [r2, r3]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d3ec      	bcc.n	8008db4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b40      	cmp	r3, #64	@ 0x40
 8008dde:	d105      	bne.n	8008dec <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8008dea:	e004      	b.n	8008df6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	e006      	b.n	8008e08 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dfe:	f043 0208 	orr.w	r2, r3, #8
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
  }
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	372c      	adds	r7, #44	@ 0x2c
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	0800e920 	.word	0x0800e920

08008e18 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008e28:	f003 0307 	and.w	r3, r3, #7
 8008e2c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e4e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d003      	beq.n	8008e5e <HAL_FDCAN_ActivateNotification+0x22>
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	f040 80c8 	bne.w	8008fee <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e64:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d03b      	beq.n	8008ef2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d031      	beq.n	8008ef2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d027      	beq.n	8008ef2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d004      	beq.n	8008eb6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f003 0308 	and.w	r3, r3, #8
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01d      	beq.n	8008ef2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f003 0310 	and.w	r3, r3, #16
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d013      	beq.n	8008ef2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00c      	beq.n	8008f02 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d107      	bne.n	8008f02 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0201 	orr.w	r2, r2, #1
 8008f00:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d004      	beq.n	8008f16 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d13b      	bne.n	8008f8e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d131      	bne.n	8008f8e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d127      	bne.n	8008f8e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d004      	beq.n	8008f52 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d11d      	bne.n	8008f8e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f003 0310 	and.w	r3, r3, #16
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d113      	bne.n	8008f8e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d004      	beq.n	8008f7a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f003 0320 	and.w	r3, r3, #32
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00c      	beq.n	8008f9e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d007      	beq.n	8008f9e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f042 0202 	orr.w	r2, r2, #2
 8008f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d009      	beq.n	8008fbc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e006      	b.n	8008ffc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ff2:	f043 0202 	orr.w	r2, r3, #2
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
  }
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	371c      	adds	r7, #28
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08c      	sub	sp, #48	@ 0x30
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009016:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800901a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009024:	4013      	ands	r3, r2
 8009026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800903a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800903c:	4013      	ands	r3, r2
 800903e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800904a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009054:	4013      	ands	r3, r2
 8009056:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800905e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8009062:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800906a:	6a3a      	ldr	r2, [r7, #32]
 800906c:	4013      	ands	r3, r2
 800906e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009076:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800907a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	4013      	ands	r3, r2
 8009086:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800908e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009096:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d006      	beq.n	80090ba <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2240      	movs	r2, #64	@ 0x40
 80090b2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f900 	bl	80092ba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d019      	beq.n	80090f8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d014      	beq.n	80090f8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80090d6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4013      	ands	r3, r2
 80090e4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80090f0:	6939      	ldr	r1, [r7, #16]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f8c2 	bl	800927c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80090f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009104:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f8a2 	bl	8009252 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800910e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800911a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800911c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7fe fb64 	bl	80077ec <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	2b00      	cmp	r3, #0
 8009128:	d007      	beq.n	800913a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009130:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009132:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7fe fb6c 	bl	8007812 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00c      	beq.n	800915e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009156:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f885 	bl	8009268 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009164:	2b00      	cmp	r3, #0
 8009166:	d018      	beq.n	800919a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800916e:	2b00      	cmp	r3, #0
 8009170:	d013      	beq.n	800919a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800917a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4013      	ands	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2280      	movs	r2, #128	@ 0x80
 8009190:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009192:	68f9      	ldr	r1, [r7, #12]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7fe fb4f 	bl	8007838 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00c      	beq.n	80091be <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d007      	beq.n	80091be <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80091b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f86a 	bl	8009292 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00c      	beq.n	80091e2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d007      	beq.n	80091e2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80091da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f862 	bl	80092a6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00f      	beq.n	800920c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80091fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009204:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69fa      	ldr	r2, [r7, #28]
 8009218:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800921a:	69f9      	ldr	r1, [r7, #28]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f860 	bl	80092e2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d009      	beq.n	800923c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a3a      	ldr	r2, [r7, #32]
 800922e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	431a      	orrs	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f842 	bl	80092ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800924a:	bf00      	nop
 800924c:	3730      	adds	r7, #48	@ 0x30
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800929a:	bf00      	nop
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b083      	sub	sp, #12
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80092ae:	bf00      	nop
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009300:	4b30      	ldr	r3, [pc, #192]	@ (80093c4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009302:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a2f      	ldr	r2, [pc, #188]	@ (80093c8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d103      	bne.n	8009316 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009314:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a2c      	ldr	r2, [pc, #176]	@ (80093cc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d103      	bne.n	8009328 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8009326:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009336:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800933e:	041a      	lsls	r2, r3, #16
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800935c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009364:	061a      	lsls	r2, r3, #24
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	e005      	b.n	80093aa <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3304      	adds	r3, #4
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d3f3      	bcc.n	800939e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	4000a400 	.word	0x4000a400
 80093c8:	40006800 	.word	0x40006800
 80093cc:	40006c00 	.word	0x40006c00

080093d0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b089      	sub	sp, #36	@ 0x24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80093ee:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80093f6:	4313      	orrs	r3, r2
 80093f8:	61fb      	str	r3, [r7, #28]
 80093fa:	e00a      	b.n	8009412 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009404:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800940a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800940c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009410:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800941c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009422:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009428:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	4613      	mov	r3, r2
 800943c:	00db      	lsls	r3, r3, #3
 800943e:	4413      	add	r3, r2
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	440b      	add	r3, r1
 8009444:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	69fa      	ldr	r2, [r7, #28]
 800944a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	3304      	adds	r3, #4
 8009450:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	3304      	adds	r3, #4
 800945c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e020      	b.n	80094a6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	3303      	adds	r3, #3
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	4413      	add	r3, r2
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	3302      	adds	r3, #2
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	440b      	add	r3, r1
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800947c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	3301      	adds	r3, #1
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	440b      	add	r3, r1
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800948a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	440a      	add	r2, r1
 8009492:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009494:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	3304      	adds	r3, #4
 800949e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	3304      	adds	r3, #4
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	4a06      	ldr	r2, [pc, #24]	@ (80094c4 <FDCAN_CopyMessageToRAM+0xf4>)
 80094ac:	5cd3      	ldrb	r3, [r2, r3]
 80094ae:	461a      	mov	r2, r3
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d3d6      	bcc.n	8009464 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80094b6:	bf00      	nop
 80094b8:	bf00      	nop
 80094ba:	3724      	adds	r7, #36	@ 0x24
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	0800e920 	.word	0x0800e920

080094c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80094d6:	e15a      	b.n	800978e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	2101      	movs	r1, #1
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	fa01 f303 	lsl.w	r3, r1, r3
 80094e4:	4013      	ands	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 814c 	beq.w	8009788 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f003 0303 	and.w	r3, r3, #3
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d005      	beq.n	8009508 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009504:	2b02      	cmp	r3, #2
 8009506:	d130      	bne.n	800956a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	2203      	movs	r2, #3
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	43db      	mvns	r3, r3
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	4013      	ands	r3, r2
 800951e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	4313      	orrs	r3, r2
 8009530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800953e:	2201      	movs	r2, #1
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	fa02 f303 	lsl.w	r3, r2, r3
 8009546:	43db      	mvns	r3, r3
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4013      	ands	r3, r2
 800954c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	091b      	lsrs	r3, r3, #4
 8009554:	f003 0201 	and.w	r2, r3, #1
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	fa02 f303 	lsl.w	r3, r2, r3
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	4313      	orrs	r3, r2
 8009562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f003 0303 	and.w	r3, r3, #3
 8009572:	2b03      	cmp	r3, #3
 8009574:	d017      	beq.n	80095a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	2203      	movs	r2, #3
 8009582:	fa02 f303 	lsl.w	r3, r2, r3
 8009586:	43db      	mvns	r3, r3
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4013      	ands	r3, r2
 800958c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	fa02 f303 	lsl.w	r3, r2, r3
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	4313      	orrs	r3, r2
 800959e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f003 0303 	and.w	r3, r3, #3
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d123      	bne.n	80095fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	08da      	lsrs	r2, r3, #3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3208      	adds	r2, #8
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	220f      	movs	r2, #15
 80095ca:	fa02 f303 	lsl.w	r3, r2, r3
 80095ce:	43db      	mvns	r3, r3
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4013      	ands	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f003 0307 	and.w	r3, r3, #7
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	fa02 f303 	lsl.w	r3, r2, r3
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	08da      	lsrs	r2, r3, #3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3208      	adds	r2, #8
 80095f4:	6939      	ldr	r1, [r7, #16]
 80095f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	2203      	movs	r2, #3
 8009606:	fa02 f303 	lsl.w	r3, r2, r3
 800960a:	43db      	mvns	r3, r3
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	4013      	ands	r3, r2
 8009610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f003 0203 	and.w	r2, r3, #3
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	fa02 f303 	lsl.w	r3, r2, r3
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	4313      	orrs	r3, r2
 8009626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 80a6 	beq.w	8009788 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800963c:	4b5b      	ldr	r3, [pc, #364]	@ (80097ac <HAL_GPIO_Init+0x2e4>)
 800963e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009640:	4a5a      	ldr	r2, [pc, #360]	@ (80097ac <HAL_GPIO_Init+0x2e4>)
 8009642:	f043 0301 	orr.w	r3, r3, #1
 8009646:	6613      	str	r3, [r2, #96]	@ 0x60
 8009648:	4b58      	ldr	r3, [pc, #352]	@ (80097ac <HAL_GPIO_Init+0x2e4>)
 800964a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009654:	4a56      	ldr	r2, [pc, #344]	@ (80097b0 <HAL_GPIO_Init+0x2e8>)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	089b      	lsrs	r3, r3, #2
 800965a:	3302      	adds	r3, #2
 800965c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f003 0303 	and.w	r3, r3, #3
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	220f      	movs	r2, #15
 800966c:	fa02 f303 	lsl.w	r3, r2, r3
 8009670:	43db      	mvns	r3, r3
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	4013      	ands	r3, r2
 8009676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800967e:	d01f      	beq.n	80096c0 <HAL_GPIO_Init+0x1f8>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a4c      	ldr	r2, [pc, #304]	@ (80097b4 <HAL_GPIO_Init+0x2ec>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d019      	beq.n	80096bc <HAL_GPIO_Init+0x1f4>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a4b      	ldr	r2, [pc, #300]	@ (80097b8 <HAL_GPIO_Init+0x2f0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d013      	beq.n	80096b8 <HAL_GPIO_Init+0x1f0>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a4a      	ldr	r2, [pc, #296]	@ (80097bc <HAL_GPIO_Init+0x2f4>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00d      	beq.n	80096b4 <HAL_GPIO_Init+0x1ec>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a49      	ldr	r2, [pc, #292]	@ (80097c0 <HAL_GPIO_Init+0x2f8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d007      	beq.n	80096b0 <HAL_GPIO_Init+0x1e8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a48      	ldr	r2, [pc, #288]	@ (80097c4 <HAL_GPIO_Init+0x2fc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d101      	bne.n	80096ac <HAL_GPIO_Init+0x1e4>
 80096a8:	2305      	movs	r3, #5
 80096aa:	e00a      	b.n	80096c2 <HAL_GPIO_Init+0x1fa>
 80096ac:	2306      	movs	r3, #6
 80096ae:	e008      	b.n	80096c2 <HAL_GPIO_Init+0x1fa>
 80096b0:	2304      	movs	r3, #4
 80096b2:	e006      	b.n	80096c2 <HAL_GPIO_Init+0x1fa>
 80096b4:	2303      	movs	r3, #3
 80096b6:	e004      	b.n	80096c2 <HAL_GPIO_Init+0x1fa>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e002      	b.n	80096c2 <HAL_GPIO_Init+0x1fa>
 80096bc:	2301      	movs	r3, #1
 80096be:	e000      	b.n	80096c2 <HAL_GPIO_Init+0x1fa>
 80096c0:	2300      	movs	r3, #0
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	f002 0203 	and.w	r2, r2, #3
 80096c8:	0092      	lsls	r2, r2, #2
 80096ca:	4093      	lsls	r3, r2
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096d2:	4937      	ldr	r1, [pc, #220]	@ (80097b0 <HAL_GPIO_Init+0x2e8>)
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	089b      	lsrs	r3, r3, #2
 80096d8:	3302      	adds	r3, #2
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80096e0:	4b39      	ldr	r3, [pc, #228]	@ (80097c8 <HAL_GPIO_Init+0x300>)
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	43db      	mvns	r3, r3
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4013      	ands	r3, r2
 80096ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009704:	4a30      	ldr	r2, [pc, #192]	@ (80097c8 <HAL_GPIO_Init+0x300>)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800970a:	4b2f      	ldr	r3, [pc, #188]	@ (80097c8 <HAL_GPIO_Init+0x300>)
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	43db      	mvns	r3, r3
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4013      	ands	r3, r2
 8009718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800972e:	4a26      	ldr	r2, [pc, #152]	@ (80097c8 <HAL_GPIO_Init+0x300>)
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009734:	4b24      	ldr	r3, [pc, #144]	@ (80097c8 <HAL_GPIO_Init+0x300>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	43db      	mvns	r3, r3
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4013      	ands	r3, r2
 8009742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009758:	4a1b      	ldr	r2, [pc, #108]	@ (80097c8 <HAL_GPIO_Init+0x300>)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800975e:	4b1a      	ldr	r3, [pc, #104]	@ (80097c8 <HAL_GPIO_Init+0x300>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	43db      	mvns	r3, r3
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4013      	ands	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4313      	orrs	r3, r2
 8009780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009782:	4a11      	ldr	r2, [pc, #68]	@ (80097c8 <HAL_GPIO_Init+0x300>)
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	3301      	adds	r3, #1
 800978c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	f47f ae9d 	bne.w	80094d8 <HAL_GPIO_Init+0x10>
  }
}
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	371c      	adds	r7, #28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	40021000 	.word	0x40021000
 80097b0:	40010000 	.word	0x40010000
 80097b4:	48000400 	.word	0x48000400
 80097b8:	48000800 	.word	0x48000800
 80097bc:	48000c00 	.word	0x48000c00
 80097c0:	48001000 	.word	0x48001000
 80097c4:	48001400 	.word	0x48001400
 80097c8:	40010400 	.word	0x40010400

080097cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	807b      	strh	r3, [r7, #2]
 80097d8:	4613      	mov	r3, r2
 80097da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80097dc:	787b      	ldrb	r3, [r7, #1]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80097e2:	887a      	ldrh	r2, [r7, #2]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80097e8:	e002      	b.n	80097f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80097ea:	887a      	ldrh	r2, [r7, #2]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009806:	4b08      	ldr	r3, [pc, #32]	@ (8009828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009808:	695a      	ldr	r2, [r3, #20]
 800980a:	88fb      	ldrh	r3, [r7, #6]
 800980c:	4013      	ands	r3, r2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d006      	beq.n	8009820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009812:	4a05      	ldr	r2, [pc, #20]	@ (8009828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009814:	88fb      	ldrh	r3, [r7, #6]
 8009816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009818:	88fb      	ldrh	r3, [r7, #6]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 f806 	bl	800982c <HAL_GPIO_EXTI_Callback>
  }
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	40010400 	.word	0x40010400

0800982c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009836:	bf00      	nop
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
	...

08009844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d141      	bne.n	80098d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009852:	4b4b      	ldr	r3, [pc, #300]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800985a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800985e:	d131      	bne.n	80098c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009860:	4b47      	ldr	r3, [pc, #284]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009866:	4a46      	ldr	r2, [pc, #280]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800986c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009870:	4b43      	ldr	r3, [pc, #268]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009878:	4a41      	ldr	r2, [pc, #260]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800987a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800987e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009880:	4b40      	ldr	r3, [pc, #256]	@ (8009984 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2232      	movs	r2, #50	@ 0x32
 8009886:	fb02 f303 	mul.w	r3, r2, r3
 800988a:	4a3f      	ldr	r2, [pc, #252]	@ (8009988 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800988c:	fba2 2303 	umull	r2, r3, r2, r3
 8009890:	0c9b      	lsrs	r3, r3, #18
 8009892:	3301      	adds	r3, #1
 8009894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009896:	e002      	b.n	800989e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3b01      	subs	r3, #1
 800989c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800989e:	4b38      	ldr	r3, [pc, #224]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098aa:	d102      	bne.n	80098b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f2      	bne.n	8009898 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80098b2:	4b33      	ldr	r3, [pc, #204]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098be:	d158      	bne.n	8009972 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e057      	b.n	8009974 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80098c4:	4b2e      	ldr	r3, [pc, #184]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ca:	4a2d      	ldr	r2, [pc, #180]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80098d4:	e04d      	b.n	8009972 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098dc:	d141      	bne.n	8009962 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80098de:	4b28      	ldr	r3, [pc, #160]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80098e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098ea:	d131      	bne.n	8009950 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80098ec:	4b24      	ldr	r3, [pc, #144]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098f2:	4a23      	ldr	r2, [pc, #140]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80098fc:	4b20      	ldr	r3, [pc, #128]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009904:	4a1e      	ldr	r2, [pc, #120]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800990a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800990c:	4b1d      	ldr	r3, [pc, #116]	@ (8009984 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2232      	movs	r2, #50	@ 0x32
 8009912:	fb02 f303 	mul.w	r3, r2, r3
 8009916:	4a1c      	ldr	r2, [pc, #112]	@ (8009988 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	0c9b      	lsrs	r3, r3, #18
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009922:	e002      	b.n	800992a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3b01      	subs	r3, #1
 8009928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800992a:	4b15      	ldr	r3, [pc, #84]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009936:	d102      	bne.n	800993e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1f2      	bne.n	8009924 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800993e:	4b10      	ldr	r3, [pc, #64]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800994a:	d112      	bne.n	8009972 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e011      	b.n	8009974 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009950:	4b0b      	ldr	r3, [pc, #44]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009956:	4a0a      	ldr	r2, [pc, #40]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800995c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009960:	e007      	b.n	8009972 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009962:	4b07      	ldr	r3, [pc, #28]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800996a:	4a05      	ldr	r2, [pc, #20]	@ (8009980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800996c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009970:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	40007000 	.word	0x40007000
 8009984:	200003d0 	.word	0x200003d0
 8009988:	431bde83 	.word	0x431bde83

0800998c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009990:	4b05      	ldr	r3, [pc, #20]	@ (80099a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	4a04      	ldr	r2, [pc, #16]	@ (80099a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800999a:	6093      	str	r3, [r2, #8]
}
 800999c:	bf00      	nop
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	40007000 	.word	0x40007000

080099ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e2fe      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d075      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ca:	4b97      	ldr	r3, [pc, #604]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 030c 	and.w	r3, r3, #12
 80099d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099d4:	4b94      	ldr	r3, [pc, #592]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b0c      	cmp	r3, #12
 80099e2:	d102      	bne.n	80099ea <HAL_RCC_OscConfig+0x3e>
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d002      	beq.n	80099f0 <HAL_RCC_OscConfig+0x44>
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b08      	cmp	r3, #8
 80099ee:	d10b      	bne.n	8009a08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099f0:	4b8d      	ldr	r3, [pc, #564]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d05b      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x108>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d157      	bne.n	8009ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e2d9      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a10:	d106      	bne.n	8009a20 <HAL_RCC_OscConfig+0x74>
 8009a12:	4b85      	ldr	r3, [pc, #532]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a84      	ldr	r2, [pc, #528]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	e01d      	b.n	8009a5c <HAL_RCC_OscConfig+0xb0>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a28:	d10c      	bne.n	8009a44 <HAL_RCC_OscConfig+0x98>
 8009a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	4b7c      	ldr	r3, [pc, #496]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a7b      	ldr	r2, [pc, #492]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	e00b      	b.n	8009a5c <HAL_RCC_OscConfig+0xb0>
 8009a44:	4b78      	ldr	r3, [pc, #480]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a77      	ldr	r2, [pc, #476]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	4b75      	ldr	r3, [pc, #468]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a74      	ldr	r2, [pc, #464]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d013      	beq.n	8009a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a64:	f7fe fd32 	bl	80084cc <HAL_GetTick>
 8009a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a6c:	f7fe fd2e 	bl	80084cc <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b64      	cmp	r3, #100	@ 0x64
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e29e      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f0      	beq.n	8009a6c <HAL_RCC_OscConfig+0xc0>
 8009a8a:	e014      	b.n	8009ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8c:	f7fe fd1e 	bl	80084cc <HAL_GetTick>
 8009a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a94:	f7fe fd1a 	bl	80084cc <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b64      	cmp	r3, #100	@ 0x64
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e28a      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009aa6:	4b60      	ldr	r3, [pc, #384]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f0      	bne.n	8009a94 <HAL_RCC_OscConfig+0xe8>
 8009ab2:	e000      	b.n	8009ab6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d075      	beq.n	8009bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ac2:	4b59      	ldr	r3, [pc, #356]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 030c 	and.w	r3, r3, #12
 8009aca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009acc:	4b56      	ldr	r3, [pc, #344]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b0c      	cmp	r3, #12
 8009ada:	d102      	bne.n	8009ae2 <HAL_RCC_OscConfig+0x136>
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d002      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x13c>
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d11f      	bne.n	8009b28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d005      	beq.n	8009b00 <HAL_RCC_OscConfig+0x154>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e25d      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b00:	4b49      	ldr	r3, [pc, #292]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	061b      	lsls	r3, r3, #24
 8009b0e:	4946      	ldr	r1, [pc, #280]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009b14:	4b45      	ldr	r3, [pc, #276]	@ (8009c2c <HAL_RCC_OscConfig+0x280>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe fc8b 	bl	8008434 <HAL_InitTick>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d043      	beq.n	8009bac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e249      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d023      	beq.n	8009b78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b30:	4b3d      	ldr	r3, [pc, #244]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a3c      	ldr	r2, [pc, #240]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3c:	f7fe fcc6 	bl	80084cc <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b44:	f7fe fcc2 	bl	80084cc <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e232      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b56:	4b34      	ldr	r3, [pc, #208]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0f0      	beq.n	8009b44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b62:	4b31      	ldr	r3, [pc, #196]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	061b      	lsls	r3, r3, #24
 8009b70:	492d      	ldr	r1, [pc, #180]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	604b      	str	r3, [r1, #4]
 8009b76:	e01a      	b.n	8009bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b78:	4b2b      	ldr	r3, [pc, #172]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009b7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b84:	f7fe fca2 	bl	80084cc <HAL_GetTick>
 8009b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b8c:	f7fe fc9e 	bl	80084cc <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e20e      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b9e:	4b22      	ldr	r3, [pc, #136]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f0      	bne.n	8009b8c <HAL_RCC_OscConfig+0x1e0>
 8009baa:	e000      	b.n	8009bae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0308 	and.w	r3, r3, #8
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d041      	beq.n	8009c3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d01c      	beq.n	8009bfc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bc2:	4b19      	ldr	r3, [pc, #100]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bc8:	4a17      	ldr	r2, [pc, #92]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009bca:	f043 0301 	orr.w	r3, r3, #1
 8009bce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bd2:	f7fe fc7b 	bl	80084cc <HAL_GetTick>
 8009bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009bd8:	e008      	b.n	8009bec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bda:	f7fe fc77 	bl	80084cc <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d901      	bls.n	8009bec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e1e7      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009bec:	4b0e      	ldr	r3, [pc, #56]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0ef      	beq.n	8009bda <HAL_RCC_OscConfig+0x22e>
 8009bfa:	e020      	b.n	8009c3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c02:	4a09      	ldr	r2, [pc, #36]	@ (8009c28 <HAL_RCC_OscConfig+0x27c>)
 8009c04:	f023 0301 	bic.w	r3, r3, #1
 8009c08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c0c:	f7fe fc5e 	bl	80084cc <HAL_GetTick>
 8009c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c12:	e00d      	b.n	8009c30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c14:	f7fe fc5a 	bl	80084cc <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d906      	bls.n	8009c30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e1ca      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
 8009c26:	bf00      	nop
 8009c28:	40021000 	.word	0x40021000
 8009c2c:	200003d4 	.word	0x200003d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c30:	4b8c      	ldr	r3, [pc, #560]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1ea      	bne.n	8009c14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0304 	and.w	r3, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80a6 	beq.w	8009d98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009c50:	4b84      	ldr	r3, [pc, #528]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <HAL_RCC_OscConfig+0x2b4>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <HAL_RCC_OscConfig+0x2b6>
 8009c60:	2300      	movs	r3, #0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00d      	beq.n	8009c82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c66:	4b7f      	ldr	r3, [pc, #508]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c72:	4b7c      	ldr	r3, [pc, #496]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c82:	4b79      	ldr	r3, [pc, #484]	@ (8009e68 <HAL_RCC_OscConfig+0x4bc>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d118      	bne.n	8009cc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c8e:	4b76      	ldr	r3, [pc, #472]	@ (8009e68 <HAL_RCC_OscConfig+0x4bc>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a75      	ldr	r2, [pc, #468]	@ (8009e68 <HAL_RCC_OscConfig+0x4bc>)
 8009c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c9a:	f7fe fc17 	bl	80084cc <HAL_GetTick>
 8009c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ca0:	e008      	b.n	8009cb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ca2:	f7fe fc13 	bl	80084cc <HAL_GetTick>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d901      	bls.n	8009cb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e183      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8009e68 <HAL_RCC_OscConfig+0x4bc>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0f0      	beq.n	8009ca2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d108      	bne.n	8009cda <HAL_RCC_OscConfig+0x32e>
 8009cc8:	4b66      	ldr	r3, [pc, #408]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cce:	4a65      	ldr	r2, [pc, #404]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009cd0:	f043 0301 	orr.w	r3, r3, #1
 8009cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009cd8:	e024      	b.n	8009d24 <HAL_RCC_OscConfig+0x378>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b05      	cmp	r3, #5
 8009ce0:	d110      	bne.n	8009d04 <HAL_RCC_OscConfig+0x358>
 8009ce2:	4b60      	ldr	r3, [pc, #384]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce8:	4a5e      	ldr	r2, [pc, #376]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009cea:	f043 0304 	orr.w	r3, r3, #4
 8009cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009cfa:	f043 0301 	orr.w	r3, r3, #1
 8009cfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d02:	e00f      	b.n	8009d24 <HAL_RCC_OscConfig+0x378>
 8009d04:	4b57      	ldr	r3, [pc, #348]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d0a:	4a56      	ldr	r2, [pc, #344]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009d0c:	f023 0301 	bic.w	r3, r3, #1
 8009d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d14:	4b53      	ldr	r3, [pc, #332]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d1a:	4a52      	ldr	r2, [pc, #328]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009d1c:	f023 0304 	bic.w	r3, r3, #4
 8009d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d016      	beq.n	8009d5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d2c:	f7fe fbce 	bl	80084cc <HAL_GetTick>
 8009d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d32:	e00a      	b.n	8009d4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d34:	f7fe fbca 	bl	80084cc <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d901      	bls.n	8009d4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e138      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d4a:	4b46      	ldr	r3, [pc, #280]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0ed      	beq.n	8009d34 <HAL_RCC_OscConfig+0x388>
 8009d58:	e015      	b.n	8009d86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d5a:	f7fe fbb7 	bl	80084cc <HAL_GetTick>
 8009d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d60:	e00a      	b.n	8009d78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d62:	f7fe fbb3 	bl	80084cc <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d901      	bls.n	8009d78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e121      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d78:	4b3a      	ldr	r3, [pc, #232]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1ed      	bne.n	8009d62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d86:	7ffb      	ldrb	r3, [r7, #31]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d105      	bne.n	8009d98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d8c:	4b35      	ldr	r3, [pc, #212]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d90:	4a34      	ldr	r2, [pc, #208]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0320 	and.w	r3, r3, #32
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d03c      	beq.n	8009e1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d01c      	beq.n	8009de6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009dac:	4b2d      	ldr	r3, [pc, #180]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009db2:	4a2c      	ldr	r2, [pc, #176]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009db4:	f043 0301 	orr.w	r3, r3, #1
 8009db8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dbc:	f7fe fb86 	bl	80084cc <HAL_GetTick>
 8009dc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009dc2:	e008      	b.n	8009dd6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009dc4:	f7fe fb82 	bl	80084cc <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d901      	bls.n	8009dd6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e0f2      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009dd6:	4b23      	ldr	r3, [pc, #140]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0ef      	beq.n	8009dc4 <HAL_RCC_OscConfig+0x418>
 8009de4:	e01b      	b.n	8009e1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009de6:	4b1f      	ldr	r3, [pc, #124]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009dec:	4a1d      	ldr	r2, [pc, #116]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009dee:	f023 0301 	bic.w	r3, r3, #1
 8009df2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009df6:	f7fe fb69 	bl	80084cc <HAL_GetTick>
 8009dfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009dfc:	e008      	b.n	8009e10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009dfe:	f7fe fb65 	bl	80084cc <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d901      	bls.n	8009e10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e0d5      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009e10:	4b14      	ldr	r3, [pc, #80]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1ef      	bne.n	8009dfe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 80c9 	beq.w	8009fba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e28:	4b0e      	ldr	r3, [pc, #56]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f003 030c 	and.w	r3, r3, #12
 8009e30:	2b0c      	cmp	r3, #12
 8009e32:	f000 8083 	beq.w	8009f3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d15e      	bne.n	8009efc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e3e:	4b09      	ldr	r3, [pc, #36]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a08      	ldr	r2, [pc, #32]	@ (8009e64 <HAL_RCC_OscConfig+0x4b8>)
 8009e44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e4a:	f7fe fb3f 	bl	80084cc <HAL_GetTick>
 8009e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e50:	e00c      	b.n	8009e6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e52:	f7fe fb3b 	bl	80084cc <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d905      	bls.n	8009e6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e0ab      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
 8009e64:	40021000 	.word	0x40021000
 8009e68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e6c:	4b55      	ldr	r3, [pc, #340]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1ec      	bne.n	8009e52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e78:	4b52      	ldr	r3, [pc, #328]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009e7a:	68da      	ldr	r2, [r3, #12]
 8009e7c:	4b52      	ldr	r3, [pc, #328]	@ (8009fc8 <HAL_RCC_OscConfig+0x61c>)
 8009e7e:	4013      	ands	r3, r2
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	6a11      	ldr	r1, [r2, #32]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009e88:	3a01      	subs	r2, #1
 8009e8a:	0112      	lsls	r2, r2, #4
 8009e8c:	4311      	orrs	r1, r2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009e92:	0212      	lsls	r2, r2, #8
 8009e94:	4311      	orrs	r1, r2
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009e9a:	0852      	lsrs	r2, r2, #1
 8009e9c:	3a01      	subs	r2, #1
 8009e9e:	0552      	lsls	r2, r2, #21
 8009ea0:	4311      	orrs	r1, r2
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009ea6:	0852      	lsrs	r2, r2, #1
 8009ea8:	3a01      	subs	r2, #1
 8009eaa:	0652      	lsls	r2, r2, #25
 8009eac:	4311      	orrs	r1, r2
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009eb2:	06d2      	lsls	r2, r2, #27
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	4943      	ldr	r1, [pc, #268]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ebc:	4b41      	ldr	r3, [pc, #260]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a40      	ldr	r2, [pc, #256]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ec6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	4a3d      	ldr	r2, [pc, #244]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ed2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed4:	f7fe fafa 	bl	80084cc <HAL_GetTick>
 8009ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009eda:	e008      	b.n	8009eee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009edc:	f7fe faf6 	bl	80084cc <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d901      	bls.n	8009eee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e066      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009eee:	4b35      	ldr	r3, [pc, #212]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0f0      	beq.n	8009edc <HAL_RCC_OscConfig+0x530>
 8009efa:	e05e      	b.n	8009fba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009efc:	4b31      	ldr	r3, [pc, #196]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a30      	ldr	r2, [pc, #192]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f08:	f7fe fae0 	bl	80084cc <HAL_GetTick>
 8009f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f0e:	e008      	b.n	8009f22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f10:	f7fe fadc 	bl	80084cc <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e04c      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f22:	4b28      	ldr	r3, [pc, #160]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1f0      	bne.n	8009f10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009f2e:	4b25      	ldr	r3, [pc, #148]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	4924      	ldr	r1, [pc, #144]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009f34:	4b25      	ldr	r3, [pc, #148]	@ (8009fcc <HAL_RCC_OscConfig+0x620>)
 8009f36:	4013      	ands	r3, r2
 8009f38:	60cb      	str	r3, [r1, #12]
 8009f3a:	e03e      	b.n	8009fba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e039      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009f48:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc4 <HAL_RCC_OscConfig+0x618>)
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f003 0203 	and.w	r2, r3, #3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d12c      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f66:	3b01      	subs	r3, #1
 8009f68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d123      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d11b      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d113      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f98:	085b      	lsrs	r3, r3, #1
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d109      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fac:	085b      	lsrs	r3, r3, #1
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d001      	beq.n	8009fba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e000      	b.n	8009fbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3720      	adds	r7, #32
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40021000 	.word	0x40021000
 8009fc8:	019f800c 	.word	0x019f800c
 8009fcc:	feeefffc 	.word	0xfeeefffc

08009fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e11e      	b.n	800a226 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009fe8:	4b91      	ldr	r3, [pc, #580]	@ (800a230 <HAL_RCC_ClockConfig+0x260>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 030f 	and.w	r3, r3, #15
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d910      	bls.n	800a018 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ff6:	4b8e      	ldr	r3, [pc, #568]	@ (800a230 <HAL_RCC_ClockConfig+0x260>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f023 020f 	bic.w	r2, r3, #15
 8009ffe:	498c      	ldr	r1, [pc, #560]	@ (800a230 <HAL_RCC_ClockConfig+0x260>)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	4313      	orrs	r3, r2
 800a004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a006:	4b8a      	ldr	r3, [pc, #552]	@ (800a230 <HAL_RCC_ClockConfig+0x260>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 030f 	and.w	r3, r3, #15
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d001      	beq.n	800a018 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e106      	b.n	800a226 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b00      	cmp	r3, #0
 800a022:	d073      	beq.n	800a10c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d129      	bne.n	800a080 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a02c:	4b81      	ldr	r3, [pc, #516]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e0f4      	b.n	800a226 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a03c:	f000 f99e 	bl	800a37c <RCC_GetSysClockFreqFromPLLSource>
 800a040:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	4a7c      	ldr	r2, [pc, #496]	@ (800a238 <HAL_RCC_ClockConfig+0x268>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d93f      	bls.n	800a0ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a04a:	4b7a      	ldr	r3, [pc, #488]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d009      	beq.n	800a06a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d033      	beq.n	800a0ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a066:	2b00      	cmp	r3, #0
 800a068:	d12f      	bne.n	800a0ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a06a:	4b72      	ldr	r3, [pc, #456]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a072:	4a70      	ldr	r2, [pc, #448]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a078:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a07a:	2380      	movs	r3, #128	@ 0x80
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	e024      	b.n	800a0ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d107      	bne.n	800a098 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a088:	4b6a      	ldr	r3, [pc, #424]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d109      	bne.n	800a0a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e0c6      	b.n	800a226 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a098:	4b66      	ldr	r3, [pc, #408]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e0be      	b.n	800a226 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a0a8:	f000 f8ce 	bl	800a248 <HAL_RCC_GetSysClockFreq>
 800a0ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	4a61      	ldr	r2, [pc, #388]	@ (800a238 <HAL_RCC_ClockConfig+0x268>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d909      	bls.n	800a0ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a0b6:	4b5f      	ldr	r3, [pc, #380]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0be:	4a5d      	ldr	r2, [pc, #372]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a0c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a0c6:	2380      	movs	r3, #128	@ 0x80
 800a0c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0ca:	4b5a      	ldr	r3, [pc, #360]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f023 0203 	bic.w	r2, r3, #3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	4957      	ldr	r1, [pc, #348]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0dc:	f7fe f9f6 	bl	80084cc <HAL_GetTick>
 800a0e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0e2:	e00a      	b.n	800a0fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0e4:	f7fe f9f2 	bl	80084cc <HAL_GetTick>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e095      	b.n	800a226 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0fa:	4b4e      	ldr	r3, [pc, #312]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f003 020c 	and.w	r2, r3, #12
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	429a      	cmp	r2, r3
 800a10a:	d1eb      	bne.n	800a0e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d023      	beq.n	800a160 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0304 	and.w	r3, r3, #4
 800a120:	2b00      	cmp	r3, #0
 800a122:	d005      	beq.n	800a130 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a124:	4b43      	ldr	r3, [pc, #268]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	4a42      	ldr	r2, [pc, #264]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a12a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a12e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0308 	and.w	r3, r3, #8
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a13c:	4b3d      	ldr	r3, [pc, #244]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a144:	4a3b      	ldr	r2, [pc, #236]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a146:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a14a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a14c:	4b39      	ldr	r3, [pc, #228]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	4936      	ldr	r1, [pc, #216]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	608b      	str	r3, [r1, #8]
 800a15e:	e008      	b.n	800a172 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2b80      	cmp	r3, #128	@ 0x80
 800a164:	d105      	bne.n	800a172 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a166:	4b33      	ldr	r3, [pc, #204]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	4a32      	ldr	r2, [pc, #200]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a16c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a170:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a172:	4b2f      	ldr	r3, [pc, #188]	@ (800a230 <HAL_RCC_ClockConfig+0x260>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 030f 	and.w	r3, r3, #15
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d21d      	bcs.n	800a1bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a180:	4b2b      	ldr	r3, [pc, #172]	@ (800a230 <HAL_RCC_ClockConfig+0x260>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f023 020f 	bic.w	r2, r3, #15
 800a188:	4929      	ldr	r1, [pc, #164]	@ (800a230 <HAL_RCC_ClockConfig+0x260>)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a190:	f7fe f99c 	bl	80084cc <HAL_GetTick>
 800a194:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a196:	e00a      	b.n	800a1ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a198:	f7fe f998 	bl	80084cc <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e03b      	b.n	800a226 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1ae:	4b20      	ldr	r3, [pc, #128]	@ (800a230 <HAL_RCC_ClockConfig+0x260>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 030f 	and.w	r3, r3, #15
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d1ed      	bne.n	800a198 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d008      	beq.n	800a1da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	4917      	ldr	r1, [pc, #92]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0308 	and.w	r3, r3, #8
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d009      	beq.n	800a1fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a1e6:	4b13      	ldr	r3, [pc, #76]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	490f      	ldr	r1, [pc, #60]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a1fa:	f000 f825 	bl	800a248 <HAL_RCC_GetSysClockFreq>
 800a1fe:	4602      	mov	r2, r0
 800a200:	4b0c      	ldr	r3, [pc, #48]	@ (800a234 <HAL_RCC_ClockConfig+0x264>)
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	091b      	lsrs	r3, r3, #4
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	490c      	ldr	r1, [pc, #48]	@ (800a23c <HAL_RCC_ClockConfig+0x26c>)
 800a20c:	5ccb      	ldrb	r3, [r1, r3]
 800a20e:	f003 031f 	and.w	r3, r3, #31
 800a212:	fa22 f303 	lsr.w	r3, r2, r3
 800a216:	4a0a      	ldr	r2, [pc, #40]	@ (800a240 <HAL_RCC_ClockConfig+0x270>)
 800a218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a21a:	4b0a      	ldr	r3, [pc, #40]	@ (800a244 <HAL_RCC_ClockConfig+0x274>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe f908 	bl	8008434 <HAL_InitTick>
 800a224:	4603      	mov	r3, r0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	40022000 	.word	0x40022000
 800a234:	40021000 	.word	0x40021000
 800a238:	04c4b400 	.word	0x04c4b400
 800a23c:	0800e908 	.word	0x0800e908
 800a240:	200003d0 	.word	0x200003d0
 800a244:	200003d4 	.word	0x200003d4

0800a248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a248:	b480      	push	{r7}
 800a24a:	b087      	sub	sp, #28
 800a24c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a24e:	4b2c      	ldr	r3, [pc, #176]	@ (800a300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f003 030c 	and.w	r3, r3, #12
 800a256:	2b04      	cmp	r3, #4
 800a258:	d102      	bne.n	800a260 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a25a:	4b2a      	ldr	r3, [pc, #168]	@ (800a304 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a25c:	613b      	str	r3, [r7, #16]
 800a25e:	e047      	b.n	800a2f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a260:	4b27      	ldr	r3, [pc, #156]	@ (800a300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f003 030c 	and.w	r3, r3, #12
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d102      	bne.n	800a272 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a26c:	4b26      	ldr	r3, [pc, #152]	@ (800a308 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	e03e      	b.n	800a2f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a272:	4b23      	ldr	r3, [pc, #140]	@ (800a300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f003 030c 	and.w	r3, r3, #12
 800a27a:	2b0c      	cmp	r3, #12
 800a27c:	d136      	bne.n	800a2ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a27e:	4b20      	ldr	r3, [pc, #128]	@ (800a300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a288:	4b1d      	ldr	r3, [pc, #116]	@ (800a300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	091b      	lsrs	r3, r3, #4
 800a28e:	f003 030f 	and.w	r3, r3, #15
 800a292:	3301      	adds	r3, #1
 800a294:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d10c      	bne.n	800a2b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a29c:	4a1a      	ldr	r2, [pc, #104]	@ (800a308 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a4:	4a16      	ldr	r2, [pc, #88]	@ (800a300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2a6:	68d2      	ldr	r2, [r2, #12]
 800a2a8:	0a12      	lsrs	r2, r2, #8
 800a2aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a2ae:	fb02 f303 	mul.w	r3, r2, r3
 800a2b2:	617b      	str	r3, [r7, #20]
      break;
 800a2b4:	e00c      	b.n	800a2d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2b6:	4a13      	ldr	r2, [pc, #76]	@ (800a304 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2be:	4a10      	ldr	r2, [pc, #64]	@ (800a300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2c0:	68d2      	ldr	r2, [r2, #12]
 800a2c2:	0a12      	lsrs	r2, r2, #8
 800a2c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a2c8:	fb02 f303 	mul.w	r3, r2, r3
 800a2cc:	617b      	str	r3, [r7, #20]
      break;
 800a2ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a300 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	0e5b      	lsrs	r3, r3, #25
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	3301      	adds	r3, #1
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e8:	613b      	str	r3, [r7, #16]
 800a2ea:	e001      	b.n	800a2f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a2f0:	693b      	ldr	r3, [r7, #16]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	371c      	adds	r7, #28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	40021000 	.word	0x40021000
 800a304:	00f42400 	.word	0x00f42400
 800a308:	016e3600 	.word	0x016e3600

0800a30c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a310:	4b03      	ldr	r3, [pc, #12]	@ (800a320 <HAL_RCC_GetHCLKFreq+0x14>)
 800a312:	681b      	ldr	r3, [r3, #0]
}
 800a314:	4618      	mov	r0, r3
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	200003d0 	.word	0x200003d0

0800a324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a328:	f7ff fff0 	bl	800a30c <HAL_RCC_GetHCLKFreq>
 800a32c:	4602      	mov	r2, r0
 800a32e:	4b06      	ldr	r3, [pc, #24]	@ (800a348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	0a1b      	lsrs	r3, r3, #8
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	4904      	ldr	r1, [pc, #16]	@ (800a34c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a33a:	5ccb      	ldrb	r3, [r1, r3]
 800a33c:	f003 031f 	and.w	r3, r3, #31
 800a340:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a344:	4618      	mov	r0, r3
 800a346:	bd80      	pop	{r7, pc}
 800a348:	40021000 	.word	0x40021000
 800a34c:	0800e918 	.word	0x0800e918

0800a350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a354:	f7ff ffda 	bl	800a30c <HAL_RCC_GetHCLKFreq>
 800a358:	4602      	mov	r2, r0
 800a35a:	4b06      	ldr	r3, [pc, #24]	@ (800a374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	0adb      	lsrs	r3, r3, #11
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	4904      	ldr	r1, [pc, #16]	@ (800a378 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a366:	5ccb      	ldrb	r3, [r1, r3]
 800a368:	f003 031f 	and.w	r3, r3, #31
 800a36c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a370:	4618      	mov	r0, r3
 800a372:	bd80      	pop	{r7, pc}
 800a374:	40021000 	.word	0x40021000
 800a378:	0800e918 	.word	0x0800e918

0800a37c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a382:	4b1e      	ldr	r3, [pc, #120]	@ (800a3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a38c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	091b      	lsrs	r3, r3, #4
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	3301      	adds	r3, #1
 800a398:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d10c      	bne.n	800a3ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3a0:	4a17      	ldr	r2, [pc, #92]	@ (800a400 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a8:	4a14      	ldr	r2, [pc, #80]	@ (800a3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a3aa:	68d2      	ldr	r2, [r2, #12]
 800a3ac:	0a12      	lsrs	r2, r2, #8
 800a3ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a3b2:	fb02 f303 	mul.w	r3, r2, r3
 800a3b6:	617b      	str	r3, [r7, #20]
    break;
 800a3b8:	e00c      	b.n	800a3d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3ba:	4a12      	ldr	r2, [pc, #72]	@ (800a404 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c2:	4a0e      	ldr	r2, [pc, #56]	@ (800a3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a3c4:	68d2      	ldr	r2, [r2, #12]
 800a3c6:	0a12      	lsrs	r2, r2, #8
 800a3c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a3cc:	fb02 f303 	mul.w	r3, r2, r3
 800a3d0:	617b      	str	r3, [r7, #20]
    break;
 800a3d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a3d4:	4b09      	ldr	r3, [pc, #36]	@ (800a3fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	0e5b      	lsrs	r3, r3, #25
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	3301      	adds	r3, #1
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a3ee:	687b      	ldr	r3, [r7, #4]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	371c      	adds	r7, #28
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	40021000 	.word	0x40021000
 800a400:	016e3600 	.word	0x016e3600
 800a404:	00f42400 	.word	0x00f42400

0800a408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a410:	2300      	movs	r3, #0
 800a412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a414:	2300      	movs	r3, #0
 800a416:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 8098 	beq.w	800a556 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a426:	2300      	movs	r3, #0
 800a428:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a42a:	4b43      	ldr	r3, [pc, #268]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a42c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a42e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10d      	bne.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a436:	4b40      	ldr	r3, [pc, #256]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a43a:	4a3f      	ldr	r2, [pc, #252]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a43c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a440:	6593      	str	r3, [r2, #88]	@ 0x58
 800a442:	4b3d      	ldr	r3, [pc, #244]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a44a:	60bb      	str	r3, [r7, #8]
 800a44c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a44e:	2301      	movs	r3, #1
 800a450:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a452:	4b3a      	ldr	r3, [pc, #232]	@ (800a53c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a39      	ldr	r2, [pc, #228]	@ (800a53c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a45c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a45e:	f7fe f835 	bl	80084cc <HAL_GetTick>
 800a462:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a464:	e009      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a466:	f7fe f831 	bl	80084cc <HAL_GetTick>
 800a46a:	4602      	mov	r2, r0
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	2b02      	cmp	r3, #2
 800a472:	d902      	bls.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	74fb      	strb	r3, [r7, #19]
        break;
 800a478:	e005      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a47a:	4b30      	ldr	r3, [pc, #192]	@ (800a53c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0ef      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a486:	7cfb      	ldrb	r3, [r7, #19]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d159      	bne.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a48c:	4b2a      	ldr	r3, [pc, #168]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a496:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d01e      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d019      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a4a8:	4b23      	ldr	r3, [pc, #140]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4b4:	4b20      	ldr	r3, [pc, #128]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ba:	4a1f      	ldr	r2, [pc, #124]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ca:	4a1b      	ldr	r2, [pc, #108]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a4d4:	4a18      	ldr	r2, [pc, #96]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d016      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4e6:	f7fd fff1 	bl	80084cc <HAL_GetTick>
 800a4ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4ec:	e00b      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ee:	f7fd ffed 	bl	80084cc <HAL_GetTick>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d902      	bls.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	74fb      	strb	r3, [r7, #19]
            break;
 800a504:	e006      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a506:	4b0c      	ldr	r3, [pc, #48]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0ec      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a514:	7cfb      	ldrb	r3, [r7, #19]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10b      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a51a:	4b07      	ldr	r3, [pc, #28]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a520:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a528:	4903      	ldr	r1, [pc, #12]	@ (800a538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a530:	e008      	b.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a532:	7cfb      	ldrb	r3, [r7, #19]
 800a534:	74bb      	strb	r3, [r7, #18]
 800a536:	e005      	b.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a538:	40021000 	.word	0x40021000
 800a53c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a540:	7cfb      	ldrb	r3, [r7, #19]
 800a542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a544:	7c7b      	ldrb	r3, [r7, #17]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d105      	bne.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a54a:	4ba7      	ldr	r3, [pc, #668]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a54c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a54e:	4aa6      	ldr	r2, [pc, #664]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a554:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00a      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a562:	4ba1      	ldr	r3, [pc, #644]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a568:	f023 0203 	bic.w	r2, r3, #3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	499d      	ldr	r1, [pc, #628]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a572:	4313      	orrs	r3, r2
 800a574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0302 	and.w	r3, r3, #2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00a      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a584:	4b98      	ldr	r3, [pc, #608]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a58a:	f023 020c 	bic.w	r2, r3, #12
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	4995      	ldr	r1, [pc, #596]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a594:	4313      	orrs	r3, r2
 800a596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5a6:	4b90      	ldr	r3, [pc, #576]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	498c      	ldr	r1, [pc, #560]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0308 	and.w	r3, r3, #8
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00a      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a5c8:	4b87      	ldr	r3, [pc, #540]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	4984      	ldr	r1, [pc, #528]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0310 	and.w	r3, r3, #16
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a5ea:	4b7f      	ldr	r3, [pc, #508]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	497b      	ldr	r1, [pc, #492]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0320 	and.w	r3, r3, #32
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a60c:	4b76      	ldr	r3, [pc, #472]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a612:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	4973      	ldr	r1, [pc, #460]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00a      	beq.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a62e:	4b6e      	ldr	r3, [pc, #440]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a634:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	496a      	ldr	r1, [pc, #424]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00a      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a650:	4b65      	ldr	r3, [pc, #404]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a656:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	4962      	ldr	r1, [pc, #392]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a660:	4313      	orrs	r3, r2
 800a662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00a      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a672:	4b5d      	ldr	r3, [pc, #372]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a678:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a680:	4959      	ldr	r1, [pc, #356]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a682:	4313      	orrs	r3, r2
 800a684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00a      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a694:	4b54      	ldr	r3, [pc, #336]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a696:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a69a:	f023 0203 	bic.w	r2, r3, #3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a2:	4951      	ldr	r1, [pc, #324]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6b6:	4b4c      	ldr	r3, [pc, #304]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c4:	4948      	ldr	r1, [pc, #288]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d015      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6d8:	4b43      	ldr	r3, [pc, #268]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e6:	4940      	ldr	r1, [pc, #256]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6f6:	d105      	bne.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6f8:	4b3b      	ldr	r3, [pc, #236]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	4a3a      	ldr	r2, [pc, #232]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a702:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d015      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a710:	4b35      	ldr	r3, [pc, #212]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a716:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a71e:	4932      	ldr	r1, [pc, #200]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a720:	4313      	orrs	r3, r2
 800a722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a72e:	d105      	bne.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a730:	4b2d      	ldr	r3, [pc, #180]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	4a2c      	ldr	r2, [pc, #176]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a73a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d015      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a748:	4b27      	ldr	r3, [pc, #156]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a74e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a756:	4924      	ldr	r1, [pc, #144]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a766:	d105      	bne.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a768:	4b1f      	ldr	r3, [pc, #124]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	4a1e      	ldr	r2, [pc, #120]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a76e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a772:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d015      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a780:	4b19      	ldr	r3, [pc, #100]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a786:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a78e:	4916      	ldr	r1, [pc, #88]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a790:	4313      	orrs	r3, r2
 800a792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a79a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a79e:	d105      	bne.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7a0:	4b11      	ldr	r3, [pc, #68]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	4a10      	ldr	r2, [pc, #64]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d019      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c6:	4908      	ldr	r1, [pc, #32]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7d6:	d109      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7d8:	4b03      	ldr	r3, [pc, #12]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	4a02      	ldr	r2, [pc, #8]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7e2:	60d3      	str	r3, [r2, #12]
 800a7e4:	e002      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a7e6:	bf00      	nop
 800a7e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d015      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a7f8:	4b29      	ldr	r3, [pc, #164]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a806:	4926      	ldr	r1, [pc, #152]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a816:	d105      	bne.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a818:	4b21      	ldr	r3, [pc, #132]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4a20      	ldr	r2, [pc, #128]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a81e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a822:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d015      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a830:	4b1b      	ldr	r3, [pc, #108]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a836:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a83e:	4918      	ldr	r1, [pc, #96]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a840:	4313      	orrs	r3, r2
 800a842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a84a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a84e:	d105      	bne.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a850:	4b13      	ldr	r3, [pc, #76]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	4a12      	ldr	r2, [pc, #72]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a85a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d015      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a868:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a86a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a86e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a876:	490a      	ldr	r1, [pc, #40]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a886:	d105      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a888:	4b05      	ldr	r3, [pc, #20]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	4a04      	ldr	r2, [pc, #16]	@ (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a88e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a892:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a894:	7cbb      	ldrb	r3, [r7, #18]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	40021000 	.word	0x40021000

0800a8a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e09d      	b.n	800a9f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d108      	bne.n	800a8d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8c6:	d009      	beq.n	800a8dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	61da      	str	r2, [r3, #28]
 800a8ce:	e005      	b.n	800a8dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d106      	bne.n	800a8fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7fd fb8e 	bl	8008018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a912:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a91c:	d902      	bls.n	800a924 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]
 800a922:	e002      	b.n	800a92a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a928:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a932:	d007      	beq.n	800a944 <HAL_SPI_Init+0xa0>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a93c:	d002      	beq.n	800a944 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a954:	431a      	orrs	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	431a      	orrs	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	431a      	orrs	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a972:	431a      	orrs	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a986:	ea42 0103 	orr.w	r1, r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	0c1b      	lsrs	r3, r3, #16
 800a9a0:	f003 0204 	and.w	r2, r3, #4
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a8:	f003 0310 	and.w	r3, r3, #16
 800a9ac:	431a      	orrs	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b2:	f003 0308 	and.w	r3, r3, #8
 800a9b6:	431a      	orrs	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a9c0:	ea42 0103 	orr.w	r1, r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	69da      	ldr	r2, [r3, #28]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b088      	sub	sp, #32
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	60f8      	str	r0, [r7, #12]
 800aa02:	60b9      	str	r1, [r7, #8]
 800aa04:	603b      	str	r3, [r7, #0]
 800aa06:	4613      	mov	r3, r2
 800aa08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <HAL_SPI_Transmit+0x22>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e15f      	b.n	800acdc <HAL_SPI_Transmit+0x2e2>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa24:	f7fd fd52 	bl	80084cc <HAL_GetTick>
 800aa28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800aa2a:	88fb      	ldrh	r3, [r7, #6]
 800aa2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d002      	beq.n	800aa40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa3e:	e148      	b.n	800acd2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <HAL_SPI_Transmit+0x52>
 800aa46:	88fb      	ldrh	r3, [r7, #6]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d102      	bne.n	800aa52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa50:	e13f      	b.n	800acd2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2203      	movs	r2, #3
 800aa56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	88fa      	ldrh	r2, [r7, #6]
 800aa6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	88fa      	ldrh	r2, [r7, #6]
 800aa70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa9c:	d10f      	bne.n	800aabe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aaac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aabc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac8:	2b40      	cmp	r3, #64	@ 0x40
 800aaca:	d007      	beq.n	800aadc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aae4:	d94f      	bls.n	800ab86 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <HAL_SPI_Transmit+0xfa>
 800aaee:	8afb      	ldrh	r3, [r7, #22]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d142      	bne.n	800ab7a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf8:	881a      	ldrh	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab04:	1c9a      	adds	r2, r3, #2
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	3b01      	subs	r3, #1
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ab18:	e02f      	b.n	800ab7a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	f003 0302 	and.w	r3, r3, #2
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d112      	bne.n	800ab4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2c:	881a      	ldrh	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab38:	1c9a      	adds	r2, r3, #2
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	3b01      	subs	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ab4c:	e015      	b.n	800ab7a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab4e:	f7fd fcbd 	bl	80084cc <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d803      	bhi.n	800ab66 <HAL_SPI_Transmit+0x16c>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab64:	d102      	bne.n	800ab6c <HAL_SPI_Transmit+0x172>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d106      	bne.n	800ab7a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800ab78:	e0ab      	b.n	800acd2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1ca      	bne.n	800ab1a <HAL_SPI_Transmit+0x120>
 800ab84:	e080      	b.n	800ac88 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <HAL_SPI_Transmit+0x19a>
 800ab8e:	8afb      	ldrh	r3, [r7, #22]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d174      	bne.n	800ac7e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d912      	bls.n	800abc4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba2:	881a      	ldrh	r2, [r3, #0]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abae:	1c9a      	adds	r2, r3, #2
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abb8:	b29b      	uxth	r3, r3
 800abba:	3b02      	subs	r3, #2
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800abc2:	e05c      	b.n	800ac7e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	330c      	adds	r3, #12
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd6:	1c5a      	adds	r2, r3, #1
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	3b01      	subs	r3, #1
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800abea:	e048      	b.n	800ac7e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d12b      	bne.n	800ac52 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d912      	bls.n	800ac2a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac08:	881a      	ldrh	r2, [r3, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac14:	1c9a      	adds	r2, r3, #2
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	3b02      	subs	r3, #2
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ac28:	e029      	b.n	800ac7e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	330c      	adds	r3, #12
 800ac34:	7812      	ldrb	r2, [r2, #0]
 800ac36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac3c:	1c5a      	adds	r2, r3, #1
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ac50:	e015      	b.n	800ac7e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac52:	f7fd fc3b 	bl	80084cc <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d803      	bhi.n	800ac6a <HAL_SPI_Transmit+0x270>
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac68:	d102      	bne.n	800ac70 <HAL_SPI_Transmit+0x276>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d106      	bne.n	800ac7e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800ac7c:	e029      	b.n	800acd2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1b1      	bne.n	800abec <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 f947 	bl	800af20 <SPI_EndRxTxTransaction>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10a      	bne.n	800acbc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aca6:	2300      	movs	r3, #0
 800aca8:	613b      	str	r3, [r7, #16]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	613b      	str	r3, [r7, #16]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	613b      	str	r3, [r7, #16]
 800acba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	77fb      	strb	r3, [r7, #31]
 800acc8:	e003      	b.n	800acd2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800acda:	7ffb      	ldrb	r3, [r7, #31]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3720      	adds	r7, #32
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	603b      	str	r3, [r7, #0]
 800acf0:	4613      	mov	r3, r2
 800acf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800acf4:	f7fd fbea 	bl	80084cc <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfc:	1a9b      	subs	r3, r3, r2
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	4413      	add	r3, r2
 800ad02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad04:	f7fd fbe2 	bl	80084cc <HAL_GetTick>
 800ad08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad0a:	4b39      	ldr	r3, [pc, #228]	@ (800adf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	015b      	lsls	r3, r3, #5
 800ad10:	0d1b      	lsrs	r3, r3, #20
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	fb02 f303 	mul.w	r3, r2, r3
 800ad18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad1a:	e054      	b.n	800adc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad22:	d050      	beq.n	800adc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad24:	f7fd fbd2 	bl	80084cc <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	69fa      	ldr	r2, [r7, #28]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d902      	bls.n	800ad3a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d13d      	bne.n	800adb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ad48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad52:	d111      	bne.n	800ad78 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad5c:	d004      	beq.n	800ad68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad66:	d107      	bne.n	800ad78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad80:	d10f      	bne.n	800ada2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ada0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e017      	b.n	800ade6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800adbc:	2300      	movs	r3, #0
 800adbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689a      	ldr	r2, [r3, #8]
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4013      	ands	r3, r2
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	429a      	cmp	r2, r3
 800add4:	bf0c      	ite	eq
 800add6:	2301      	moveq	r3, #1
 800add8:	2300      	movne	r3, #0
 800adda:	b2db      	uxtb	r3, r3
 800addc:	461a      	mov	r2, r3
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d19b      	bne.n	800ad1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3720      	adds	r7, #32
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	200003d0 	.word	0x200003d0

0800adf4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	@ 0x28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae06:	f7fd fb61 	bl	80084cc <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	4413      	add	r3, r2
 800ae14:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ae16:	f7fd fb59 	bl	80084cc <HAL_GetTick>
 800ae1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	330c      	adds	r3, #12
 800ae22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae24:	4b3d      	ldr	r3, [pc, #244]	@ (800af1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	00da      	lsls	r2, r3, #3
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	0d1b      	lsrs	r3, r3, #20
 800ae34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae36:	fb02 f303 	mul.w	r3, r2, r3
 800ae3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae3c:	e060      	b.n	800af00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ae44:	d107      	bne.n	800ae56 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d104      	bne.n	800ae56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae5c:	d050      	beq.n	800af00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae5e:	f7fd fb35 	bl	80084cc <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d902      	bls.n	800ae74 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d13d      	bne.n	800aef0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685a      	ldr	r2, [r3, #4]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ae82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ae8c:	d111      	bne.n	800aeb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae96:	d004      	beq.n	800aea2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aea0:	d107      	bne.n	800aeb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aeb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeba:	d10f      	bne.n	800aedc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aeda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e010      	b.n	800af12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	4013      	ands	r3, r2
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d196      	bne.n	800ae3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3728      	adds	r7, #40	@ 0x28
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	200003d0 	.word	0x200003d0

0800af20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2200      	movs	r2, #0
 800af34:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f7ff ff5b 	bl	800adf4 <SPI_WaitFifoStateUntilTimeout>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d007      	beq.n	800af54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af48:	f043 0220 	orr.w	r2, r3, #32
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800af50:	2303      	movs	r3, #3
 800af52:	e027      	b.n	800afa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	2200      	movs	r2, #0
 800af5c:	2180      	movs	r1, #128	@ 0x80
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f7ff fec0 	bl	800ace4 <SPI_WaitFlagStateUntilTimeout>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af6e:	f043 0220 	orr.w	r2, r3, #32
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e014      	b.n	800afa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2200      	movs	r2, #0
 800af82:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7ff ff34 	bl	800adf4 <SPI_WaitFifoStateUntilTimeout>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d007      	beq.n	800afa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af96:	f043 0220 	orr.w	r2, r3, #32
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e000      	b.n	800afa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e049      	b.n	800b052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7fd f882 	bl	80080dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2202      	movs	r2, #2
 800afdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f000 fcd2 	bl	800b994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d001      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e054      	b.n	800b11e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2202      	movs	r2, #2
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f042 0201 	orr.w	r2, r2, #1
 800b08a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a26      	ldr	r2, [pc, #152]	@ (800b12c <HAL_TIM_Base_Start_IT+0xd0>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d022      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x80>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b09e:	d01d      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x80>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a22      	ldr	r2, [pc, #136]	@ (800b130 <HAL_TIM_Base_Start_IT+0xd4>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d018      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x80>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a21      	ldr	r2, [pc, #132]	@ (800b134 <HAL_TIM_Base_Start_IT+0xd8>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d013      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x80>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a1f      	ldr	r2, [pc, #124]	@ (800b138 <HAL_TIM_Base_Start_IT+0xdc>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d00e      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x80>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a1e      	ldr	r2, [pc, #120]	@ (800b13c <HAL_TIM_Base_Start_IT+0xe0>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d009      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x80>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a1c      	ldr	r2, [pc, #112]	@ (800b140 <HAL_TIM_Base_Start_IT+0xe4>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d004      	beq.n	800b0dc <HAL_TIM_Base_Start_IT+0x80>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a1b      	ldr	r2, [pc, #108]	@ (800b144 <HAL_TIM_Base_Start_IT+0xe8>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d115      	bne.n	800b108 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	4b19      	ldr	r3, [pc, #100]	@ (800b148 <HAL_TIM_Base_Start_IT+0xec>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b06      	cmp	r3, #6
 800b0ec:	d015      	beq.n	800b11a <HAL_TIM_Base_Start_IT+0xbe>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0f4:	d011      	beq.n	800b11a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f042 0201 	orr.w	r2, r2, #1
 800b104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b106:	e008      	b.n	800b11a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f042 0201 	orr.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	e000      	b.n	800b11c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b11a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	40012c00 	.word	0x40012c00
 800b130:	40000400 	.word	0x40000400
 800b134:	40000800 	.word	0x40000800
 800b138:	40000c00 	.word	0x40000c00
 800b13c:	40013400 	.word	0x40013400
 800b140:	40014000 	.word	0x40014000
 800b144:	40015000 	.word	0x40015000
 800b148:	00010007 	.word	0x00010007

0800b14c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f022 0201 	bic.w	r2, r2, #1
 800b162:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6a1a      	ldr	r2, [r3, #32]
 800b16a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b16e:	4013      	ands	r3, r2
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10f      	bne.n	800b194 <HAL_TIM_Base_Stop_IT+0x48>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6a1a      	ldr	r2, [r3, #32]
 800b17a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b17e:	4013      	ands	r3, r2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d107      	bne.n	800b194 <HAL_TIM_Base_Stop_IT+0x48>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f022 0201 	bic.w	r2, r2, #1
 800b192:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e049      	b.n	800b250 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d106      	bne.n	800b1d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7fc ff63 	bl	800809c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2202      	movs	r2, #2
 800b1da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f000 fbd3 	bl	800b994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <HAL_TIM_PWM_Start+0x24>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b01      	cmp	r3, #1
 800b272:	bf14      	ite	ne
 800b274:	2301      	movne	r3, #1
 800b276:	2300      	moveq	r3, #0
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	e03c      	b.n	800b2f6 <HAL_TIM_PWM_Start+0x9e>
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d109      	bne.n	800b296 <HAL_TIM_PWM_Start+0x3e>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	bf14      	ite	ne
 800b28e:	2301      	movne	r3, #1
 800b290:	2300      	moveq	r3, #0
 800b292:	b2db      	uxtb	r3, r3
 800b294:	e02f      	b.n	800b2f6 <HAL_TIM_PWM_Start+0x9e>
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d109      	bne.n	800b2b0 <HAL_TIM_PWM_Start+0x58>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	bf14      	ite	ne
 800b2a8:	2301      	movne	r3, #1
 800b2aa:	2300      	moveq	r3, #0
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	e022      	b.n	800b2f6 <HAL_TIM_PWM_Start+0x9e>
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2b0c      	cmp	r3, #12
 800b2b4:	d109      	bne.n	800b2ca <HAL_TIM_PWM_Start+0x72>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	bf14      	ite	ne
 800b2c2:	2301      	movne	r3, #1
 800b2c4:	2300      	moveq	r3, #0
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	e015      	b.n	800b2f6 <HAL_TIM_PWM_Start+0x9e>
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b10      	cmp	r3, #16
 800b2ce:	d109      	bne.n	800b2e4 <HAL_TIM_PWM_Start+0x8c>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	bf14      	ite	ne
 800b2dc:	2301      	movne	r3, #1
 800b2de:	2300      	moveq	r3, #0
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	e008      	b.n	800b2f6 <HAL_TIM_PWM_Start+0x9e>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	bf14      	ite	ne
 800b2f0:	2301      	movne	r3, #1
 800b2f2:	2300      	moveq	r3, #0
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e0a6      	b.n	800b44c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d104      	bne.n	800b30e <HAL_TIM_PWM_Start+0xb6>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2202      	movs	r2, #2
 800b308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b30c:	e023      	b.n	800b356 <HAL_TIM_PWM_Start+0xfe>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b04      	cmp	r3, #4
 800b312:	d104      	bne.n	800b31e <HAL_TIM_PWM_Start+0xc6>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b31c:	e01b      	b.n	800b356 <HAL_TIM_PWM_Start+0xfe>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2b08      	cmp	r3, #8
 800b322:	d104      	bne.n	800b32e <HAL_TIM_PWM_Start+0xd6>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2202      	movs	r2, #2
 800b328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b32c:	e013      	b.n	800b356 <HAL_TIM_PWM_Start+0xfe>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b0c      	cmp	r3, #12
 800b332:	d104      	bne.n	800b33e <HAL_TIM_PWM_Start+0xe6>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b33c:	e00b      	b.n	800b356 <HAL_TIM_PWM_Start+0xfe>
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b10      	cmp	r3, #16
 800b342:	d104      	bne.n	800b34e <HAL_TIM_PWM_Start+0xf6>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2202      	movs	r2, #2
 800b348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b34c:	e003      	b.n	800b356 <HAL_TIM_PWM_Start+0xfe>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2202      	movs	r2, #2
 800b352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2201      	movs	r2, #1
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fef6 	bl	800c150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a3a      	ldr	r2, [pc, #232]	@ (800b454 <HAL_TIM_PWM_Start+0x1fc>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d018      	beq.n	800b3a0 <HAL_TIM_PWM_Start+0x148>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a39      	ldr	r2, [pc, #228]	@ (800b458 <HAL_TIM_PWM_Start+0x200>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d013      	beq.n	800b3a0 <HAL_TIM_PWM_Start+0x148>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a37      	ldr	r2, [pc, #220]	@ (800b45c <HAL_TIM_PWM_Start+0x204>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d00e      	beq.n	800b3a0 <HAL_TIM_PWM_Start+0x148>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a36      	ldr	r2, [pc, #216]	@ (800b460 <HAL_TIM_PWM_Start+0x208>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d009      	beq.n	800b3a0 <HAL_TIM_PWM_Start+0x148>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a34      	ldr	r2, [pc, #208]	@ (800b464 <HAL_TIM_PWM_Start+0x20c>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d004      	beq.n	800b3a0 <HAL_TIM_PWM_Start+0x148>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a33      	ldr	r2, [pc, #204]	@ (800b468 <HAL_TIM_PWM_Start+0x210>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d101      	bne.n	800b3a4 <HAL_TIM_PWM_Start+0x14c>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e000      	b.n	800b3a6 <HAL_TIM_PWM_Start+0x14e>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d007      	beq.n	800b3ba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b3b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a25      	ldr	r2, [pc, #148]	@ (800b454 <HAL_TIM_PWM_Start+0x1fc>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d022      	beq.n	800b40a <HAL_TIM_PWM_Start+0x1b2>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3cc:	d01d      	beq.n	800b40a <HAL_TIM_PWM_Start+0x1b2>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a26      	ldr	r2, [pc, #152]	@ (800b46c <HAL_TIM_PWM_Start+0x214>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d018      	beq.n	800b40a <HAL_TIM_PWM_Start+0x1b2>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a24      	ldr	r2, [pc, #144]	@ (800b470 <HAL_TIM_PWM_Start+0x218>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d013      	beq.n	800b40a <HAL_TIM_PWM_Start+0x1b2>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a23      	ldr	r2, [pc, #140]	@ (800b474 <HAL_TIM_PWM_Start+0x21c>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d00e      	beq.n	800b40a <HAL_TIM_PWM_Start+0x1b2>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a19      	ldr	r2, [pc, #100]	@ (800b458 <HAL_TIM_PWM_Start+0x200>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d009      	beq.n	800b40a <HAL_TIM_PWM_Start+0x1b2>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a18      	ldr	r2, [pc, #96]	@ (800b45c <HAL_TIM_PWM_Start+0x204>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d004      	beq.n	800b40a <HAL_TIM_PWM_Start+0x1b2>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a18      	ldr	r2, [pc, #96]	@ (800b468 <HAL_TIM_PWM_Start+0x210>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d115      	bne.n	800b436 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	689a      	ldr	r2, [r3, #8]
 800b410:	4b19      	ldr	r3, [pc, #100]	@ (800b478 <HAL_TIM_PWM_Start+0x220>)
 800b412:	4013      	ands	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2b06      	cmp	r3, #6
 800b41a:	d015      	beq.n	800b448 <HAL_TIM_PWM_Start+0x1f0>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b422:	d011      	beq.n	800b448 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f042 0201 	orr.w	r2, r2, #1
 800b432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b434:	e008      	b.n	800b448 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f042 0201 	orr.w	r2, r2, #1
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	e000      	b.n	800b44a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b448:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	40012c00 	.word	0x40012c00
 800b458:	40013400 	.word	0x40013400
 800b45c:	40014000 	.word	0x40014000
 800b460:	40014400 	.word	0x40014400
 800b464:	40014800 	.word	0x40014800
 800b468:	40015000 	.word	0x40015000
 800b46c:	40000400 	.word	0x40000400
 800b470:	40000800 	.word	0x40000800
 800b474:	40000c00 	.word	0x40000c00
 800b478:	00010007 	.word	0x00010007

0800b47c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f003 0302 	and.w	r3, r3, #2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d020      	beq.n	800b4e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01b      	beq.n	800b4e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f06f 0202 	mvn.w	r2, #2
 800b4b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	699b      	ldr	r3, [r3, #24]
 800b4be:	f003 0303 	and.w	r3, r3, #3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fa46 	bl	800b958 <HAL_TIM_IC_CaptureCallback>
 800b4cc:	e005      	b.n	800b4da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa38 	bl	800b944 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fa49 	bl	800b96c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	f003 0304 	and.w	r3, r3, #4
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d020      	beq.n	800b52c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f003 0304 	and.w	r3, r3, #4
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d01b      	beq.n	800b52c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f06f 0204 	mvn.w	r2, #4
 800b4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2202      	movs	r2, #2
 800b502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa20 	bl	800b958 <HAL_TIM_IC_CaptureCallback>
 800b518:	e005      	b.n	800b526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 fa12 	bl	800b944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fa23 	bl	800b96c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f003 0308 	and.w	r3, r3, #8
 800b532:	2b00      	cmp	r3, #0
 800b534:	d020      	beq.n	800b578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f003 0308 	and.w	r3, r3, #8
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01b      	beq.n	800b578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f06f 0208 	mvn.w	r2, #8
 800b548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2204      	movs	r2, #4
 800b54e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	f003 0303 	and.w	r3, r3, #3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f9fa 	bl	800b958 <HAL_TIM_IC_CaptureCallback>
 800b564:	e005      	b.n	800b572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f9ec 	bl	800b944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f9fd 	bl	800b96c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f003 0310 	and.w	r3, r3, #16
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d020      	beq.n	800b5c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f003 0310 	and.w	r3, r3, #16
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d01b      	beq.n	800b5c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f06f 0210 	mvn.w	r2, #16
 800b594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2208      	movs	r2, #8
 800b59a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	69db      	ldr	r3, [r3, #28]
 800b5a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f9d4 	bl	800b958 <HAL_TIM_IC_CaptureCallback>
 800b5b0:	e005      	b.n	800b5be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f9c6 	bl	800b944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f9d7 	bl	800b96c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00c      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d007      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f06f 0201 	mvn.w	r2, #1
 800b5e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7fc f988 	bl	80078f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d104      	bne.n	800b5fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00c      	beq.n	800b616 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b602:	2b00      	cmp	r3, #0
 800b604:	d007      	beq.n	800b616 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fe63 	bl	800c2dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00c      	beq.n	800b63a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b626:	2b00      	cmp	r3, #0
 800b628:	d007      	beq.n	800b63a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fe5b 	bl	800c2f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00c      	beq.n	800b65e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d007      	beq.n	800b65e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f991 	bl	800b980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f003 0320 	and.w	r3, r3, #32
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00c      	beq.n	800b682 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f003 0320 	and.w	r3, r3, #32
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d007      	beq.n	800b682 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f06f 0220 	mvn.w	r2, #32
 800b67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fe23 	bl	800c2c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00c      	beq.n	800b6a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d007      	beq.n	800b6a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fe2f 	bl	800c304 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00c      	beq.n	800b6ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d007      	beq.n	800b6ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fe27 	bl	800c318 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00c      	beq.n	800b6ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d007      	beq.n	800b6ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b6e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fe1f 	bl	800c32c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00c      	beq.n	800b712 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d007      	beq.n	800b712 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fe17 	bl	800c340 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b712:	bf00      	nop
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b732:	2b01      	cmp	r3, #1
 800b734:	d101      	bne.n	800b73a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b736:	2302      	movs	r3, #2
 800b738:	e0ff      	b.n	800b93a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b14      	cmp	r3, #20
 800b746:	f200 80f0 	bhi.w	800b92a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b74a:	a201      	add	r2, pc, #4	@ (adr r2, 800b750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b750:	0800b7a5 	.word	0x0800b7a5
 800b754:	0800b92b 	.word	0x0800b92b
 800b758:	0800b92b 	.word	0x0800b92b
 800b75c:	0800b92b 	.word	0x0800b92b
 800b760:	0800b7e5 	.word	0x0800b7e5
 800b764:	0800b92b 	.word	0x0800b92b
 800b768:	0800b92b 	.word	0x0800b92b
 800b76c:	0800b92b 	.word	0x0800b92b
 800b770:	0800b827 	.word	0x0800b827
 800b774:	0800b92b 	.word	0x0800b92b
 800b778:	0800b92b 	.word	0x0800b92b
 800b77c:	0800b92b 	.word	0x0800b92b
 800b780:	0800b867 	.word	0x0800b867
 800b784:	0800b92b 	.word	0x0800b92b
 800b788:	0800b92b 	.word	0x0800b92b
 800b78c:	0800b92b 	.word	0x0800b92b
 800b790:	0800b8a9 	.word	0x0800b8a9
 800b794:	0800b92b 	.word	0x0800b92b
 800b798:	0800b92b 	.word	0x0800b92b
 800b79c:	0800b92b 	.word	0x0800b92b
 800b7a0:	0800b8e9 	.word	0x0800b8e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 f9a6 	bl	800bafc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	699a      	ldr	r2, [r3, #24]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f042 0208 	orr.w	r2, r2, #8
 800b7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 0204 	bic.w	r2, r2, #4
 800b7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6999      	ldr	r1, [r3, #24]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	691a      	ldr	r2, [r3, #16]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	619a      	str	r2, [r3, #24]
      break;
 800b7e2:	e0a5      	b.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fa20 	bl	800bc30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699a      	ldr	r2, [r3, #24]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b80e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6999      	ldr	r1, [r3, #24]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	021a      	lsls	r2, r3, #8
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	619a      	str	r2, [r3, #24]
      break;
 800b824:	e084      	b.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fa93 	bl	800bd58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69da      	ldr	r2, [r3, #28]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f042 0208 	orr.w	r2, r2, #8
 800b840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69da      	ldr	r2, [r3, #28]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 0204 	bic.w	r2, r2, #4
 800b850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69d9      	ldr	r1, [r3, #28]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	691a      	ldr	r2, [r3, #16]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	61da      	str	r2, [r3, #28]
      break;
 800b864:	e064      	b.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	68b9      	ldr	r1, [r7, #8]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fb05 	bl	800be7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69da      	ldr	r2, [r3, #28]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69da      	ldr	r2, [r3, #28]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	69d9      	ldr	r1, [r3, #28]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	021a      	lsls	r2, r3, #8
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	61da      	str	r2, [r3, #28]
      break;
 800b8a6:	e043      	b.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68b9      	ldr	r1, [r7, #8]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 fb78 	bl	800bfa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0208 	orr.w	r2, r2, #8
 800b8c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f022 0204 	bic.w	r2, r2, #4
 800b8d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	691a      	ldr	r2, [r3, #16]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b8e6:	e023      	b.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68b9      	ldr	r1, [r7, #8]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 fbc2 	bl	800c078 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b902:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b912:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	021a      	lsls	r2, r3, #8
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	430a      	orrs	r2, r1
 800b926:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b928:	e002      	b.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	75fb      	strb	r3, [r7, #23]
      break;
 800b92e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b938:	7dfb      	ldrb	r3, [r7, #23]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop

0800b944 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a4c      	ldr	r2, [pc, #304]	@ (800bad8 <TIM_Base_SetConfig+0x144>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d017      	beq.n	800b9dc <TIM_Base_SetConfig+0x48>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b2:	d013      	beq.n	800b9dc <TIM_Base_SetConfig+0x48>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	4a49      	ldr	r2, [pc, #292]	@ (800badc <TIM_Base_SetConfig+0x148>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d00f      	beq.n	800b9dc <TIM_Base_SetConfig+0x48>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4a48      	ldr	r2, [pc, #288]	@ (800bae0 <TIM_Base_SetConfig+0x14c>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d00b      	beq.n	800b9dc <TIM_Base_SetConfig+0x48>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	4a47      	ldr	r2, [pc, #284]	@ (800bae4 <TIM_Base_SetConfig+0x150>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d007      	beq.n	800b9dc <TIM_Base_SetConfig+0x48>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4a46      	ldr	r2, [pc, #280]	@ (800bae8 <TIM_Base_SetConfig+0x154>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d003      	beq.n	800b9dc <TIM_Base_SetConfig+0x48>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4a45      	ldr	r2, [pc, #276]	@ (800baec <TIM_Base_SetConfig+0x158>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d108      	bne.n	800b9ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a39      	ldr	r2, [pc, #228]	@ (800bad8 <TIM_Base_SetConfig+0x144>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d023      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9fc:	d01f      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a36      	ldr	r2, [pc, #216]	@ (800badc <TIM_Base_SetConfig+0x148>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d01b      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a35      	ldr	r2, [pc, #212]	@ (800bae0 <TIM_Base_SetConfig+0x14c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d017      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a34      	ldr	r2, [pc, #208]	@ (800bae4 <TIM_Base_SetConfig+0x150>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d013      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a33      	ldr	r2, [pc, #204]	@ (800bae8 <TIM_Base_SetConfig+0x154>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d00f      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a33      	ldr	r2, [pc, #204]	@ (800baf0 <TIM_Base_SetConfig+0x15c>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d00b      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a32      	ldr	r2, [pc, #200]	@ (800baf4 <TIM_Base_SetConfig+0x160>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d007      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a31      	ldr	r2, [pc, #196]	@ (800baf8 <TIM_Base_SetConfig+0x164>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d003      	beq.n	800ba3e <TIM_Base_SetConfig+0xaa>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a2c      	ldr	r2, [pc, #176]	@ (800baec <TIM_Base_SetConfig+0x158>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d108      	bne.n	800ba50 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	689a      	ldr	r2, [r3, #8]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a18      	ldr	r2, [pc, #96]	@ (800bad8 <TIM_Base_SetConfig+0x144>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d013      	beq.n	800baa4 <TIM_Base_SetConfig+0x110>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a1a      	ldr	r2, [pc, #104]	@ (800bae8 <TIM_Base_SetConfig+0x154>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d00f      	beq.n	800baa4 <TIM_Base_SetConfig+0x110>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a1a      	ldr	r2, [pc, #104]	@ (800baf0 <TIM_Base_SetConfig+0x15c>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d00b      	beq.n	800baa4 <TIM_Base_SetConfig+0x110>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a19      	ldr	r2, [pc, #100]	@ (800baf4 <TIM_Base_SetConfig+0x160>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d007      	beq.n	800baa4 <TIM_Base_SetConfig+0x110>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a18      	ldr	r2, [pc, #96]	@ (800baf8 <TIM_Base_SetConfig+0x164>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d003      	beq.n	800baa4 <TIM_Base_SetConfig+0x110>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a13      	ldr	r2, [pc, #76]	@ (800baec <TIM_Base_SetConfig+0x158>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d103      	bne.n	800baac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b01      	cmp	r3, #1
 800babc:	d105      	bne.n	800baca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	f023 0201 	bic.w	r2, r3, #1
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	611a      	str	r2, [r3, #16]
  }
}
 800baca:	bf00      	nop
 800bacc:	3714      	adds	r7, #20
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	40012c00 	.word	0x40012c00
 800badc:	40000400 	.word	0x40000400
 800bae0:	40000800 	.word	0x40000800
 800bae4:	40000c00 	.word	0x40000c00
 800bae8:	40013400 	.word	0x40013400
 800baec:	40015000 	.word	0x40015000
 800baf0:	40014000 	.word	0x40014000
 800baf4:	40014400 	.word	0x40014400
 800baf8:	40014800 	.word	0x40014800

0800bafc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b087      	sub	sp, #28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	f023 0201 	bic.w	r2, r3, #1
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f023 0303 	bic.w	r3, r3, #3
 800bb36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f023 0302 	bic.w	r3, r3, #2
 800bb48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a30      	ldr	r2, [pc, #192]	@ (800bc18 <TIM_OC1_SetConfig+0x11c>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d013      	beq.n	800bb84 <TIM_OC1_SetConfig+0x88>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a2f      	ldr	r2, [pc, #188]	@ (800bc1c <TIM_OC1_SetConfig+0x120>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d00f      	beq.n	800bb84 <TIM_OC1_SetConfig+0x88>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a2e      	ldr	r2, [pc, #184]	@ (800bc20 <TIM_OC1_SetConfig+0x124>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d00b      	beq.n	800bb84 <TIM_OC1_SetConfig+0x88>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a2d      	ldr	r2, [pc, #180]	@ (800bc24 <TIM_OC1_SetConfig+0x128>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d007      	beq.n	800bb84 <TIM_OC1_SetConfig+0x88>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a2c      	ldr	r2, [pc, #176]	@ (800bc28 <TIM_OC1_SetConfig+0x12c>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d003      	beq.n	800bb84 <TIM_OC1_SetConfig+0x88>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a2b      	ldr	r2, [pc, #172]	@ (800bc2c <TIM_OC1_SetConfig+0x130>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d10c      	bne.n	800bb9e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f023 0308 	bic.w	r3, r3, #8
 800bb8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f023 0304 	bic.w	r3, r3, #4
 800bb9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a1d      	ldr	r2, [pc, #116]	@ (800bc18 <TIM_OC1_SetConfig+0x11c>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d013      	beq.n	800bbce <TIM_OC1_SetConfig+0xd2>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a1c      	ldr	r2, [pc, #112]	@ (800bc1c <TIM_OC1_SetConfig+0x120>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d00f      	beq.n	800bbce <TIM_OC1_SetConfig+0xd2>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a1b      	ldr	r2, [pc, #108]	@ (800bc20 <TIM_OC1_SetConfig+0x124>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d00b      	beq.n	800bbce <TIM_OC1_SetConfig+0xd2>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a1a      	ldr	r2, [pc, #104]	@ (800bc24 <TIM_OC1_SetConfig+0x128>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d007      	beq.n	800bbce <TIM_OC1_SetConfig+0xd2>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a19      	ldr	r2, [pc, #100]	@ (800bc28 <TIM_OC1_SetConfig+0x12c>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d003      	beq.n	800bbce <TIM_OC1_SetConfig+0xd2>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a18      	ldr	r2, [pc, #96]	@ (800bc2c <TIM_OC1_SetConfig+0x130>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d111      	bne.n	800bbf2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	693a      	ldr	r2, [r7, #16]
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	621a      	str	r2, [r3, #32]
}
 800bc0c:	bf00      	nop
 800bc0e:	371c      	adds	r7, #28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	40012c00 	.word	0x40012c00
 800bc1c:	40013400 	.word	0x40013400
 800bc20:	40014000 	.word	0x40014000
 800bc24:	40014400 	.word	0x40014400
 800bc28:	40014800 	.word	0x40014800
 800bc2c:	40015000 	.word	0x40015000

0800bc30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b087      	sub	sp, #28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a1b      	ldr	r3, [r3, #32]
 800bc44:	f023 0210 	bic.w	r2, r3, #16
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	021b      	lsls	r3, r3, #8
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f023 0320 	bic.w	r3, r3, #32
 800bc7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	011b      	lsls	r3, r3, #4
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a2c      	ldr	r2, [pc, #176]	@ (800bd40 <TIM_OC2_SetConfig+0x110>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d007      	beq.n	800bca4 <TIM_OC2_SetConfig+0x74>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a2b      	ldr	r2, [pc, #172]	@ (800bd44 <TIM_OC2_SetConfig+0x114>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d003      	beq.n	800bca4 <TIM_OC2_SetConfig+0x74>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a2a      	ldr	r2, [pc, #168]	@ (800bd48 <TIM_OC2_SetConfig+0x118>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d10d      	bne.n	800bcc0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	011b      	lsls	r3, r3, #4
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a1f      	ldr	r2, [pc, #124]	@ (800bd40 <TIM_OC2_SetConfig+0x110>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d013      	beq.n	800bcf0 <TIM_OC2_SetConfig+0xc0>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a1e      	ldr	r2, [pc, #120]	@ (800bd44 <TIM_OC2_SetConfig+0x114>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d00f      	beq.n	800bcf0 <TIM_OC2_SetConfig+0xc0>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a1e      	ldr	r2, [pc, #120]	@ (800bd4c <TIM_OC2_SetConfig+0x11c>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d00b      	beq.n	800bcf0 <TIM_OC2_SetConfig+0xc0>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a1d      	ldr	r2, [pc, #116]	@ (800bd50 <TIM_OC2_SetConfig+0x120>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d007      	beq.n	800bcf0 <TIM_OC2_SetConfig+0xc0>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a1c      	ldr	r2, [pc, #112]	@ (800bd54 <TIM_OC2_SetConfig+0x124>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d003      	beq.n	800bcf0 <TIM_OC2_SetConfig+0xc0>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a17      	ldr	r2, [pc, #92]	@ (800bd48 <TIM_OC2_SetConfig+0x118>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d113      	bne.n	800bd18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	621a      	str	r2, [r3, #32]
}
 800bd32:	bf00      	nop
 800bd34:	371c      	adds	r7, #28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	40012c00 	.word	0x40012c00
 800bd44:	40013400 	.word	0x40013400
 800bd48:	40015000 	.word	0x40015000
 800bd4c:	40014000 	.word	0x40014000
 800bd50:	40014400 	.word	0x40014400
 800bd54:	40014800 	.word	0x40014800

0800bd58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	69db      	ldr	r3, [r3, #28]
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f023 0303 	bic.w	r3, r3, #3
 800bd92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bda4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	021b      	lsls	r3, r3, #8
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a2b      	ldr	r2, [pc, #172]	@ (800be64 <TIM_OC3_SetConfig+0x10c>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d007      	beq.n	800bdca <TIM_OC3_SetConfig+0x72>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a2a      	ldr	r2, [pc, #168]	@ (800be68 <TIM_OC3_SetConfig+0x110>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d003      	beq.n	800bdca <TIM_OC3_SetConfig+0x72>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a29      	ldr	r2, [pc, #164]	@ (800be6c <TIM_OC3_SetConfig+0x114>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d10d      	bne.n	800bde6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	021b      	lsls	r3, r3, #8
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bde4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a1e      	ldr	r2, [pc, #120]	@ (800be64 <TIM_OC3_SetConfig+0x10c>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d013      	beq.n	800be16 <TIM_OC3_SetConfig+0xbe>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a1d      	ldr	r2, [pc, #116]	@ (800be68 <TIM_OC3_SetConfig+0x110>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d00f      	beq.n	800be16 <TIM_OC3_SetConfig+0xbe>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a1d      	ldr	r2, [pc, #116]	@ (800be70 <TIM_OC3_SetConfig+0x118>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d00b      	beq.n	800be16 <TIM_OC3_SetConfig+0xbe>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a1c      	ldr	r2, [pc, #112]	@ (800be74 <TIM_OC3_SetConfig+0x11c>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d007      	beq.n	800be16 <TIM_OC3_SetConfig+0xbe>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a1b      	ldr	r2, [pc, #108]	@ (800be78 <TIM_OC3_SetConfig+0x120>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d003      	beq.n	800be16 <TIM_OC3_SetConfig+0xbe>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a16      	ldr	r2, [pc, #88]	@ (800be6c <TIM_OC3_SetConfig+0x114>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d113      	bne.n	800be3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	693a      	ldr	r2, [r7, #16]
 800be42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	621a      	str	r2, [r3, #32]
}
 800be58:	bf00      	nop
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	40012c00 	.word	0x40012c00
 800be68:	40013400 	.word	0x40013400
 800be6c:	40015000 	.word	0x40015000
 800be70:	40014000 	.word	0x40014000
 800be74:	40014400 	.word	0x40014400
 800be78:	40014800 	.word	0x40014800

0800be7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a1b      	ldr	r3, [r3, #32]
 800be90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	69db      	ldr	r3, [r3, #28]
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800beaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800beca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	031b      	lsls	r3, r3, #12
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a2c      	ldr	r2, [pc, #176]	@ (800bf8c <TIM_OC4_SetConfig+0x110>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d007      	beq.n	800bef0 <TIM_OC4_SetConfig+0x74>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a2b      	ldr	r2, [pc, #172]	@ (800bf90 <TIM_OC4_SetConfig+0x114>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d003      	beq.n	800bef0 <TIM_OC4_SetConfig+0x74>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a2a      	ldr	r2, [pc, #168]	@ (800bf94 <TIM_OC4_SetConfig+0x118>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d10d      	bne.n	800bf0c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	031b      	lsls	r3, r3, #12
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a1f      	ldr	r2, [pc, #124]	@ (800bf8c <TIM_OC4_SetConfig+0x110>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d013      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc0>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a1e      	ldr	r2, [pc, #120]	@ (800bf90 <TIM_OC4_SetConfig+0x114>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d00f      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc0>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a1e      	ldr	r2, [pc, #120]	@ (800bf98 <TIM_OC4_SetConfig+0x11c>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d00b      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc0>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a1d      	ldr	r2, [pc, #116]	@ (800bf9c <TIM_OC4_SetConfig+0x120>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d007      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc0>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a1c      	ldr	r2, [pc, #112]	@ (800bfa0 <TIM_OC4_SetConfig+0x124>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d003      	beq.n	800bf3c <TIM_OC4_SetConfig+0xc0>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a17      	ldr	r2, [pc, #92]	@ (800bf94 <TIM_OC4_SetConfig+0x118>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d113      	bne.n	800bf64 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bf4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	019b      	lsls	r3, r3, #6
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	019b      	lsls	r3, r3, #6
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	621a      	str	r2, [r3, #32]
}
 800bf7e:	bf00      	nop
 800bf80:	371c      	adds	r7, #28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	40012c00 	.word	0x40012c00
 800bf90:	40013400 	.word	0x40013400
 800bf94:	40015000 	.word	0x40015000
 800bf98:	40014000 	.word	0x40014000
 800bf9c:	40014400 	.word	0x40014400
 800bfa0:	40014800 	.word	0x40014800

0800bfa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bfe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	041b      	lsls	r3, r3, #16
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a19      	ldr	r2, [pc, #100]	@ (800c060 <TIM_OC5_SetConfig+0xbc>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d013      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a18      	ldr	r2, [pc, #96]	@ (800c064 <TIM_OC5_SetConfig+0xc0>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d00f      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a17      	ldr	r2, [pc, #92]	@ (800c068 <TIM_OC5_SetConfig+0xc4>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d00b      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a16      	ldr	r2, [pc, #88]	@ (800c06c <TIM_OC5_SetConfig+0xc8>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d007      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a15      	ldr	r2, [pc, #84]	@ (800c070 <TIM_OC5_SetConfig+0xcc>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d003      	beq.n	800c026 <TIM_OC5_SetConfig+0x82>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a14      	ldr	r2, [pc, #80]	@ (800c074 <TIM_OC5_SetConfig+0xd0>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d109      	bne.n	800c03a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c02c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	021b      	lsls	r3, r3, #8
 800c034:	697a      	ldr	r2, [r7, #20]
 800c036:	4313      	orrs	r3, r2
 800c038:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	621a      	str	r2, [r3, #32]
}
 800c054:	bf00      	nop
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	40012c00 	.word	0x40012c00
 800c064:	40013400 	.word	0x40013400
 800c068:	40014000 	.word	0x40014000
 800c06c:	40014400 	.word	0x40014400
 800c070:	40014800 	.word	0x40014800
 800c074:	40015000 	.word	0x40015000

0800c078 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c078:	b480      	push	{r7}
 800c07a:	b087      	sub	sp, #28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	021b      	lsls	r3, r3, #8
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c0be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	051b      	lsls	r3, r3, #20
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a1a      	ldr	r2, [pc, #104]	@ (800c138 <TIM_OC6_SetConfig+0xc0>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d013      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a19      	ldr	r2, [pc, #100]	@ (800c13c <TIM_OC6_SetConfig+0xc4>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00f      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a18      	ldr	r2, [pc, #96]	@ (800c140 <TIM_OC6_SetConfig+0xc8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d00b      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a17      	ldr	r2, [pc, #92]	@ (800c144 <TIM_OC6_SetConfig+0xcc>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d007      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a16      	ldr	r2, [pc, #88]	@ (800c148 <TIM_OC6_SetConfig+0xd0>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d003      	beq.n	800c0fc <TIM_OC6_SetConfig+0x84>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a15      	ldr	r2, [pc, #84]	@ (800c14c <TIM_OC6_SetConfig+0xd4>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d109      	bne.n	800c110 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c102:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	029b      	lsls	r3, r3, #10
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	621a      	str	r2, [r3, #32]
}
 800c12a:	bf00      	nop
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	40012c00 	.word	0x40012c00
 800c13c:	40013400 	.word	0x40013400
 800c140:	40014000 	.word	0x40014000
 800c144:	40014400 	.word	0x40014400
 800c148:	40014800 	.word	0x40014800
 800c14c:	40015000 	.word	0x40015000

0800c150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	f003 031f 	and.w	r3, r3, #31
 800c162:	2201      	movs	r2, #1
 800c164:	fa02 f303 	lsl.w	r3, r2, r3
 800c168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6a1a      	ldr	r2, [r3, #32]
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	43db      	mvns	r3, r3
 800c172:	401a      	ands	r2, r3
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6a1a      	ldr	r2, [r3, #32]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	f003 031f 	and.w	r3, r3, #31
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	fa01 f303 	lsl.w	r3, r1, r3
 800c188:	431a      	orrs	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	621a      	str	r2, [r3, #32]
}
 800c18e:	bf00      	nop
 800c190:	371c      	adds	r7, #28
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
	...

0800c19c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d101      	bne.n	800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	e074      	b.n	800c29e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a34      	ldr	r2, [pc, #208]	@ (800c2ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d009      	beq.n	800c1f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a33      	ldr	r2, [pc, #204]	@ (800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d004      	beq.n	800c1f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a31      	ldr	r2, [pc, #196]	@ (800c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d108      	bne.n	800c204 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c1f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	4313      	orrs	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c20e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	4313      	orrs	r3, r2
 800c218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a21      	ldr	r2, [pc, #132]	@ (800c2ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d022      	beq.n	800c272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c234:	d01d      	beq.n	800c272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a1f      	ldr	r2, [pc, #124]	@ (800c2b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d018      	beq.n	800c272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a1d      	ldr	r2, [pc, #116]	@ (800c2bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d013      	beq.n	800c272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a1c      	ldr	r2, [pc, #112]	@ (800c2c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d00e      	beq.n	800c272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a15      	ldr	r2, [pc, #84]	@ (800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d009      	beq.n	800c272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a18      	ldr	r2, [pc, #96]	@ (800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d004      	beq.n	800c272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a11      	ldr	r2, [pc, #68]	@ (800c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d10c      	bne.n	800c28c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	4313      	orrs	r3, r2
 800c282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3714      	adds	r7, #20
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	40012c00 	.word	0x40012c00
 800c2b0:	40013400 	.word	0x40013400
 800c2b4:	40015000 	.word	0x40015000
 800c2b8:	40000400 	.word	0x40000400
 800c2bc:	40000800 	.word	0x40000800
 800c2c0:	40000c00 	.word	0x40000c00
 800c2c4:	40014000 	.word	0x40014000

0800c2c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c30c:	bf00      	nop
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e042      	b.n	800c3ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7fb fdf5 	bl	8007f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2224      	movs	r2, #36	@ 0x24
 800c382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f022 0201 	bic.w	r2, r2, #1
 800c394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fb24 	bl	800c9ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f825 	bl	800c3f4 <UART_SetConfig>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d101      	bne.n	800c3b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e01b      	b.n	800c3ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	685a      	ldr	r2, [r3, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	689a      	ldr	r2, [r3, #8]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c3d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0201 	orr.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fba3 	bl	800cb30 <UART_CheckIdleState>
 800c3ea:	4603      	mov	r3, r0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3f8:	b08c      	sub	sp, #48	@ 0x30
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	431a      	orrs	r2, r3
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	431a      	orrs	r2, r3
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	69db      	ldr	r3, [r3, #28]
 800c418:	4313      	orrs	r3, r2
 800c41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	4baa      	ldr	r3, [pc, #680]	@ (800c6cc <UART_SetConfig+0x2d8>)
 800c424:	4013      	ands	r3, r2
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	6812      	ldr	r2, [r2, #0]
 800c42a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c42c:	430b      	orrs	r3, r1
 800c42e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	68da      	ldr	r2, [r3, #12]
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	430a      	orrs	r2, r1
 800c444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a9f      	ldr	r2, [pc, #636]	@ (800c6d0 <UART_SetConfig+0x2dc>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d004      	beq.n	800c460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c45c:	4313      	orrs	r3, r2
 800c45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c46a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	6812      	ldr	r2, [r2, #0]
 800c472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c474:	430b      	orrs	r3, r1
 800c476:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c47e:	f023 010f 	bic.w	r1, r3, #15
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	430a      	orrs	r2, r1
 800c48c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a90      	ldr	r2, [pc, #576]	@ (800c6d4 <UART_SetConfig+0x2e0>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d125      	bne.n	800c4e4 <UART_SetConfig+0xf0>
 800c498:	4b8f      	ldr	r3, [pc, #572]	@ (800c6d8 <UART_SetConfig+0x2e4>)
 800c49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c49e:	f003 0303 	and.w	r3, r3, #3
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d81a      	bhi.n	800c4dc <UART_SetConfig+0xe8>
 800c4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ac <UART_SetConfig+0xb8>)
 800c4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ac:	0800c4bd 	.word	0x0800c4bd
 800c4b0:	0800c4cd 	.word	0x0800c4cd
 800c4b4:	0800c4c5 	.word	0x0800c4c5
 800c4b8:	0800c4d5 	.word	0x0800c4d5
 800c4bc:	2301      	movs	r3, #1
 800c4be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4c2:	e116      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4ca:	e112      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c4cc:	2304      	movs	r3, #4
 800c4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4d2:	e10e      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c4d4:	2308      	movs	r3, #8
 800c4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4da:	e10a      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c4dc:	2310      	movs	r3, #16
 800c4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4e2:	e106      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a7c      	ldr	r2, [pc, #496]	@ (800c6dc <UART_SetConfig+0x2e8>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d138      	bne.n	800c560 <UART_SetConfig+0x16c>
 800c4ee:	4b7a      	ldr	r3, [pc, #488]	@ (800c6d8 <UART_SetConfig+0x2e4>)
 800c4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4f4:	f003 030c 	and.w	r3, r3, #12
 800c4f8:	2b0c      	cmp	r3, #12
 800c4fa:	d82d      	bhi.n	800c558 <UART_SetConfig+0x164>
 800c4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c504 <UART_SetConfig+0x110>)
 800c4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c502:	bf00      	nop
 800c504:	0800c539 	.word	0x0800c539
 800c508:	0800c559 	.word	0x0800c559
 800c50c:	0800c559 	.word	0x0800c559
 800c510:	0800c559 	.word	0x0800c559
 800c514:	0800c549 	.word	0x0800c549
 800c518:	0800c559 	.word	0x0800c559
 800c51c:	0800c559 	.word	0x0800c559
 800c520:	0800c559 	.word	0x0800c559
 800c524:	0800c541 	.word	0x0800c541
 800c528:	0800c559 	.word	0x0800c559
 800c52c:	0800c559 	.word	0x0800c559
 800c530:	0800c559 	.word	0x0800c559
 800c534:	0800c551 	.word	0x0800c551
 800c538:	2300      	movs	r3, #0
 800c53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c53e:	e0d8      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c540:	2302      	movs	r3, #2
 800c542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c546:	e0d4      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c548:	2304      	movs	r3, #4
 800c54a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c54e:	e0d0      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c550:	2308      	movs	r3, #8
 800c552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c556:	e0cc      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c558:	2310      	movs	r3, #16
 800c55a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c55e:	e0c8      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a5e      	ldr	r2, [pc, #376]	@ (800c6e0 <UART_SetConfig+0x2ec>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d125      	bne.n	800c5b6 <UART_SetConfig+0x1c2>
 800c56a:	4b5b      	ldr	r3, [pc, #364]	@ (800c6d8 <UART_SetConfig+0x2e4>)
 800c56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c570:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c574:	2b30      	cmp	r3, #48	@ 0x30
 800c576:	d016      	beq.n	800c5a6 <UART_SetConfig+0x1b2>
 800c578:	2b30      	cmp	r3, #48	@ 0x30
 800c57a:	d818      	bhi.n	800c5ae <UART_SetConfig+0x1ba>
 800c57c:	2b20      	cmp	r3, #32
 800c57e:	d00a      	beq.n	800c596 <UART_SetConfig+0x1a2>
 800c580:	2b20      	cmp	r3, #32
 800c582:	d814      	bhi.n	800c5ae <UART_SetConfig+0x1ba>
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <UART_SetConfig+0x19a>
 800c588:	2b10      	cmp	r3, #16
 800c58a:	d008      	beq.n	800c59e <UART_SetConfig+0x1aa>
 800c58c:	e00f      	b.n	800c5ae <UART_SetConfig+0x1ba>
 800c58e:	2300      	movs	r3, #0
 800c590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c594:	e0ad      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c596:	2302      	movs	r3, #2
 800c598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c59c:	e0a9      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c59e:	2304      	movs	r3, #4
 800c5a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5a4:	e0a5      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c5a6:	2308      	movs	r3, #8
 800c5a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5ac:	e0a1      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c5ae:	2310      	movs	r3, #16
 800c5b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5b4:	e09d      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a4a      	ldr	r2, [pc, #296]	@ (800c6e4 <UART_SetConfig+0x2f0>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d125      	bne.n	800c60c <UART_SetConfig+0x218>
 800c5c0:	4b45      	ldr	r3, [pc, #276]	@ (800c6d8 <UART_SetConfig+0x2e4>)
 800c5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c5ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800c5cc:	d016      	beq.n	800c5fc <UART_SetConfig+0x208>
 800c5ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800c5d0:	d818      	bhi.n	800c604 <UART_SetConfig+0x210>
 800c5d2:	2b80      	cmp	r3, #128	@ 0x80
 800c5d4:	d00a      	beq.n	800c5ec <UART_SetConfig+0x1f8>
 800c5d6:	2b80      	cmp	r3, #128	@ 0x80
 800c5d8:	d814      	bhi.n	800c604 <UART_SetConfig+0x210>
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d002      	beq.n	800c5e4 <UART_SetConfig+0x1f0>
 800c5de:	2b40      	cmp	r3, #64	@ 0x40
 800c5e0:	d008      	beq.n	800c5f4 <UART_SetConfig+0x200>
 800c5e2:	e00f      	b.n	800c604 <UART_SetConfig+0x210>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5ea:	e082      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5f2:	e07e      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c5f4:	2304      	movs	r3, #4
 800c5f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c5fa:	e07a      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c5fc:	2308      	movs	r3, #8
 800c5fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c602:	e076      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c604:	2310      	movs	r3, #16
 800c606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c60a:	e072      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a35      	ldr	r2, [pc, #212]	@ (800c6e8 <UART_SetConfig+0x2f4>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d12a      	bne.n	800c66c <UART_SetConfig+0x278>
 800c616:	4b30      	ldr	r3, [pc, #192]	@ (800c6d8 <UART_SetConfig+0x2e4>)
 800c618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c61c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c624:	d01a      	beq.n	800c65c <UART_SetConfig+0x268>
 800c626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c62a:	d81b      	bhi.n	800c664 <UART_SetConfig+0x270>
 800c62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c630:	d00c      	beq.n	800c64c <UART_SetConfig+0x258>
 800c632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c636:	d815      	bhi.n	800c664 <UART_SetConfig+0x270>
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d003      	beq.n	800c644 <UART_SetConfig+0x250>
 800c63c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c640:	d008      	beq.n	800c654 <UART_SetConfig+0x260>
 800c642:	e00f      	b.n	800c664 <UART_SetConfig+0x270>
 800c644:	2300      	movs	r3, #0
 800c646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c64a:	e052      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c64c:	2302      	movs	r3, #2
 800c64e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c652:	e04e      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c654:	2304      	movs	r3, #4
 800c656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c65a:	e04a      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c65c:	2308      	movs	r3, #8
 800c65e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c662:	e046      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c664:	2310      	movs	r3, #16
 800c666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c66a:	e042      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a17      	ldr	r2, [pc, #92]	@ (800c6d0 <UART_SetConfig+0x2dc>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d13a      	bne.n	800c6ec <UART_SetConfig+0x2f8>
 800c676:	4b18      	ldr	r3, [pc, #96]	@ (800c6d8 <UART_SetConfig+0x2e4>)
 800c678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c67c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c684:	d01a      	beq.n	800c6bc <UART_SetConfig+0x2c8>
 800c686:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c68a:	d81b      	bhi.n	800c6c4 <UART_SetConfig+0x2d0>
 800c68c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c690:	d00c      	beq.n	800c6ac <UART_SetConfig+0x2b8>
 800c692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c696:	d815      	bhi.n	800c6c4 <UART_SetConfig+0x2d0>
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <UART_SetConfig+0x2b0>
 800c69c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6a0:	d008      	beq.n	800c6b4 <UART_SetConfig+0x2c0>
 800c6a2:	e00f      	b.n	800c6c4 <UART_SetConfig+0x2d0>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6aa:	e022      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6b2:	e01e      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c6b4:	2304      	movs	r3, #4
 800c6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6ba:	e01a      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c6bc:	2308      	movs	r3, #8
 800c6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6c2:	e016      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c6c4:	2310      	movs	r3, #16
 800c6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6ca:	e012      	b.n	800c6f2 <UART_SetConfig+0x2fe>
 800c6cc:	cfff69f3 	.word	0xcfff69f3
 800c6d0:	40008000 	.word	0x40008000
 800c6d4:	40013800 	.word	0x40013800
 800c6d8:	40021000 	.word	0x40021000
 800c6dc:	40004400 	.word	0x40004400
 800c6e0:	40004800 	.word	0x40004800
 800c6e4:	40004c00 	.word	0x40004c00
 800c6e8:	40005000 	.word	0x40005000
 800c6ec:	2310      	movs	r3, #16
 800c6ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4aae      	ldr	r2, [pc, #696]	@ (800c9b0 <UART_SetConfig+0x5bc>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	f040 8097 	bne.w	800c82c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c6fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c702:	2b08      	cmp	r3, #8
 800c704:	d823      	bhi.n	800c74e <UART_SetConfig+0x35a>
 800c706:	a201      	add	r2, pc, #4	@ (adr r2, 800c70c <UART_SetConfig+0x318>)
 800c708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70c:	0800c731 	.word	0x0800c731
 800c710:	0800c74f 	.word	0x0800c74f
 800c714:	0800c739 	.word	0x0800c739
 800c718:	0800c74f 	.word	0x0800c74f
 800c71c:	0800c73f 	.word	0x0800c73f
 800c720:	0800c74f 	.word	0x0800c74f
 800c724:	0800c74f 	.word	0x0800c74f
 800c728:	0800c74f 	.word	0x0800c74f
 800c72c:	0800c747 	.word	0x0800c747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c730:	f7fd fdf8 	bl	800a324 <HAL_RCC_GetPCLK1Freq>
 800c734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c736:	e010      	b.n	800c75a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c738:	4b9e      	ldr	r3, [pc, #632]	@ (800c9b4 <UART_SetConfig+0x5c0>)
 800c73a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c73c:	e00d      	b.n	800c75a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c73e:	f7fd fd83 	bl	800a248 <HAL_RCC_GetSysClockFreq>
 800c742:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c744:	e009      	b.n	800c75a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c74a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c74c:	e005      	b.n	800c75a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c74e:	2300      	movs	r3, #0
 800c750:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c758:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 8130 	beq.w	800c9c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c766:	4a94      	ldr	r2, [pc, #592]	@ (800c9b8 <UART_SetConfig+0x5c4>)
 800c768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c76c:	461a      	mov	r2, r3
 800c76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c770:	fbb3 f3f2 	udiv	r3, r3, r2
 800c774:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	685a      	ldr	r2, [r3, #4]
 800c77a:	4613      	mov	r3, r2
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	4413      	add	r3, r2
 800c780:	69ba      	ldr	r2, [r7, #24]
 800c782:	429a      	cmp	r2, r3
 800c784:	d305      	bcc.n	800c792 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c78c:	69ba      	ldr	r2, [r7, #24]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d903      	bls.n	800c79a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c798:	e113      	b.n	800c9c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79c:	2200      	movs	r2, #0
 800c79e:	60bb      	str	r3, [r7, #8]
 800c7a0:	60fa      	str	r2, [r7, #12]
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a6:	4a84      	ldr	r2, [pc, #528]	@ (800c9b8 <UART_SetConfig+0x5c4>)
 800c7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	603b      	str	r3, [r7, #0]
 800c7b2:	607a      	str	r2, [r7, #4]
 800c7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c7bc:	f7f3 fd88 	bl	80002d0 <__aeabi_uldivmod>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	f04f 0200 	mov.w	r2, #0
 800c7cc:	f04f 0300 	mov.w	r3, #0
 800c7d0:	020b      	lsls	r3, r1, #8
 800c7d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7d6:	0202      	lsls	r2, r0, #8
 800c7d8:	6979      	ldr	r1, [r7, #20]
 800c7da:	6849      	ldr	r1, [r1, #4]
 800c7dc:	0849      	lsrs	r1, r1, #1
 800c7de:	2000      	movs	r0, #0
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	eb12 0804 	adds.w	r8, r2, r4
 800c7e8:	eb43 0905 	adc.w	r9, r3, r5
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	469a      	mov	sl, r3
 800c7f4:	4693      	mov	fp, r2
 800c7f6:	4652      	mov	r2, sl
 800c7f8:	465b      	mov	r3, fp
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	f7f3 fd67 	bl	80002d0 <__aeabi_uldivmod>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4613      	mov	r3, r2
 800c808:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c810:	d308      	bcc.n	800c824 <UART_SetConfig+0x430>
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c818:	d204      	bcs.n	800c824 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	6a3a      	ldr	r2, [r7, #32]
 800c820:	60da      	str	r2, [r3, #12]
 800c822:	e0ce      	b.n	800c9c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c82a:	e0ca      	b.n	800c9c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c834:	d166      	bne.n	800c904 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c836:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c83a:	2b08      	cmp	r3, #8
 800c83c:	d827      	bhi.n	800c88e <UART_SetConfig+0x49a>
 800c83e:	a201      	add	r2, pc, #4	@ (adr r2, 800c844 <UART_SetConfig+0x450>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c869 	.word	0x0800c869
 800c848:	0800c871 	.word	0x0800c871
 800c84c:	0800c879 	.word	0x0800c879
 800c850:	0800c88f 	.word	0x0800c88f
 800c854:	0800c87f 	.word	0x0800c87f
 800c858:	0800c88f 	.word	0x0800c88f
 800c85c:	0800c88f 	.word	0x0800c88f
 800c860:	0800c88f 	.word	0x0800c88f
 800c864:	0800c887 	.word	0x0800c887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c868:	f7fd fd5c 	bl	800a324 <HAL_RCC_GetPCLK1Freq>
 800c86c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c86e:	e014      	b.n	800c89a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c870:	f7fd fd6e 	bl	800a350 <HAL_RCC_GetPCLK2Freq>
 800c874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c876:	e010      	b.n	800c89a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c878:	4b4e      	ldr	r3, [pc, #312]	@ (800c9b4 <UART_SetConfig+0x5c0>)
 800c87a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c87c:	e00d      	b.n	800c89a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c87e:	f7fd fce3 	bl	800a248 <HAL_RCC_GetSysClockFreq>
 800c882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c884:	e009      	b.n	800c89a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c88a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c88c:	e005      	b.n	800c89a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c88e:	2300      	movs	r3, #0
 800c890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f000 8090 	beq.w	800c9c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a6:	4a44      	ldr	r2, [pc, #272]	@ (800c9b8 <UART_SetConfig+0x5c4>)
 800c8a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8b4:	005a      	lsls	r2, r3, #1
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	085b      	lsrs	r3, r3, #1
 800c8bc:	441a      	add	r2, r3
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	2b0f      	cmp	r3, #15
 800c8cc:	d916      	bls.n	800c8fc <UART_SetConfig+0x508>
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8d4:	d212      	bcs.n	800c8fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	f023 030f 	bic.w	r3, r3, #15
 800c8de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8e0:	6a3b      	ldr	r3, [r7, #32]
 800c8e2:	085b      	lsrs	r3, r3, #1
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	8bfb      	ldrh	r3, [r7, #30]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	8bfa      	ldrh	r2, [r7, #30]
 800c8f8:	60da      	str	r2, [r3, #12]
 800c8fa:	e062      	b.n	800c9c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c902:	e05e      	b.n	800c9c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c904:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c908:	2b08      	cmp	r3, #8
 800c90a:	d828      	bhi.n	800c95e <UART_SetConfig+0x56a>
 800c90c:	a201      	add	r2, pc, #4	@ (adr r2, 800c914 <UART_SetConfig+0x520>)
 800c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c912:	bf00      	nop
 800c914:	0800c939 	.word	0x0800c939
 800c918:	0800c941 	.word	0x0800c941
 800c91c:	0800c949 	.word	0x0800c949
 800c920:	0800c95f 	.word	0x0800c95f
 800c924:	0800c94f 	.word	0x0800c94f
 800c928:	0800c95f 	.word	0x0800c95f
 800c92c:	0800c95f 	.word	0x0800c95f
 800c930:	0800c95f 	.word	0x0800c95f
 800c934:	0800c957 	.word	0x0800c957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c938:	f7fd fcf4 	bl	800a324 <HAL_RCC_GetPCLK1Freq>
 800c93c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c93e:	e014      	b.n	800c96a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c940:	f7fd fd06 	bl	800a350 <HAL_RCC_GetPCLK2Freq>
 800c944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c946:	e010      	b.n	800c96a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c948:	4b1a      	ldr	r3, [pc, #104]	@ (800c9b4 <UART_SetConfig+0x5c0>)
 800c94a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c94c:	e00d      	b.n	800c96a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c94e:	f7fd fc7b 	bl	800a248 <HAL_RCC_GetSysClockFreq>
 800c952:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c954:	e009      	b.n	800c96a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c95a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c95c:	e005      	b.n	800c96a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c95e:	2300      	movs	r3, #0
 800c960:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c968:	bf00      	nop
    }

    if (pclk != 0U)
 800c96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d028      	beq.n	800c9c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c974:	4a10      	ldr	r2, [pc, #64]	@ (800c9b8 <UART_SetConfig+0x5c4>)
 800c976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c97a:	461a      	mov	r2, r3
 800c97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	085b      	lsrs	r3, r3, #1
 800c988:	441a      	add	r2, r3
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c992:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c994:	6a3b      	ldr	r3, [r7, #32]
 800c996:	2b0f      	cmp	r3, #15
 800c998:	d910      	bls.n	800c9bc <UART_SetConfig+0x5c8>
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9a0:	d20c      	bcs.n	800c9bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	60da      	str	r2, [r3, #12]
 800c9ac:	e009      	b.n	800c9c2 <UART_SetConfig+0x5ce>
 800c9ae:	bf00      	nop
 800c9b0:	40008000 	.word	0x40008000
 800c9b4:	00f42400 	.word	0x00f42400
 800c9b8:	0800e930 	.word	0x0800e930
      }
      else
      {
        ret = HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c9de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3730      	adds	r7, #48	@ 0x30
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c9ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f8:	f003 0308 	and.w	r3, r3, #8
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00a      	beq.n	800ca38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	430a      	orrs	r2, r1
 800ca36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3c:	f003 0302 	and.w	r3, r3, #2
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00a      	beq.n	800ca5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca5e:	f003 0304 	and.w	r3, r3, #4
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca80:	f003 0310 	and.w	r3, r3, #16
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00a      	beq.n	800ca9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa2:	f003 0320 	and.w	r3, r3, #32
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	430a      	orrs	r2, r1
 800cabe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01a      	beq.n	800cb02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	430a      	orrs	r2, r1
 800cae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caea:	d10a      	bne.n	800cb02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	430a      	orrs	r2, r1
 800cb22:	605a      	str	r2, [r3, #4]
  }
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b098      	sub	sp, #96	@ 0x60
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb40:	f7fb fcc4 	bl	80084cc <HAL_GetTick>
 800cb44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0308 	and.w	r3, r3, #8
 800cb50:	2b08      	cmp	r3, #8
 800cb52:	d12f      	bne.n	800cbb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f88e 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d022      	beq.n	800cbb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb82:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e6      	bne.n	800cb6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e063      	b.n	800cc7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0304 	and.w	r3, r3, #4
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d149      	bne.n	800cc56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cbc6:	9300      	str	r3, [sp, #0]
 800cbc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f857 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d03c      	beq.n	800cc56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	623b      	str	r3, [r7, #32]
   return(result);
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1e6      	bne.n	800cbdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3308      	adds	r3, #8
 800cc14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	e853 3f00 	ldrex	r3, [r3]
 800cc1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f023 0301 	bic.w	r3, r3, #1
 800cc24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc2e:	61fa      	str	r2, [r7, #28]
 800cc30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc32:	69b9      	ldr	r1, [r7, #24]
 800cc34:	69fa      	ldr	r2, [r7, #28]
 800cc36:	e841 2300 	strex	r3, r2, [r1]
 800cc3a:	617b      	str	r3, [r7, #20]
   return(result);
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e5      	bne.n	800cc0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2220      	movs	r2, #32
 800cc46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e012      	b.n	800cc7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2220      	movs	r2, #32
 800cc62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3758      	adds	r7, #88	@ 0x58
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	4613      	mov	r3, r2
 800cc92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc94:	e04f      	b.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc9c:	d04b      	beq.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc9e:	f7fb fc15 	bl	80084cc <HAL_GetTick>
 800cca2:	4602      	mov	r2, r0
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d302      	bcc.n	800ccb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e04e      	b.n	800cd56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0304 	and.w	r3, r3, #4
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d037      	beq.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b80      	cmp	r3, #128	@ 0x80
 800ccca:	d034      	beq.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2b40      	cmp	r3, #64	@ 0x40
 800ccd0:	d031      	beq.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	69db      	ldr	r3, [r3, #28]
 800ccd8:	f003 0308 	and.w	r3, r3, #8
 800ccdc:	2b08      	cmp	r3, #8
 800ccde:	d110      	bne.n	800cd02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2208      	movs	r2, #8
 800cce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f000 f838 	bl	800cd5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2208      	movs	r2, #8
 800ccf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e029      	b.n	800cd56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd10:	d111      	bne.n	800cd36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f000 f81e 	bl	800cd5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2220      	movs	r2, #32
 800cd26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cd32:	2303      	movs	r3, #3
 800cd34:	e00f      	b.n	800cd56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	69da      	ldr	r2, [r3, #28]
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	4013      	ands	r3, r2
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	bf0c      	ite	eq
 800cd46:	2301      	moveq	r3, #1
 800cd48:	2300      	movne	r3, #0
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	79fb      	ldrb	r3, [r7, #7]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d0a0      	beq.n	800cc96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b095      	sub	sp, #84	@ 0x54
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd6e:	e853 3f00 	ldrex	r3, [r3]
 800cd72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	461a      	mov	r2, r3
 800cd82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd84:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd8c:	e841 2300 	strex	r3, r2, [r1]
 800cd90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1e6      	bne.n	800cd66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3308      	adds	r3, #8
 800cd9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda0:	6a3b      	ldr	r3, [r7, #32]
 800cda2:	e853 3f00 	ldrex	r3, [r3]
 800cda6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cdae:	f023 0301 	bic.w	r3, r3, #1
 800cdb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3308      	adds	r3, #8
 800cdba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cdbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cdbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdc4:	e841 2300 	strex	r3, r2, [r1]
 800cdc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1e3      	bne.n	800cd98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d118      	bne.n	800ce0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	e853 3f00 	ldrex	r3, [r3]
 800cde4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	f023 0310 	bic.w	r3, r3, #16
 800cdec:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdf6:	61bb      	str	r3, [r7, #24]
 800cdf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfa:	6979      	ldr	r1, [r7, #20]
 800cdfc:	69ba      	ldr	r2, [r7, #24]
 800cdfe:	e841 2300 	strex	r3, r2, [r1]
 800ce02:	613b      	str	r3, [r7, #16]
   return(result);
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1e6      	bne.n	800cdd8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2220      	movs	r2, #32
 800ce0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ce1e:	bf00      	nop
 800ce20:	3754      	adds	r7, #84	@ 0x54
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b085      	sub	sp, #20
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d101      	bne.n	800ce40 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	e027      	b.n	800ce90 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2224      	movs	r2, #36	@ 0x24
 800ce4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0201 	bic.w	r2, r2, #1
 800ce66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ce6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2220      	movs	r2, #32
 800ce82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d101      	bne.n	800ceb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	e02d      	b.n	800cf10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2224      	movs	r2, #36	@ 0x24
 800cec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f022 0201 	bic.w	r2, r2, #1
 800ceda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f84f 	bl	800cf94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2220      	movs	r2, #32
 800cf02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d101      	bne.n	800cf30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	e02d      	b.n	800cf8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2224      	movs	r2, #36	@ 0x24
 800cf3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f022 0201 	bic.w	r2, r2, #1
 800cf56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f811 	bl	800cf94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2220      	movs	r2, #32
 800cf7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d108      	bne.n	800cfb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfb4:	e031      	b.n	800d01a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfb6:	2308      	movs	r3, #8
 800cfb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfba:	2308      	movs	r3, #8
 800cfbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	0e5b      	lsrs	r3, r3, #25
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	f003 0307 	and.w	r3, r3, #7
 800cfcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	0f5b      	lsrs	r3, r3, #29
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	f003 0307 	and.w	r3, r3, #7
 800cfdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfde:	7bbb      	ldrb	r3, [r7, #14]
 800cfe0:	7b3a      	ldrb	r2, [r7, #12]
 800cfe2:	4911      	ldr	r1, [pc, #68]	@ (800d028 <UARTEx_SetNbDataToProcess+0x94>)
 800cfe4:	5c8a      	ldrb	r2, [r1, r2]
 800cfe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cfea:	7b3a      	ldrb	r2, [r7, #12]
 800cfec:	490f      	ldr	r1, [pc, #60]	@ (800d02c <UARTEx_SetNbDataToProcess+0x98>)
 800cfee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
 800cffe:	7b7a      	ldrb	r2, [r7, #13]
 800d000:	4909      	ldr	r1, [pc, #36]	@ (800d028 <UARTEx_SetNbDataToProcess+0x94>)
 800d002:	5c8a      	ldrb	r2, [r1, r2]
 800d004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d008:	7b7a      	ldrb	r2, [r7, #13]
 800d00a:	4908      	ldr	r1, [pc, #32]	@ (800d02c <UARTEx_SetNbDataToProcess+0x98>)
 800d00c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d00e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d012:	b29a      	uxth	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d01a:	bf00      	nop
 800d01c:	3714      	adds	r7, #20
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	0800e948 	.word	0x0800e948
 800d02c:	0800e950 	.word	0x0800e950

0800d030 <calloc>:
 800d030:	4b02      	ldr	r3, [pc, #8]	@ (800d03c <calloc+0xc>)
 800d032:	460a      	mov	r2, r1
 800d034:	4601      	mov	r1, r0
 800d036:	6818      	ldr	r0, [r3, #0]
 800d038:	f000 b802 	b.w	800d040 <_calloc_r>
 800d03c:	200003e8 	.word	0x200003e8

0800d040 <_calloc_r>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	fba1 5402 	umull	r5, r4, r1, r2
 800d046:	b93c      	cbnz	r4, 800d058 <_calloc_r+0x18>
 800d048:	4629      	mov	r1, r5
 800d04a:	f000 f837 	bl	800d0bc <_malloc_r>
 800d04e:	4606      	mov	r6, r0
 800d050:	b928      	cbnz	r0, 800d05e <_calloc_r+0x1e>
 800d052:	2600      	movs	r6, #0
 800d054:	4630      	mov	r0, r6
 800d056:	bd70      	pop	{r4, r5, r6, pc}
 800d058:	220c      	movs	r2, #12
 800d05a:	6002      	str	r2, [r0, #0]
 800d05c:	e7f9      	b.n	800d052 <_calloc_r+0x12>
 800d05e:	462a      	mov	r2, r5
 800d060:	4621      	mov	r1, r4
 800d062:	f000 fb9b 	bl	800d79c <memset>
 800d066:	e7f5      	b.n	800d054 <_calloc_r+0x14>

0800d068 <free>:
 800d068:	4b02      	ldr	r3, [pc, #8]	@ (800d074 <free+0xc>)
 800d06a:	4601      	mov	r1, r0
 800d06c:	6818      	ldr	r0, [r3, #0]
 800d06e:	f000 bc2f 	b.w	800d8d0 <_free_r>
 800d072:	bf00      	nop
 800d074:	200003e8 	.word	0x200003e8

0800d078 <sbrk_aligned>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	4e0f      	ldr	r6, [pc, #60]	@ (800d0b8 <sbrk_aligned+0x40>)
 800d07c:	460c      	mov	r4, r1
 800d07e:	6831      	ldr	r1, [r6, #0]
 800d080:	4605      	mov	r5, r0
 800d082:	b911      	cbnz	r1, 800d08a <sbrk_aligned+0x12>
 800d084:	f000 fbc6 	bl	800d814 <_sbrk_r>
 800d088:	6030      	str	r0, [r6, #0]
 800d08a:	4621      	mov	r1, r4
 800d08c:	4628      	mov	r0, r5
 800d08e:	f000 fbc1 	bl	800d814 <_sbrk_r>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	d103      	bne.n	800d09e <sbrk_aligned+0x26>
 800d096:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d09a:	4620      	mov	r0, r4
 800d09c:	bd70      	pop	{r4, r5, r6, pc}
 800d09e:	1cc4      	adds	r4, r0, #3
 800d0a0:	f024 0403 	bic.w	r4, r4, #3
 800d0a4:	42a0      	cmp	r0, r4
 800d0a6:	d0f8      	beq.n	800d09a <sbrk_aligned+0x22>
 800d0a8:	1a21      	subs	r1, r4, r0
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f000 fbb2 	bl	800d814 <_sbrk_r>
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d1f2      	bne.n	800d09a <sbrk_aligned+0x22>
 800d0b4:	e7ef      	b.n	800d096 <sbrk_aligned+0x1e>
 800d0b6:	bf00      	nop
 800d0b8:	200006b4 	.word	0x200006b4

0800d0bc <_malloc_r>:
 800d0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c0:	1ccd      	adds	r5, r1, #3
 800d0c2:	f025 0503 	bic.w	r5, r5, #3
 800d0c6:	3508      	adds	r5, #8
 800d0c8:	2d0c      	cmp	r5, #12
 800d0ca:	bf38      	it	cc
 800d0cc:	250c      	movcc	r5, #12
 800d0ce:	2d00      	cmp	r5, #0
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	db01      	blt.n	800d0d8 <_malloc_r+0x1c>
 800d0d4:	42a9      	cmp	r1, r5
 800d0d6:	d904      	bls.n	800d0e2 <_malloc_r+0x26>
 800d0d8:	230c      	movs	r3, #12
 800d0da:	6033      	str	r3, [r6, #0]
 800d0dc:	2000      	movs	r0, #0
 800d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1b8 <_malloc_r+0xfc>
 800d0e6:	f000 f869 	bl	800d1bc <__malloc_lock>
 800d0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d0ee:	461c      	mov	r4, r3
 800d0f0:	bb44      	cbnz	r4, 800d144 <_malloc_r+0x88>
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff ffbf 	bl	800d078 <sbrk_aligned>
 800d0fa:	1c43      	adds	r3, r0, #1
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	d158      	bne.n	800d1b2 <_malloc_r+0xf6>
 800d100:	f8d8 4000 	ldr.w	r4, [r8]
 800d104:	4627      	mov	r7, r4
 800d106:	2f00      	cmp	r7, #0
 800d108:	d143      	bne.n	800d192 <_malloc_r+0xd6>
 800d10a:	2c00      	cmp	r4, #0
 800d10c:	d04b      	beq.n	800d1a6 <_malloc_r+0xea>
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	4639      	mov	r1, r7
 800d112:	4630      	mov	r0, r6
 800d114:	eb04 0903 	add.w	r9, r4, r3
 800d118:	f000 fb7c 	bl	800d814 <_sbrk_r>
 800d11c:	4581      	cmp	r9, r0
 800d11e:	d142      	bne.n	800d1a6 <_malloc_r+0xea>
 800d120:	6821      	ldr	r1, [r4, #0]
 800d122:	1a6d      	subs	r5, r5, r1
 800d124:	4629      	mov	r1, r5
 800d126:	4630      	mov	r0, r6
 800d128:	f7ff ffa6 	bl	800d078 <sbrk_aligned>
 800d12c:	3001      	adds	r0, #1
 800d12e:	d03a      	beq.n	800d1a6 <_malloc_r+0xea>
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	442b      	add	r3, r5
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	f8d8 3000 	ldr.w	r3, [r8]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	bb62      	cbnz	r2, 800d198 <_malloc_r+0xdc>
 800d13e:	f8c8 7000 	str.w	r7, [r8]
 800d142:	e00f      	b.n	800d164 <_malloc_r+0xa8>
 800d144:	6822      	ldr	r2, [r4, #0]
 800d146:	1b52      	subs	r2, r2, r5
 800d148:	d420      	bmi.n	800d18c <_malloc_r+0xd0>
 800d14a:	2a0b      	cmp	r2, #11
 800d14c:	d917      	bls.n	800d17e <_malloc_r+0xc2>
 800d14e:	1961      	adds	r1, r4, r5
 800d150:	42a3      	cmp	r3, r4
 800d152:	6025      	str	r5, [r4, #0]
 800d154:	bf18      	it	ne
 800d156:	6059      	strne	r1, [r3, #4]
 800d158:	6863      	ldr	r3, [r4, #4]
 800d15a:	bf08      	it	eq
 800d15c:	f8c8 1000 	streq.w	r1, [r8]
 800d160:	5162      	str	r2, [r4, r5]
 800d162:	604b      	str	r3, [r1, #4]
 800d164:	4630      	mov	r0, r6
 800d166:	f000 f82f 	bl	800d1c8 <__malloc_unlock>
 800d16a:	f104 000b 	add.w	r0, r4, #11
 800d16e:	1d23      	adds	r3, r4, #4
 800d170:	f020 0007 	bic.w	r0, r0, #7
 800d174:	1ac2      	subs	r2, r0, r3
 800d176:	bf1c      	itt	ne
 800d178:	1a1b      	subne	r3, r3, r0
 800d17a:	50a3      	strne	r3, [r4, r2]
 800d17c:	e7af      	b.n	800d0de <_malloc_r+0x22>
 800d17e:	6862      	ldr	r2, [r4, #4]
 800d180:	42a3      	cmp	r3, r4
 800d182:	bf0c      	ite	eq
 800d184:	f8c8 2000 	streq.w	r2, [r8]
 800d188:	605a      	strne	r2, [r3, #4]
 800d18a:	e7eb      	b.n	800d164 <_malloc_r+0xa8>
 800d18c:	4623      	mov	r3, r4
 800d18e:	6864      	ldr	r4, [r4, #4]
 800d190:	e7ae      	b.n	800d0f0 <_malloc_r+0x34>
 800d192:	463c      	mov	r4, r7
 800d194:	687f      	ldr	r7, [r7, #4]
 800d196:	e7b6      	b.n	800d106 <_malloc_r+0x4a>
 800d198:	461a      	mov	r2, r3
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	d1fb      	bne.n	800d198 <_malloc_r+0xdc>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	6053      	str	r3, [r2, #4]
 800d1a4:	e7de      	b.n	800d164 <_malloc_r+0xa8>
 800d1a6:	230c      	movs	r3, #12
 800d1a8:	6033      	str	r3, [r6, #0]
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f000 f80c 	bl	800d1c8 <__malloc_unlock>
 800d1b0:	e794      	b.n	800d0dc <_malloc_r+0x20>
 800d1b2:	6005      	str	r5, [r0, #0]
 800d1b4:	e7d6      	b.n	800d164 <_malloc_r+0xa8>
 800d1b6:	bf00      	nop
 800d1b8:	200006b8 	.word	0x200006b8

0800d1bc <__malloc_lock>:
 800d1bc:	4801      	ldr	r0, [pc, #4]	@ (800d1c4 <__malloc_lock+0x8>)
 800d1be:	f000 bb76 	b.w	800d8ae <__retarget_lock_acquire_recursive>
 800d1c2:	bf00      	nop
 800d1c4:	200007fc 	.word	0x200007fc

0800d1c8 <__malloc_unlock>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	@ (800d1d0 <__malloc_unlock+0x8>)
 800d1ca:	f000 bb71 	b.w	800d8b0 <__retarget_lock_release_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	200007fc 	.word	0x200007fc

0800d1d4 <__sflush_r>:
 800d1d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	0716      	lsls	r6, r2, #28
 800d1de:	4605      	mov	r5, r0
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	d454      	bmi.n	800d28e <__sflush_r+0xba>
 800d1e4:	684b      	ldr	r3, [r1, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	dc02      	bgt.n	800d1f0 <__sflush_r+0x1c>
 800d1ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	dd48      	ble.n	800d282 <__sflush_r+0xae>
 800d1f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1f2:	2e00      	cmp	r6, #0
 800d1f4:	d045      	beq.n	800d282 <__sflush_r+0xae>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1fc:	682f      	ldr	r7, [r5, #0]
 800d1fe:	6a21      	ldr	r1, [r4, #32]
 800d200:	602b      	str	r3, [r5, #0]
 800d202:	d030      	beq.n	800d266 <__sflush_r+0x92>
 800d204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	0759      	lsls	r1, r3, #29
 800d20a:	d505      	bpl.n	800d218 <__sflush_r+0x44>
 800d20c:	6863      	ldr	r3, [r4, #4]
 800d20e:	1ad2      	subs	r2, r2, r3
 800d210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d212:	b10b      	cbz	r3, 800d218 <__sflush_r+0x44>
 800d214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d216:	1ad2      	subs	r2, r2, r3
 800d218:	2300      	movs	r3, #0
 800d21a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d21c:	6a21      	ldr	r1, [r4, #32]
 800d21e:	4628      	mov	r0, r5
 800d220:	47b0      	blx	r6
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	d106      	bne.n	800d236 <__sflush_r+0x62>
 800d228:	6829      	ldr	r1, [r5, #0]
 800d22a:	291d      	cmp	r1, #29
 800d22c:	d82b      	bhi.n	800d286 <__sflush_r+0xb2>
 800d22e:	4a2a      	ldr	r2, [pc, #168]	@ (800d2d8 <__sflush_r+0x104>)
 800d230:	410a      	asrs	r2, r1
 800d232:	07d6      	lsls	r6, r2, #31
 800d234:	d427      	bmi.n	800d286 <__sflush_r+0xb2>
 800d236:	2200      	movs	r2, #0
 800d238:	6062      	str	r2, [r4, #4]
 800d23a:	04d9      	lsls	r1, r3, #19
 800d23c:	6922      	ldr	r2, [r4, #16]
 800d23e:	6022      	str	r2, [r4, #0]
 800d240:	d504      	bpl.n	800d24c <__sflush_r+0x78>
 800d242:	1c42      	adds	r2, r0, #1
 800d244:	d101      	bne.n	800d24a <__sflush_r+0x76>
 800d246:	682b      	ldr	r3, [r5, #0]
 800d248:	b903      	cbnz	r3, 800d24c <__sflush_r+0x78>
 800d24a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d24c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d24e:	602f      	str	r7, [r5, #0]
 800d250:	b1b9      	cbz	r1, 800d282 <__sflush_r+0xae>
 800d252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d256:	4299      	cmp	r1, r3
 800d258:	d002      	beq.n	800d260 <__sflush_r+0x8c>
 800d25a:	4628      	mov	r0, r5
 800d25c:	f000 fb38 	bl	800d8d0 <_free_r>
 800d260:	2300      	movs	r3, #0
 800d262:	6363      	str	r3, [r4, #52]	@ 0x34
 800d264:	e00d      	b.n	800d282 <__sflush_r+0xae>
 800d266:	2301      	movs	r3, #1
 800d268:	4628      	mov	r0, r5
 800d26a:	47b0      	blx	r6
 800d26c:	4602      	mov	r2, r0
 800d26e:	1c50      	adds	r0, r2, #1
 800d270:	d1c9      	bne.n	800d206 <__sflush_r+0x32>
 800d272:	682b      	ldr	r3, [r5, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d0c6      	beq.n	800d206 <__sflush_r+0x32>
 800d278:	2b1d      	cmp	r3, #29
 800d27a:	d001      	beq.n	800d280 <__sflush_r+0xac>
 800d27c:	2b16      	cmp	r3, #22
 800d27e:	d11e      	bne.n	800d2be <__sflush_r+0xea>
 800d280:	602f      	str	r7, [r5, #0]
 800d282:	2000      	movs	r0, #0
 800d284:	e022      	b.n	800d2cc <__sflush_r+0xf8>
 800d286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d28a:	b21b      	sxth	r3, r3
 800d28c:	e01b      	b.n	800d2c6 <__sflush_r+0xf2>
 800d28e:	690f      	ldr	r7, [r1, #16]
 800d290:	2f00      	cmp	r7, #0
 800d292:	d0f6      	beq.n	800d282 <__sflush_r+0xae>
 800d294:	0793      	lsls	r3, r2, #30
 800d296:	680e      	ldr	r6, [r1, #0]
 800d298:	bf08      	it	eq
 800d29a:	694b      	ldreq	r3, [r1, #20]
 800d29c:	600f      	str	r7, [r1, #0]
 800d29e:	bf18      	it	ne
 800d2a0:	2300      	movne	r3, #0
 800d2a2:	eba6 0807 	sub.w	r8, r6, r7
 800d2a6:	608b      	str	r3, [r1, #8]
 800d2a8:	f1b8 0f00 	cmp.w	r8, #0
 800d2ac:	dde9      	ble.n	800d282 <__sflush_r+0xae>
 800d2ae:	6a21      	ldr	r1, [r4, #32]
 800d2b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d2b2:	4643      	mov	r3, r8
 800d2b4:	463a      	mov	r2, r7
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	47b0      	blx	r6
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	dc08      	bgt.n	800d2d0 <__sflush_r+0xfc>
 800d2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2c6:	81a3      	strh	r3, [r4, #12]
 800d2c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d0:	4407      	add	r7, r0
 800d2d2:	eba8 0800 	sub.w	r8, r8, r0
 800d2d6:	e7e7      	b.n	800d2a8 <__sflush_r+0xd4>
 800d2d8:	dfbffffe 	.word	0xdfbffffe

0800d2dc <_fflush_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	690b      	ldr	r3, [r1, #16]
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	b913      	cbnz	r3, 800d2ec <_fflush_r+0x10>
 800d2e6:	2500      	movs	r5, #0
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	b118      	cbz	r0, 800d2f6 <_fflush_r+0x1a>
 800d2ee:	6a03      	ldr	r3, [r0, #32]
 800d2f0:	b90b      	cbnz	r3, 800d2f6 <_fflush_r+0x1a>
 800d2f2:	f000 f8bb 	bl	800d46c <__sinit>
 800d2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d0f3      	beq.n	800d2e6 <_fflush_r+0xa>
 800d2fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d300:	07d0      	lsls	r0, r2, #31
 800d302:	d404      	bmi.n	800d30e <_fflush_r+0x32>
 800d304:	0599      	lsls	r1, r3, #22
 800d306:	d402      	bmi.n	800d30e <_fflush_r+0x32>
 800d308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d30a:	f000 fad0 	bl	800d8ae <__retarget_lock_acquire_recursive>
 800d30e:	4628      	mov	r0, r5
 800d310:	4621      	mov	r1, r4
 800d312:	f7ff ff5f 	bl	800d1d4 <__sflush_r>
 800d316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d318:	07da      	lsls	r2, r3, #31
 800d31a:	4605      	mov	r5, r0
 800d31c:	d4e4      	bmi.n	800d2e8 <_fflush_r+0xc>
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	059b      	lsls	r3, r3, #22
 800d322:	d4e1      	bmi.n	800d2e8 <_fflush_r+0xc>
 800d324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d326:	f000 fac3 	bl	800d8b0 <__retarget_lock_release_recursive>
 800d32a:	e7dd      	b.n	800d2e8 <_fflush_r+0xc>

0800d32c <fflush>:
 800d32c:	4601      	mov	r1, r0
 800d32e:	b920      	cbnz	r0, 800d33a <fflush+0xe>
 800d330:	4a04      	ldr	r2, [pc, #16]	@ (800d344 <fflush+0x18>)
 800d332:	4905      	ldr	r1, [pc, #20]	@ (800d348 <fflush+0x1c>)
 800d334:	4805      	ldr	r0, [pc, #20]	@ (800d34c <fflush+0x20>)
 800d336:	f000 b8b1 	b.w	800d49c <_fwalk_sglue>
 800d33a:	4b05      	ldr	r3, [pc, #20]	@ (800d350 <fflush+0x24>)
 800d33c:	6818      	ldr	r0, [r3, #0]
 800d33e:	f7ff bfcd 	b.w	800d2dc <_fflush_r>
 800d342:	bf00      	nop
 800d344:	200003dc 	.word	0x200003dc
 800d348:	0800d2dd 	.word	0x0800d2dd
 800d34c:	200003ec 	.word	0x200003ec
 800d350:	200003e8 	.word	0x200003e8

0800d354 <std>:
 800d354:	2300      	movs	r3, #0
 800d356:	b510      	push	{r4, lr}
 800d358:	4604      	mov	r4, r0
 800d35a:	e9c0 3300 	strd	r3, r3, [r0]
 800d35e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d362:	6083      	str	r3, [r0, #8]
 800d364:	8181      	strh	r1, [r0, #12]
 800d366:	6643      	str	r3, [r0, #100]	@ 0x64
 800d368:	81c2      	strh	r2, [r0, #14]
 800d36a:	6183      	str	r3, [r0, #24]
 800d36c:	4619      	mov	r1, r3
 800d36e:	2208      	movs	r2, #8
 800d370:	305c      	adds	r0, #92	@ 0x5c
 800d372:	f000 fa13 	bl	800d79c <memset>
 800d376:	4b0d      	ldr	r3, [pc, #52]	@ (800d3ac <std+0x58>)
 800d378:	6263      	str	r3, [r4, #36]	@ 0x24
 800d37a:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b0 <std+0x5c>)
 800d37c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d37e:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b4 <std+0x60>)
 800d380:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d382:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b8 <std+0x64>)
 800d384:	6323      	str	r3, [r4, #48]	@ 0x30
 800d386:	4b0d      	ldr	r3, [pc, #52]	@ (800d3bc <std+0x68>)
 800d388:	6224      	str	r4, [r4, #32]
 800d38a:	429c      	cmp	r4, r3
 800d38c:	d006      	beq.n	800d39c <std+0x48>
 800d38e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d392:	4294      	cmp	r4, r2
 800d394:	d002      	beq.n	800d39c <std+0x48>
 800d396:	33d0      	adds	r3, #208	@ 0xd0
 800d398:	429c      	cmp	r4, r3
 800d39a:	d105      	bne.n	800d3a8 <std+0x54>
 800d39c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3a4:	f000 ba82 	b.w	800d8ac <__retarget_lock_init_recursive>
 800d3a8:	bd10      	pop	{r4, pc}
 800d3aa:	bf00      	nop
 800d3ac:	0800d5b9 	.word	0x0800d5b9
 800d3b0:	0800d5db 	.word	0x0800d5db
 800d3b4:	0800d613 	.word	0x0800d613
 800d3b8:	0800d637 	.word	0x0800d637
 800d3bc:	200006bc 	.word	0x200006bc

0800d3c0 <stdio_exit_handler>:
 800d3c0:	4a02      	ldr	r2, [pc, #8]	@ (800d3cc <stdio_exit_handler+0xc>)
 800d3c2:	4903      	ldr	r1, [pc, #12]	@ (800d3d0 <stdio_exit_handler+0x10>)
 800d3c4:	4803      	ldr	r0, [pc, #12]	@ (800d3d4 <stdio_exit_handler+0x14>)
 800d3c6:	f000 b869 	b.w	800d49c <_fwalk_sglue>
 800d3ca:	bf00      	nop
 800d3cc:	200003dc 	.word	0x200003dc
 800d3d0:	0800d2dd 	.word	0x0800d2dd
 800d3d4:	200003ec 	.word	0x200003ec

0800d3d8 <cleanup_stdio>:
 800d3d8:	6841      	ldr	r1, [r0, #4]
 800d3da:	4b0c      	ldr	r3, [pc, #48]	@ (800d40c <cleanup_stdio+0x34>)
 800d3dc:	4299      	cmp	r1, r3
 800d3de:	b510      	push	{r4, lr}
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	d001      	beq.n	800d3e8 <cleanup_stdio+0x10>
 800d3e4:	f7ff ff7a 	bl	800d2dc <_fflush_r>
 800d3e8:	68a1      	ldr	r1, [r4, #8]
 800d3ea:	4b09      	ldr	r3, [pc, #36]	@ (800d410 <cleanup_stdio+0x38>)
 800d3ec:	4299      	cmp	r1, r3
 800d3ee:	d002      	beq.n	800d3f6 <cleanup_stdio+0x1e>
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f7ff ff73 	bl	800d2dc <_fflush_r>
 800d3f6:	68e1      	ldr	r1, [r4, #12]
 800d3f8:	4b06      	ldr	r3, [pc, #24]	@ (800d414 <cleanup_stdio+0x3c>)
 800d3fa:	4299      	cmp	r1, r3
 800d3fc:	d004      	beq.n	800d408 <cleanup_stdio+0x30>
 800d3fe:	4620      	mov	r0, r4
 800d400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d404:	f7ff bf6a 	b.w	800d2dc <_fflush_r>
 800d408:	bd10      	pop	{r4, pc}
 800d40a:	bf00      	nop
 800d40c:	200006bc 	.word	0x200006bc
 800d410:	20000724 	.word	0x20000724
 800d414:	2000078c 	.word	0x2000078c

0800d418 <global_stdio_init.part.0>:
 800d418:	b510      	push	{r4, lr}
 800d41a:	4b0b      	ldr	r3, [pc, #44]	@ (800d448 <global_stdio_init.part.0+0x30>)
 800d41c:	4c0b      	ldr	r4, [pc, #44]	@ (800d44c <global_stdio_init.part.0+0x34>)
 800d41e:	4a0c      	ldr	r2, [pc, #48]	@ (800d450 <global_stdio_init.part.0+0x38>)
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	4620      	mov	r0, r4
 800d424:	2200      	movs	r2, #0
 800d426:	2104      	movs	r1, #4
 800d428:	f7ff ff94 	bl	800d354 <std>
 800d42c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d430:	2201      	movs	r2, #1
 800d432:	2109      	movs	r1, #9
 800d434:	f7ff ff8e 	bl	800d354 <std>
 800d438:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d43c:	2202      	movs	r2, #2
 800d43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d442:	2112      	movs	r1, #18
 800d444:	f7ff bf86 	b.w	800d354 <std>
 800d448:	200007f4 	.word	0x200007f4
 800d44c:	200006bc 	.word	0x200006bc
 800d450:	0800d3c1 	.word	0x0800d3c1

0800d454 <__sfp_lock_acquire>:
 800d454:	4801      	ldr	r0, [pc, #4]	@ (800d45c <__sfp_lock_acquire+0x8>)
 800d456:	f000 ba2a 	b.w	800d8ae <__retarget_lock_acquire_recursive>
 800d45a:	bf00      	nop
 800d45c:	200007fd 	.word	0x200007fd

0800d460 <__sfp_lock_release>:
 800d460:	4801      	ldr	r0, [pc, #4]	@ (800d468 <__sfp_lock_release+0x8>)
 800d462:	f000 ba25 	b.w	800d8b0 <__retarget_lock_release_recursive>
 800d466:	bf00      	nop
 800d468:	200007fd 	.word	0x200007fd

0800d46c <__sinit>:
 800d46c:	b510      	push	{r4, lr}
 800d46e:	4604      	mov	r4, r0
 800d470:	f7ff fff0 	bl	800d454 <__sfp_lock_acquire>
 800d474:	6a23      	ldr	r3, [r4, #32]
 800d476:	b11b      	cbz	r3, 800d480 <__sinit+0x14>
 800d478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d47c:	f7ff bff0 	b.w	800d460 <__sfp_lock_release>
 800d480:	4b04      	ldr	r3, [pc, #16]	@ (800d494 <__sinit+0x28>)
 800d482:	6223      	str	r3, [r4, #32]
 800d484:	4b04      	ldr	r3, [pc, #16]	@ (800d498 <__sinit+0x2c>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1f5      	bne.n	800d478 <__sinit+0xc>
 800d48c:	f7ff ffc4 	bl	800d418 <global_stdio_init.part.0>
 800d490:	e7f2      	b.n	800d478 <__sinit+0xc>
 800d492:	bf00      	nop
 800d494:	0800d3d9 	.word	0x0800d3d9
 800d498:	200007f4 	.word	0x200007f4

0800d49c <_fwalk_sglue>:
 800d49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a0:	4607      	mov	r7, r0
 800d4a2:	4688      	mov	r8, r1
 800d4a4:	4614      	mov	r4, r2
 800d4a6:	2600      	movs	r6, #0
 800d4a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4ac:	f1b9 0901 	subs.w	r9, r9, #1
 800d4b0:	d505      	bpl.n	800d4be <_fwalk_sglue+0x22>
 800d4b2:	6824      	ldr	r4, [r4, #0]
 800d4b4:	2c00      	cmp	r4, #0
 800d4b6:	d1f7      	bne.n	800d4a8 <_fwalk_sglue+0xc>
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4be:	89ab      	ldrh	r3, [r5, #12]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d907      	bls.n	800d4d4 <_fwalk_sglue+0x38>
 800d4c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	d003      	beq.n	800d4d4 <_fwalk_sglue+0x38>
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	47c0      	blx	r8
 800d4d2:	4306      	orrs	r6, r0
 800d4d4:	3568      	adds	r5, #104	@ 0x68
 800d4d6:	e7e9      	b.n	800d4ac <_fwalk_sglue+0x10>

0800d4d8 <iprintf>:
 800d4d8:	b40f      	push	{r0, r1, r2, r3}
 800d4da:	b507      	push	{r0, r1, r2, lr}
 800d4dc:	4906      	ldr	r1, [pc, #24]	@ (800d4f8 <iprintf+0x20>)
 800d4de:	ab04      	add	r3, sp, #16
 800d4e0:	6808      	ldr	r0, [r1, #0]
 800d4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e6:	6881      	ldr	r1, [r0, #8]
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	f000 fa65 	bl	800d9b8 <_vfiprintf_r>
 800d4ee:	b003      	add	sp, #12
 800d4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4f4:	b004      	add	sp, #16
 800d4f6:	4770      	bx	lr
 800d4f8:	200003e8 	.word	0x200003e8

0800d4fc <_puts_r>:
 800d4fc:	6a03      	ldr	r3, [r0, #32]
 800d4fe:	b570      	push	{r4, r5, r6, lr}
 800d500:	6884      	ldr	r4, [r0, #8]
 800d502:	4605      	mov	r5, r0
 800d504:	460e      	mov	r6, r1
 800d506:	b90b      	cbnz	r3, 800d50c <_puts_r+0x10>
 800d508:	f7ff ffb0 	bl	800d46c <__sinit>
 800d50c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d50e:	07db      	lsls	r3, r3, #31
 800d510:	d405      	bmi.n	800d51e <_puts_r+0x22>
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	0598      	lsls	r0, r3, #22
 800d516:	d402      	bmi.n	800d51e <_puts_r+0x22>
 800d518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d51a:	f000 f9c8 	bl	800d8ae <__retarget_lock_acquire_recursive>
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	0719      	lsls	r1, r3, #28
 800d522:	d502      	bpl.n	800d52a <_puts_r+0x2e>
 800d524:	6923      	ldr	r3, [r4, #16]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d135      	bne.n	800d596 <_puts_r+0x9a>
 800d52a:	4621      	mov	r1, r4
 800d52c:	4628      	mov	r0, r5
 800d52e:	f000 f8c5 	bl	800d6bc <__swsetup_r>
 800d532:	b380      	cbz	r0, 800d596 <_puts_r+0x9a>
 800d534:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d538:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d53a:	07da      	lsls	r2, r3, #31
 800d53c:	d405      	bmi.n	800d54a <_puts_r+0x4e>
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	059b      	lsls	r3, r3, #22
 800d542:	d402      	bmi.n	800d54a <_puts_r+0x4e>
 800d544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d546:	f000 f9b3 	bl	800d8b0 <__retarget_lock_release_recursive>
 800d54a:	4628      	mov	r0, r5
 800d54c:	bd70      	pop	{r4, r5, r6, pc}
 800d54e:	2b00      	cmp	r3, #0
 800d550:	da04      	bge.n	800d55c <_puts_r+0x60>
 800d552:	69a2      	ldr	r2, [r4, #24]
 800d554:	429a      	cmp	r2, r3
 800d556:	dc17      	bgt.n	800d588 <_puts_r+0x8c>
 800d558:	290a      	cmp	r1, #10
 800d55a:	d015      	beq.n	800d588 <_puts_r+0x8c>
 800d55c:	6823      	ldr	r3, [r4, #0]
 800d55e:	1c5a      	adds	r2, r3, #1
 800d560:	6022      	str	r2, [r4, #0]
 800d562:	7019      	strb	r1, [r3, #0]
 800d564:	68a3      	ldr	r3, [r4, #8]
 800d566:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d56a:	3b01      	subs	r3, #1
 800d56c:	60a3      	str	r3, [r4, #8]
 800d56e:	2900      	cmp	r1, #0
 800d570:	d1ed      	bne.n	800d54e <_puts_r+0x52>
 800d572:	2b00      	cmp	r3, #0
 800d574:	da11      	bge.n	800d59a <_puts_r+0x9e>
 800d576:	4622      	mov	r2, r4
 800d578:	210a      	movs	r1, #10
 800d57a:	4628      	mov	r0, r5
 800d57c:	f000 f85f 	bl	800d63e <__swbuf_r>
 800d580:	3001      	adds	r0, #1
 800d582:	d0d7      	beq.n	800d534 <_puts_r+0x38>
 800d584:	250a      	movs	r5, #10
 800d586:	e7d7      	b.n	800d538 <_puts_r+0x3c>
 800d588:	4622      	mov	r2, r4
 800d58a:	4628      	mov	r0, r5
 800d58c:	f000 f857 	bl	800d63e <__swbuf_r>
 800d590:	3001      	adds	r0, #1
 800d592:	d1e7      	bne.n	800d564 <_puts_r+0x68>
 800d594:	e7ce      	b.n	800d534 <_puts_r+0x38>
 800d596:	3e01      	subs	r6, #1
 800d598:	e7e4      	b.n	800d564 <_puts_r+0x68>
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	6022      	str	r2, [r4, #0]
 800d5a0:	220a      	movs	r2, #10
 800d5a2:	701a      	strb	r2, [r3, #0]
 800d5a4:	e7ee      	b.n	800d584 <_puts_r+0x88>
	...

0800d5a8 <puts>:
 800d5a8:	4b02      	ldr	r3, [pc, #8]	@ (800d5b4 <puts+0xc>)
 800d5aa:	4601      	mov	r1, r0
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	f7ff bfa5 	b.w	800d4fc <_puts_r>
 800d5b2:	bf00      	nop
 800d5b4:	200003e8 	.word	0x200003e8

0800d5b8 <__sread>:
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c0:	f000 f916 	bl	800d7f0 <_read_r>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	bfab      	itete	ge
 800d5c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d5ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d5cc:	181b      	addge	r3, r3, r0
 800d5ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5d2:	bfac      	ite	ge
 800d5d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5d6:	81a3      	strhlt	r3, [r4, #12]
 800d5d8:	bd10      	pop	{r4, pc}

0800d5da <__swrite>:
 800d5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5de:	461f      	mov	r7, r3
 800d5e0:	898b      	ldrh	r3, [r1, #12]
 800d5e2:	05db      	lsls	r3, r3, #23
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	460c      	mov	r4, r1
 800d5e8:	4616      	mov	r6, r2
 800d5ea:	d505      	bpl.n	800d5f8 <__swrite+0x1e>
 800d5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f0:	2302      	movs	r3, #2
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f000 f8ea 	bl	800d7cc <_lseek_r>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d602:	81a3      	strh	r3, [r4, #12]
 800d604:	4632      	mov	r2, r6
 800d606:	463b      	mov	r3, r7
 800d608:	4628      	mov	r0, r5
 800d60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d60e:	f000 b911 	b.w	800d834 <_write_r>

0800d612 <__sseek>:
 800d612:	b510      	push	{r4, lr}
 800d614:	460c      	mov	r4, r1
 800d616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d61a:	f000 f8d7 	bl	800d7cc <_lseek_r>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	89a3      	ldrh	r3, [r4, #12]
 800d622:	bf15      	itete	ne
 800d624:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d626:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d62a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d62e:	81a3      	strheq	r3, [r4, #12]
 800d630:	bf18      	it	ne
 800d632:	81a3      	strhne	r3, [r4, #12]
 800d634:	bd10      	pop	{r4, pc}

0800d636 <__sclose>:
 800d636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d63a:	f000 b8b7 	b.w	800d7ac <_close_r>

0800d63e <__swbuf_r>:
 800d63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d640:	460e      	mov	r6, r1
 800d642:	4614      	mov	r4, r2
 800d644:	4605      	mov	r5, r0
 800d646:	b118      	cbz	r0, 800d650 <__swbuf_r+0x12>
 800d648:	6a03      	ldr	r3, [r0, #32]
 800d64a:	b90b      	cbnz	r3, 800d650 <__swbuf_r+0x12>
 800d64c:	f7ff ff0e 	bl	800d46c <__sinit>
 800d650:	69a3      	ldr	r3, [r4, #24]
 800d652:	60a3      	str	r3, [r4, #8]
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	071a      	lsls	r2, r3, #28
 800d658:	d501      	bpl.n	800d65e <__swbuf_r+0x20>
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	b943      	cbnz	r3, 800d670 <__swbuf_r+0x32>
 800d65e:	4621      	mov	r1, r4
 800d660:	4628      	mov	r0, r5
 800d662:	f000 f82b 	bl	800d6bc <__swsetup_r>
 800d666:	b118      	cbz	r0, 800d670 <__swbuf_r+0x32>
 800d668:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d66c:	4638      	mov	r0, r7
 800d66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d670:	6823      	ldr	r3, [r4, #0]
 800d672:	6922      	ldr	r2, [r4, #16]
 800d674:	1a98      	subs	r0, r3, r2
 800d676:	6963      	ldr	r3, [r4, #20]
 800d678:	b2f6      	uxtb	r6, r6
 800d67a:	4283      	cmp	r3, r0
 800d67c:	4637      	mov	r7, r6
 800d67e:	dc05      	bgt.n	800d68c <__swbuf_r+0x4e>
 800d680:	4621      	mov	r1, r4
 800d682:	4628      	mov	r0, r5
 800d684:	f7ff fe2a 	bl	800d2dc <_fflush_r>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d1ed      	bne.n	800d668 <__swbuf_r+0x2a>
 800d68c:	68a3      	ldr	r3, [r4, #8]
 800d68e:	3b01      	subs	r3, #1
 800d690:	60a3      	str	r3, [r4, #8]
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	6022      	str	r2, [r4, #0]
 800d698:	701e      	strb	r6, [r3, #0]
 800d69a:	6962      	ldr	r2, [r4, #20]
 800d69c:	1c43      	adds	r3, r0, #1
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d004      	beq.n	800d6ac <__swbuf_r+0x6e>
 800d6a2:	89a3      	ldrh	r3, [r4, #12]
 800d6a4:	07db      	lsls	r3, r3, #31
 800d6a6:	d5e1      	bpl.n	800d66c <__swbuf_r+0x2e>
 800d6a8:	2e0a      	cmp	r6, #10
 800d6aa:	d1df      	bne.n	800d66c <__swbuf_r+0x2e>
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f7ff fe14 	bl	800d2dc <_fflush_r>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d0d9      	beq.n	800d66c <__swbuf_r+0x2e>
 800d6b8:	e7d6      	b.n	800d668 <__swbuf_r+0x2a>
	...

0800d6bc <__swsetup_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4b29      	ldr	r3, [pc, #164]	@ (800d764 <__swsetup_r+0xa8>)
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	b118      	cbz	r0, 800d6d0 <__swsetup_r+0x14>
 800d6c8:	6a03      	ldr	r3, [r0, #32]
 800d6ca:	b90b      	cbnz	r3, 800d6d0 <__swsetup_r+0x14>
 800d6cc:	f7ff fece 	bl	800d46c <__sinit>
 800d6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6d4:	0719      	lsls	r1, r3, #28
 800d6d6:	d422      	bmi.n	800d71e <__swsetup_r+0x62>
 800d6d8:	06da      	lsls	r2, r3, #27
 800d6da:	d407      	bmi.n	800d6ec <__swsetup_r+0x30>
 800d6dc:	2209      	movs	r2, #9
 800d6de:	602a      	str	r2, [r5, #0]
 800d6e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6e4:	81a3      	strh	r3, [r4, #12]
 800d6e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6ea:	e033      	b.n	800d754 <__swsetup_r+0x98>
 800d6ec:	0758      	lsls	r0, r3, #29
 800d6ee:	d512      	bpl.n	800d716 <__swsetup_r+0x5a>
 800d6f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6f2:	b141      	cbz	r1, 800d706 <__swsetup_r+0x4a>
 800d6f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6f8:	4299      	cmp	r1, r3
 800d6fa:	d002      	beq.n	800d702 <__swsetup_r+0x46>
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	f000 f8e7 	bl	800d8d0 <_free_r>
 800d702:	2300      	movs	r3, #0
 800d704:	6363      	str	r3, [r4, #52]	@ 0x34
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d70c:	81a3      	strh	r3, [r4, #12]
 800d70e:	2300      	movs	r3, #0
 800d710:	6063      	str	r3, [r4, #4]
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	89a3      	ldrh	r3, [r4, #12]
 800d718:	f043 0308 	orr.w	r3, r3, #8
 800d71c:	81a3      	strh	r3, [r4, #12]
 800d71e:	6923      	ldr	r3, [r4, #16]
 800d720:	b94b      	cbnz	r3, 800d736 <__swsetup_r+0x7a>
 800d722:	89a3      	ldrh	r3, [r4, #12]
 800d724:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d72c:	d003      	beq.n	800d736 <__swsetup_r+0x7a>
 800d72e:	4621      	mov	r1, r4
 800d730:	4628      	mov	r0, r5
 800d732:	f000 fc0d 	bl	800df50 <__smakebuf_r>
 800d736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d73a:	f013 0201 	ands.w	r2, r3, #1
 800d73e:	d00a      	beq.n	800d756 <__swsetup_r+0x9a>
 800d740:	2200      	movs	r2, #0
 800d742:	60a2      	str	r2, [r4, #8]
 800d744:	6962      	ldr	r2, [r4, #20]
 800d746:	4252      	negs	r2, r2
 800d748:	61a2      	str	r2, [r4, #24]
 800d74a:	6922      	ldr	r2, [r4, #16]
 800d74c:	b942      	cbnz	r2, 800d760 <__swsetup_r+0xa4>
 800d74e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d752:	d1c5      	bne.n	800d6e0 <__swsetup_r+0x24>
 800d754:	bd38      	pop	{r3, r4, r5, pc}
 800d756:	0799      	lsls	r1, r3, #30
 800d758:	bf58      	it	pl
 800d75a:	6962      	ldrpl	r2, [r4, #20]
 800d75c:	60a2      	str	r2, [r4, #8]
 800d75e:	e7f4      	b.n	800d74a <__swsetup_r+0x8e>
 800d760:	2000      	movs	r0, #0
 800d762:	e7f7      	b.n	800d754 <__swsetup_r+0x98>
 800d764:	200003e8 	.word	0x200003e8

0800d768 <memmove>:
 800d768:	4288      	cmp	r0, r1
 800d76a:	b510      	push	{r4, lr}
 800d76c:	eb01 0402 	add.w	r4, r1, r2
 800d770:	d902      	bls.n	800d778 <memmove+0x10>
 800d772:	4284      	cmp	r4, r0
 800d774:	4623      	mov	r3, r4
 800d776:	d807      	bhi.n	800d788 <memmove+0x20>
 800d778:	1e43      	subs	r3, r0, #1
 800d77a:	42a1      	cmp	r1, r4
 800d77c:	d008      	beq.n	800d790 <memmove+0x28>
 800d77e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d782:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d786:	e7f8      	b.n	800d77a <memmove+0x12>
 800d788:	4402      	add	r2, r0
 800d78a:	4601      	mov	r1, r0
 800d78c:	428a      	cmp	r2, r1
 800d78e:	d100      	bne.n	800d792 <memmove+0x2a>
 800d790:	bd10      	pop	{r4, pc}
 800d792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d79a:	e7f7      	b.n	800d78c <memmove+0x24>

0800d79c <memset>:
 800d79c:	4402      	add	r2, r0
 800d79e:	4603      	mov	r3, r0
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d100      	bne.n	800d7a6 <memset+0xa>
 800d7a4:	4770      	bx	lr
 800d7a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7aa:	e7f9      	b.n	800d7a0 <memset+0x4>

0800d7ac <_close_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	4d06      	ldr	r5, [pc, #24]	@ (800d7c8 <_close_r+0x1c>)
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	602b      	str	r3, [r5, #0]
 800d7b8:	f7fa fd7d 	bl	80082b6 <_close>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	d102      	bne.n	800d7c6 <_close_r+0x1a>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	b103      	cbz	r3, 800d7c6 <_close_r+0x1a>
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	bd38      	pop	{r3, r4, r5, pc}
 800d7c8:	200007f8 	.word	0x200007f8

0800d7cc <_lseek_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4d07      	ldr	r5, [pc, #28]	@ (800d7ec <_lseek_r+0x20>)
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	4608      	mov	r0, r1
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	602a      	str	r2, [r5, #0]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f7fa fd92 	bl	8008304 <_lseek>
 800d7e0:	1c43      	adds	r3, r0, #1
 800d7e2:	d102      	bne.n	800d7ea <_lseek_r+0x1e>
 800d7e4:	682b      	ldr	r3, [r5, #0]
 800d7e6:	b103      	cbz	r3, 800d7ea <_lseek_r+0x1e>
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	bd38      	pop	{r3, r4, r5, pc}
 800d7ec:	200007f8 	.word	0x200007f8

0800d7f0 <_read_r>:
 800d7f0:	b538      	push	{r3, r4, r5, lr}
 800d7f2:	4d07      	ldr	r5, [pc, #28]	@ (800d810 <_read_r+0x20>)
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	4608      	mov	r0, r1
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	602a      	str	r2, [r5, #0]
 800d7fe:	461a      	mov	r2, r3
 800d800:	f7fa fd20 	bl	8008244 <_read>
 800d804:	1c43      	adds	r3, r0, #1
 800d806:	d102      	bne.n	800d80e <_read_r+0x1e>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	b103      	cbz	r3, 800d80e <_read_r+0x1e>
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	bd38      	pop	{r3, r4, r5, pc}
 800d810:	200007f8 	.word	0x200007f8

0800d814 <_sbrk_r>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	4d06      	ldr	r5, [pc, #24]	@ (800d830 <_sbrk_r+0x1c>)
 800d818:	2300      	movs	r3, #0
 800d81a:	4604      	mov	r4, r0
 800d81c:	4608      	mov	r0, r1
 800d81e:	602b      	str	r3, [r5, #0]
 800d820:	f7fa fd7e 	bl	8008320 <_sbrk>
 800d824:	1c43      	adds	r3, r0, #1
 800d826:	d102      	bne.n	800d82e <_sbrk_r+0x1a>
 800d828:	682b      	ldr	r3, [r5, #0]
 800d82a:	b103      	cbz	r3, 800d82e <_sbrk_r+0x1a>
 800d82c:	6023      	str	r3, [r4, #0]
 800d82e:	bd38      	pop	{r3, r4, r5, pc}
 800d830:	200007f8 	.word	0x200007f8

0800d834 <_write_r>:
 800d834:	b538      	push	{r3, r4, r5, lr}
 800d836:	4d07      	ldr	r5, [pc, #28]	@ (800d854 <_write_r+0x20>)
 800d838:	4604      	mov	r4, r0
 800d83a:	4608      	mov	r0, r1
 800d83c:	4611      	mov	r1, r2
 800d83e:	2200      	movs	r2, #0
 800d840:	602a      	str	r2, [r5, #0]
 800d842:	461a      	mov	r2, r3
 800d844:	f7fa fd1b 	bl	800827e <_write>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d102      	bne.n	800d852 <_write_r+0x1e>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	b103      	cbz	r3, 800d852 <_write_r+0x1e>
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	200007f8 	.word	0x200007f8

0800d858 <__errno>:
 800d858:	4b01      	ldr	r3, [pc, #4]	@ (800d860 <__errno+0x8>)
 800d85a:	6818      	ldr	r0, [r3, #0]
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	200003e8 	.word	0x200003e8

0800d864 <__libc_init_array>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	4d0d      	ldr	r5, [pc, #52]	@ (800d89c <__libc_init_array+0x38>)
 800d868:	4c0d      	ldr	r4, [pc, #52]	@ (800d8a0 <__libc_init_array+0x3c>)
 800d86a:	1b64      	subs	r4, r4, r5
 800d86c:	10a4      	asrs	r4, r4, #2
 800d86e:	2600      	movs	r6, #0
 800d870:	42a6      	cmp	r6, r4
 800d872:	d109      	bne.n	800d888 <__libc_init_array+0x24>
 800d874:	4d0b      	ldr	r5, [pc, #44]	@ (800d8a4 <__libc_init_array+0x40>)
 800d876:	4c0c      	ldr	r4, [pc, #48]	@ (800d8a8 <__libc_init_array+0x44>)
 800d878:	f000 fbc8 	bl	800e00c <_init>
 800d87c:	1b64      	subs	r4, r4, r5
 800d87e:	10a4      	asrs	r4, r4, #2
 800d880:	2600      	movs	r6, #0
 800d882:	42a6      	cmp	r6, r4
 800d884:	d105      	bne.n	800d892 <__libc_init_array+0x2e>
 800d886:	bd70      	pop	{r4, r5, r6, pc}
 800d888:	f855 3b04 	ldr.w	r3, [r5], #4
 800d88c:	4798      	blx	r3
 800d88e:	3601      	adds	r6, #1
 800d890:	e7ee      	b.n	800d870 <__libc_init_array+0xc>
 800d892:	f855 3b04 	ldr.w	r3, [r5], #4
 800d896:	4798      	blx	r3
 800d898:	3601      	adds	r6, #1
 800d89a:	e7f2      	b.n	800d882 <__libc_init_array+0x1e>
 800d89c:	0800e994 	.word	0x0800e994
 800d8a0:	0800e994 	.word	0x0800e994
 800d8a4:	0800e994 	.word	0x0800e994
 800d8a8:	0800e998 	.word	0x0800e998

0800d8ac <__retarget_lock_init_recursive>:
 800d8ac:	4770      	bx	lr

0800d8ae <__retarget_lock_acquire_recursive>:
 800d8ae:	4770      	bx	lr

0800d8b0 <__retarget_lock_release_recursive>:
 800d8b0:	4770      	bx	lr

0800d8b2 <memcpy>:
 800d8b2:	440a      	add	r2, r1
 800d8b4:	4291      	cmp	r1, r2
 800d8b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d8ba:	d100      	bne.n	800d8be <memcpy+0xc>
 800d8bc:	4770      	bx	lr
 800d8be:	b510      	push	{r4, lr}
 800d8c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8c8:	4291      	cmp	r1, r2
 800d8ca:	d1f9      	bne.n	800d8c0 <memcpy+0xe>
 800d8cc:	bd10      	pop	{r4, pc}
	...

0800d8d0 <_free_r>:
 800d8d0:	b538      	push	{r3, r4, r5, lr}
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	2900      	cmp	r1, #0
 800d8d6:	d041      	beq.n	800d95c <_free_r+0x8c>
 800d8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8dc:	1f0c      	subs	r4, r1, #4
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bfb8      	it	lt
 800d8e2:	18e4      	addlt	r4, r4, r3
 800d8e4:	f7ff fc6a 	bl	800d1bc <__malloc_lock>
 800d8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d960 <_free_r+0x90>)
 800d8ea:	6813      	ldr	r3, [r2, #0]
 800d8ec:	b933      	cbnz	r3, 800d8fc <_free_r+0x2c>
 800d8ee:	6063      	str	r3, [r4, #4]
 800d8f0:	6014      	str	r4, [r2, #0]
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8f8:	f7ff bc66 	b.w	800d1c8 <__malloc_unlock>
 800d8fc:	42a3      	cmp	r3, r4
 800d8fe:	d908      	bls.n	800d912 <_free_r+0x42>
 800d900:	6820      	ldr	r0, [r4, #0]
 800d902:	1821      	adds	r1, r4, r0
 800d904:	428b      	cmp	r3, r1
 800d906:	bf01      	itttt	eq
 800d908:	6819      	ldreq	r1, [r3, #0]
 800d90a:	685b      	ldreq	r3, [r3, #4]
 800d90c:	1809      	addeq	r1, r1, r0
 800d90e:	6021      	streq	r1, [r4, #0]
 800d910:	e7ed      	b.n	800d8ee <_free_r+0x1e>
 800d912:	461a      	mov	r2, r3
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	b10b      	cbz	r3, 800d91c <_free_r+0x4c>
 800d918:	42a3      	cmp	r3, r4
 800d91a:	d9fa      	bls.n	800d912 <_free_r+0x42>
 800d91c:	6811      	ldr	r1, [r2, #0]
 800d91e:	1850      	adds	r0, r2, r1
 800d920:	42a0      	cmp	r0, r4
 800d922:	d10b      	bne.n	800d93c <_free_r+0x6c>
 800d924:	6820      	ldr	r0, [r4, #0]
 800d926:	4401      	add	r1, r0
 800d928:	1850      	adds	r0, r2, r1
 800d92a:	4283      	cmp	r3, r0
 800d92c:	6011      	str	r1, [r2, #0]
 800d92e:	d1e0      	bne.n	800d8f2 <_free_r+0x22>
 800d930:	6818      	ldr	r0, [r3, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	6053      	str	r3, [r2, #4]
 800d936:	4408      	add	r0, r1
 800d938:	6010      	str	r0, [r2, #0]
 800d93a:	e7da      	b.n	800d8f2 <_free_r+0x22>
 800d93c:	d902      	bls.n	800d944 <_free_r+0x74>
 800d93e:	230c      	movs	r3, #12
 800d940:	602b      	str	r3, [r5, #0]
 800d942:	e7d6      	b.n	800d8f2 <_free_r+0x22>
 800d944:	6820      	ldr	r0, [r4, #0]
 800d946:	1821      	adds	r1, r4, r0
 800d948:	428b      	cmp	r3, r1
 800d94a:	bf04      	itt	eq
 800d94c:	6819      	ldreq	r1, [r3, #0]
 800d94e:	685b      	ldreq	r3, [r3, #4]
 800d950:	6063      	str	r3, [r4, #4]
 800d952:	bf04      	itt	eq
 800d954:	1809      	addeq	r1, r1, r0
 800d956:	6021      	streq	r1, [r4, #0]
 800d958:	6054      	str	r4, [r2, #4]
 800d95a:	e7ca      	b.n	800d8f2 <_free_r+0x22>
 800d95c:	bd38      	pop	{r3, r4, r5, pc}
 800d95e:	bf00      	nop
 800d960:	200006b8 	.word	0x200006b8

0800d964 <__sfputc_r>:
 800d964:	6893      	ldr	r3, [r2, #8]
 800d966:	3b01      	subs	r3, #1
 800d968:	2b00      	cmp	r3, #0
 800d96a:	b410      	push	{r4}
 800d96c:	6093      	str	r3, [r2, #8]
 800d96e:	da08      	bge.n	800d982 <__sfputc_r+0x1e>
 800d970:	6994      	ldr	r4, [r2, #24]
 800d972:	42a3      	cmp	r3, r4
 800d974:	db01      	blt.n	800d97a <__sfputc_r+0x16>
 800d976:	290a      	cmp	r1, #10
 800d978:	d103      	bne.n	800d982 <__sfputc_r+0x1e>
 800d97a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d97e:	f7ff be5e 	b.w	800d63e <__swbuf_r>
 800d982:	6813      	ldr	r3, [r2, #0]
 800d984:	1c58      	adds	r0, r3, #1
 800d986:	6010      	str	r0, [r2, #0]
 800d988:	7019      	strb	r1, [r3, #0]
 800d98a:	4608      	mov	r0, r1
 800d98c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <__sfputs_r>:
 800d992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d994:	4606      	mov	r6, r0
 800d996:	460f      	mov	r7, r1
 800d998:	4614      	mov	r4, r2
 800d99a:	18d5      	adds	r5, r2, r3
 800d99c:	42ac      	cmp	r4, r5
 800d99e:	d101      	bne.n	800d9a4 <__sfputs_r+0x12>
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	e007      	b.n	800d9b4 <__sfputs_r+0x22>
 800d9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a8:	463a      	mov	r2, r7
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	f7ff ffda 	bl	800d964 <__sfputc_r>
 800d9b0:	1c43      	adds	r3, r0, #1
 800d9b2:	d1f3      	bne.n	800d99c <__sfputs_r+0xa>
 800d9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9b8 <_vfiprintf_r>:
 800d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9bc:	460d      	mov	r5, r1
 800d9be:	b09d      	sub	sp, #116	@ 0x74
 800d9c0:	4614      	mov	r4, r2
 800d9c2:	4698      	mov	r8, r3
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	b118      	cbz	r0, 800d9d0 <_vfiprintf_r+0x18>
 800d9c8:	6a03      	ldr	r3, [r0, #32]
 800d9ca:	b90b      	cbnz	r3, 800d9d0 <_vfiprintf_r+0x18>
 800d9cc:	f7ff fd4e 	bl	800d46c <__sinit>
 800d9d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9d2:	07d9      	lsls	r1, r3, #31
 800d9d4:	d405      	bmi.n	800d9e2 <_vfiprintf_r+0x2a>
 800d9d6:	89ab      	ldrh	r3, [r5, #12]
 800d9d8:	059a      	lsls	r2, r3, #22
 800d9da:	d402      	bmi.n	800d9e2 <_vfiprintf_r+0x2a>
 800d9dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9de:	f7ff ff66 	bl	800d8ae <__retarget_lock_acquire_recursive>
 800d9e2:	89ab      	ldrh	r3, [r5, #12]
 800d9e4:	071b      	lsls	r3, r3, #28
 800d9e6:	d501      	bpl.n	800d9ec <_vfiprintf_r+0x34>
 800d9e8:	692b      	ldr	r3, [r5, #16]
 800d9ea:	b99b      	cbnz	r3, 800da14 <_vfiprintf_r+0x5c>
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7ff fe64 	bl	800d6bc <__swsetup_r>
 800d9f4:	b170      	cbz	r0, 800da14 <_vfiprintf_r+0x5c>
 800d9f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9f8:	07dc      	lsls	r4, r3, #31
 800d9fa:	d504      	bpl.n	800da06 <_vfiprintf_r+0x4e>
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da00:	b01d      	add	sp, #116	@ 0x74
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	89ab      	ldrh	r3, [r5, #12]
 800da08:	0598      	lsls	r0, r3, #22
 800da0a:	d4f7      	bmi.n	800d9fc <_vfiprintf_r+0x44>
 800da0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da0e:	f7ff ff4f 	bl	800d8b0 <__retarget_lock_release_recursive>
 800da12:	e7f3      	b.n	800d9fc <_vfiprintf_r+0x44>
 800da14:	2300      	movs	r3, #0
 800da16:	9309      	str	r3, [sp, #36]	@ 0x24
 800da18:	2320      	movs	r3, #32
 800da1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da22:	2330      	movs	r3, #48	@ 0x30
 800da24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dbd4 <_vfiprintf_r+0x21c>
 800da28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da2c:	f04f 0901 	mov.w	r9, #1
 800da30:	4623      	mov	r3, r4
 800da32:	469a      	mov	sl, r3
 800da34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da38:	b10a      	cbz	r2, 800da3e <_vfiprintf_r+0x86>
 800da3a:	2a25      	cmp	r2, #37	@ 0x25
 800da3c:	d1f9      	bne.n	800da32 <_vfiprintf_r+0x7a>
 800da3e:	ebba 0b04 	subs.w	fp, sl, r4
 800da42:	d00b      	beq.n	800da5c <_vfiprintf_r+0xa4>
 800da44:	465b      	mov	r3, fp
 800da46:	4622      	mov	r2, r4
 800da48:	4629      	mov	r1, r5
 800da4a:	4630      	mov	r0, r6
 800da4c:	f7ff ffa1 	bl	800d992 <__sfputs_r>
 800da50:	3001      	adds	r0, #1
 800da52:	f000 80a7 	beq.w	800dba4 <_vfiprintf_r+0x1ec>
 800da56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da58:	445a      	add	r2, fp
 800da5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800da5c:	f89a 3000 	ldrb.w	r3, [sl]
 800da60:	2b00      	cmp	r3, #0
 800da62:	f000 809f 	beq.w	800dba4 <_vfiprintf_r+0x1ec>
 800da66:	2300      	movs	r3, #0
 800da68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da70:	f10a 0a01 	add.w	sl, sl, #1
 800da74:	9304      	str	r3, [sp, #16]
 800da76:	9307      	str	r3, [sp, #28]
 800da78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800da7e:	4654      	mov	r4, sl
 800da80:	2205      	movs	r2, #5
 800da82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da86:	4853      	ldr	r0, [pc, #332]	@ (800dbd4 <_vfiprintf_r+0x21c>)
 800da88:	f7f2 fbd2 	bl	8000230 <memchr>
 800da8c:	9a04      	ldr	r2, [sp, #16]
 800da8e:	b9d8      	cbnz	r0, 800dac8 <_vfiprintf_r+0x110>
 800da90:	06d1      	lsls	r1, r2, #27
 800da92:	bf44      	itt	mi
 800da94:	2320      	movmi	r3, #32
 800da96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da9a:	0713      	lsls	r3, r2, #28
 800da9c:	bf44      	itt	mi
 800da9e:	232b      	movmi	r3, #43	@ 0x2b
 800daa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daa4:	f89a 3000 	ldrb.w	r3, [sl]
 800daa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800daaa:	d015      	beq.n	800dad8 <_vfiprintf_r+0x120>
 800daac:	9a07      	ldr	r2, [sp, #28]
 800daae:	4654      	mov	r4, sl
 800dab0:	2000      	movs	r0, #0
 800dab2:	f04f 0c0a 	mov.w	ip, #10
 800dab6:	4621      	mov	r1, r4
 800dab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dabc:	3b30      	subs	r3, #48	@ 0x30
 800dabe:	2b09      	cmp	r3, #9
 800dac0:	d94b      	bls.n	800db5a <_vfiprintf_r+0x1a2>
 800dac2:	b1b0      	cbz	r0, 800daf2 <_vfiprintf_r+0x13a>
 800dac4:	9207      	str	r2, [sp, #28]
 800dac6:	e014      	b.n	800daf2 <_vfiprintf_r+0x13a>
 800dac8:	eba0 0308 	sub.w	r3, r0, r8
 800dacc:	fa09 f303 	lsl.w	r3, r9, r3
 800dad0:	4313      	orrs	r3, r2
 800dad2:	9304      	str	r3, [sp, #16]
 800dad4:	46a2      	mov	sl, r4
 800dad6:	e7d2      	b.n	800da7e <_vfiprintf_r+0xc6>
 800dad8:	9b03      	ldr	r3, [sp, #12]
 800dada:	1d19      	adds	r1, r3, #4
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	9103      	str	r1, [sp, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	bfbb      	ittet	lt
 800dae4:	425b      	neglt	r3, r3
 800dae6:	f042 0202 	orrlt.w	r2, r2, #2
 800daea:	9307      	strge	r3, [sp, #28]
 800daec:	9307      	strlt	r3, [sp, #28]
 800daee:	bfb8      	it	lt
 800daf0:	9204      	strlt	r2, [sp, #16]
 800daf2:	7823      	ldrb	r3, [r4, #0]
 800daf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800daf6:	d10a      	bne.n	800db0e <_vfiprintf_r+0x156>
 800daf8:	7863      	ldrb	r3, [r4, #1]
 800dafa:	2b2a      	cmp	r3, #42	@ 0x2a
 800dafc:	d132      	bne.n	800db64 <_vfiprintf_r+0x1ac>
 800dafe:	9b03      	ldr	r3, [sp, #12]
 800db00:	1d1a      	adds	r2, r3, #4
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	9203      	str	r2, [sp, #12]
 800db06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db0a:	3402      	adds	r4, #2
 800db0c:	9305      	str	r3, [sp, #20]
 800db0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dbe4 <_vfiprintf_r+0x22c>
 800db12:	7821      	ldrb	r1, [r4, #0]
 800db14:	2203      	movs	r2, #3
 800db16:	4650      	mov	r0, sl
 800db18:	f7f2 fb8a 	bl	8000230 <memchr>
 800db1c:	b138      	cbz	r0, 800db2e <_vfiprintf_r+0x176>
 800db1e:	9b04      	ldr	r3, [sp, #16]
 800db20:	eba0 000a 	sub.w	r0, r0, sl
 800db24:	2240      	movs	r2, #64	@ 0x40
 800db26:	4082      	lsls	r2, r0
 800db28:	4313      	orrs	r3, r2
 800db2a:	3401      	adds	r4, #1
 800db2c:	9304      	str	r3, [sp, #16]
 800db2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db32:	4829      	ldr	r0, [pc, #164]	@ (800dbd8 <_vfiprintf_r+0x220>)
 800db34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db38:	2206      	movs	r2, #6
 800db3a:	f7f2 fb79 	bl	8000230 <memchr>
 800db3e:	2800      	cmp	r0, #0
 800db40:	d03f      	beq.n	800dbc2 <_vfiprintf_r+0x20a>
 800db42:	4b26      	ldr	r3, [pc, #152]	@ (800dbdc <_vfiprintf_r+0x224>)
 800db44:	bb1b      	cbnz	r3, 800db8e <_vfiprintf_r+0x1d6>
 800db46:	9b03      	ldr	r3, [sp, #12]
 800db48:	3307      	adds	r3, #7
 800db4a:	f023 0307 	bic.w	r3, r3, #7
 800db4e:	3308      	adds	r3, #8
 800db50:	9303      	str	r3, [sp, #12]
 800db52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db54:	443b      	add	r3, r7
 800db56:	9309      	str	r3, [sp, #36]	@ 0x24
 800db58:	e76a      	b.n	800da30 <_vfiprintf_r+0x78>
 800db5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800db5e:	460c      	mov	r4, r1
 800db60:	2001      	movs	r0, #1
 800db62:	e7a8      	b.n	800dab6 <_vfiprintf_r+0xfe>
 800db64:	2300      	movs	r3, #0
 800db66:	3401      	adds	r4, #1
 800db68:	9305      	str	r3, [sp, #20]
 800db6a:	4619      	mov	r1, r3
 800db6c:	f04f 0c0a 	mov.w	ip, #10
 800db70:	4620      	mov	r0, r4
 800db72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db76:	3a30      	subs	r2, #48	@ 0x30
 800db78:	2a09      	cmp	r2, #9
 800db7a:	d903      	bls.n	800db84 <_vfiprintf_r+0x1cc>
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d0c6      	beq.n	800db0e <_vfiprintf_r+0x156>
 800db80:	9105      	str	r1, [sp, #20]
 800db82:	e7c4      	b.n	800db0e <_vfiprintf_r+0x156>
 800db84:	fb0c 2101 	mla	r1, ip, r1, r2
 800db88:	4604      	mov	r4, r0
 800db8a:	2301      	movs	r3, #1
 800db8c:	e7f0      	b.n	800db70 <_vfiprintf_r+0x1b8>
 800db8e:	ab03      	add	r3, sp, #12
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	462a      	mov	r2, r5
 800db94:	4b12      	ldr	r3, [pc, #72]	@ (800dbe0 <_vfiprintf_r+0x228>)
 800db96:	a904      	add	r1, sp, #16
 800db98:	4630      	mov	r0, r6
 800db9a:	f3af 8000 	nop.w
 800db9e:	4607      	mov	r7, r0
 800dba0:	1c78      	adds	r0, r7, #1
 800dba2:	d1d6      	bne.n	800db52 <_vfiprintf_r+0x19a>
 800dba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dba6:	07d9      	lsls	r1, r3, #31
 800dba8:	d405      	bmi.n	800dbb6 <_vfiprintf_r+0x1fe>
 800dbaa:	89ab      	ldrh	r3, [r5, #12]
 800dbac:	059a      	lsls	r2, r3, #22
 800dbae:	d402      	bmi.n	800dbb6 <_vfiprintf_r+0x1fe>
 800dbb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbb2:	f7ff fe7d 	bl	800d8b0 <__retarget_lock_release_recursive>
 800dbb6:	89ab      	ldrh	r3, [r5, #12]
 800dbb8:	065b      	lsls	r3, r3, #25
 800dbba:	f53f af1f 	bmi.w	800d9fc <_vfiprintf_r+0x44>
 800dbbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbc0:	e71e      	b.n	800da00 <_vfiprintf_r+0x48>
 800dbc2:	ab03      	add	r3, sp, #12
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	462a      	mov	r2, r5
 800dbc8:	4b05      	ldr	r3, [pc, #20]	@ (800dbe0 <_vfiprintf_r+0x228>)
 800dbca:	a904      	add	r1, sp, #16
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f000 f879 	bl	800dcc4 <_printf_i>
 800dbd2:	e7e4      	b.n	800db9e <_vfiprintf_r+0x1e6>
 800dbd4:	0800e958 	.word	0x0800e958
 800dbd8:	0800e962 	.word	0x0800e962
 800dbdc:	00000000 	.word	0x00000000
 800dbe0:	0800d993 	.word	0x0800d993
 800dbe4:	0800e95e 	.word	0x0800e95e

0800dbe8 <_printf_common>:
 800dbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbec:	4616      	mov	r6, r2
 800dbee:	4698      	mov	r8, r3
 800dbf0:	688a      	ldr	r2, [r1, #8]
 800dbf2:	690b      	ldr	r3, [r1, #16]
 800dbf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	bfb8      	it	lt
 800dbfc:	4613      	movlt	r3, r2
 800dbfe:	6033      	str	r3, [r6, #0]
 800dc00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc04:	4607      	mov	r7, r0
 800dc06:	460c      	mov	r4, r1
 800dc08:	b10a      	cbz	r2, 800dc0e <_printf_common+0x26>
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	6033      	str	r3, [r6, #0]
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	0699      	lsls	r1, r3, #26
 800dc12:	bf42      	ittt	mi
 800dc14:	6833      	ldrmi	r3, [r6, #0]
 800dc16:	3302      	addmi	r3, #2
 800dc18:	6033      	strmi	r3, [r6, #0]
 800dc1a:	6825      	ldr	r5, [r4, #0]
 800dc1c:	f015 0506 	ands.w	r5, r5, #6
 800dc20:	d106      	bne.n	800dc30 <_printf_common+0x48>
 800dc22:	f104 0a19 	add.w	sl, r4, #25
 800dc26:	68e3      	ldr	r3, [r4, #12]
 800dc28:	6832      	ldr	r2, [r6, #0]
 800dc2a:	1a9b      	subs	r3, r3, r2
 800dc2c:	42ab      	cmp	r3, r5
 800dc2e:	dc26      	bgt.n	800dc7e <_printf_common+0x96>
 800dc30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc34:	6822      	ldr	r2, [r4, #0]
 800dc36:	3b00      	subs	r3, #0
 800dc38:	bf18      	it	ne
 800dc3a:	2301      	movne	r3, #1
 800dc3c:	0692      	lsls	r2, r2, #26
 800dc3e:	d42b      	bmi.n	800dc98 <_printf_common+0xb0>
 800dc40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc44:	4641      	mov	r1, r8
 800dc46:	4638      	mov	r0, r7
 800dc48:	47c8      	blx	r9
 800dc4a:	3001      	adds	r0, #1
 800dc4c:	d01e      	beq.n	800dc8c <_printf_common+0xa4>
 800dc4e:	6823      	ldr	r3, [r4, #0]
 800dc50:	6922      	ldr	r2, [r4, #16]
 800dc52:	f003 0306 	and.w	r3, r3, #6
 800dc56:	2b04      	cmp	r3, #4
 800dc58:	bf02      	ittt	eq
 800dc5a:	68e5      	ldreq	r5, [r4, #12]
 800dc5c:	6833      	ldreq	r3, [r6, #0]
 800dc5e:	1aed      	subeq	r5, r5, r3
 800dc60:	68a3      	ldr	r3, [r4, #8]
 800dc62:	bf0c      	ite	eq
 800dc64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc68:	2500      	movne	r5, #0
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	bfc4      	itt	gt
 800dc6e:	1a9b      	subgt	r3, r3, r2
 800dc70:	18ed      	addgt	r5, r5, r3
 800dc72:	2600      	movs	r6, #0
 800dc74:	341a      	adds	r4, #26
 800dc76:	42b5      	cmp	r5, r6
 800dc78:	d11a      	bne.n	800dcb0 <_printf_common+0xc8>
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	e008      	b.n	800dc90 <_printf_common+0xa8>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4652      	mov	r2, sl
 800dc82:	4641      	mov	r1, r8
 800dc84:	4638      	mov	r0, r7
 800dc86:	47c8      	blx	r9
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d103      	bne.n	800dc94 <_printf_common+0xac>
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc94:	3501      	adds	r5, #1
 800dc96:	e7c6      	b.n	800dc26 <_printf_common+0x3e>
 800dc98:	18e1      	adds	r1, r4, r3
 800dc9a:	1c5a      	adds	r2, r3, #1
 800dc9c:	2030      	movs	r0, #48	@ 0x30
 800dc9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dca2:	4422      	add	r2, r4
 800dca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dcac:	3302      	adds	r3, #2
 800dcae:	e7c7      	b.n	800dc40 <_printf_common+0x58>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	4622      	mov	r2, r4
 800dcb4:	4641      	mov	r1, r8
 800dcb6:	4638      	mov	r0, r7
 800dcb8:	47c8      	blx	r9
 800dcba:	3001      	adds	r0, #1
 800dcbc:	d0e6      	beq.n	800dc8c <_printf_common+0xa4>
 800dcbe:	3601      	adds	r6, #1
 800dcc0:	e7d9      	b.n	800dc76 <_printf_common+0x8e>
	...

0800dcc4 <_printf_i>:
 800dcc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc8:	7e0f      	ldrb	r7, [r1, #24]
 800dcca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dccc:	2f78      	cmp	r7, #120	@ 0x78
 800dcce:	4691      	mov	r9, r2
 800dcd0:	4680      	mov	r8, r0
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	469a      	mov	sl, r3
 800dcd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcda:	d807      	bhi.n	800dcec <_printf_i+0x28>
 800dcdc:	2f62      	cmp	r7, #98	@ 0x62
 800dcde:	d80a      	bhi.n	800dcf6 <_printf_i+0x32>
 800dce0:	2f00      	cmp	r7, #0
 800dce2:	f000 80d2 	beq.w	800de8a <_printf_i+0x1c6>
 800dce6:	2f58      	cmp	r7, #88	@ 0x58
 800dce8:	f000 80b9 	beq.w	800de5e <_printf_i+0x19a>
 800dcec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dcf4:	e03a      	b.n	800dd6c <_printf_i+0xa8>
 800dcf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcfa:	2b15      	cmp	r3, #21
 800dcfc:	d8f6      	bhi.n	800dcec <_printf_i+0x28>
 800dcfe:	a101      	add	r1, pc, #4	@ (adr r1, 800dd04 <_printf_i+0x40>)
 800dd00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd04:	0800dd5d 	.word	0x0800dd5d
 800dd08:	0800dd71 	.word	0x0800dd71
 800dd0c:	0800dced 	.word	0x0800dced
 800dd10:	0800dced 	.word	0x0800dced
 800dd14:	0800dced 	.word	0x0800dced
 800dd18:	0800dced 	.word	0x0800dced
 800dd1c:	0800dd71 	.word	0x0800dd71
 800dd20:	0800dced 	.word	0x0800dced
 800dd24:	0800dced 	.word	0x0800dced
 800dd28:	0800dced 	.word	0x0800dced
 800dd2c:	0800dced 	.word	0x0800dced
 800dd30:	0800de71 	.word	0x0800de71
 800dd34:	0800dd9b 	.word	0x0800dd9b
 800dd38:	0800de2b 	.word	0x0800de2b
 800dd3c:	0800dced 	.word	0x0800dced
 800dd40:	0800dced 	.word	0x0800dced
 800dd44:	0800de93 	.word	0x0800de93
 800dd48:	0800dced 	.word	0x0800dced
 800dd4c:	0800dd9b 	.word	0x0800dd9b
 800dd50:	0800dced 	.word	0x0800dced
 800dd54:	0800dced 	.word	0x0800dced
 800dd58:	0800de33 	.word	0x0800de33
 800dd5c:	6833      	ldr	r3, [r6, #0]
 800dd5e:	1d1a      	adds	r2, r3, #4
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6032      	str	r2, [r6, #0]
 800dd64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e09d      	b.n	800deac <_printf_i+0x1e8>
 800dd70:	6833      	ldr	r3, [r6, #0]
 800dd72:	6820      	ldr	r0, [r4, #0]
 800dd74:	1d19      	adds	r1, r3, #4
 800dd76:	6031      	str	r1, [r6, #0]
 800dd78:	0606      	lsls	r6, r0, #24
 800dd7a:	d501      	bpl.n	800dd80 <_printf_i+0xbc>
 800dd7c:	681d      	ldr	r5, [r3, #0]
 800dd7e:	e003      	b.n	800dd88 <_printf_i+0xc4>
 800dd80:	0645      	lsls	r5, r0, #25
 800dd82:	d5fb      	bpl.n	800dd7c <_printf_i+0xb8>
 800dd84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	da03      	bge.n	800dd94 <_printf_i+0xd0>
 800dd8c:	232d      	movs	r3, #45	@ 0x2d
 800dd8e:	426d      	negs	r5, r5
 800dd90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd94:	4859      	ldr	r0, [pc, #356]	@ (800defc <_printf_i+0x238>)
 800dd96:	230a      	movs	r3, #10
 800dd98:	e011      	b.n	800ddbe <_printf_i+0xfa>
 800dd9a:	6821      	ldr	r1, [r4, #0]
 800dd9c:	6833      	ldr	r3, [r6, #0]
 800dd9e:	0608      	lsls	r0, r1, #24
 800dda0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dda4:	d402      	bmi.n	800ddac <_printf_i+0xe8>
 800dda6:	0649      	lsls	r1, r1, #25
 800dda8:	bf48      	it	mi
 800ddaa:	b2ad      	uxthmi	r5, r5
 800ddac:	2f6f      	cmp	r7, #111	@ 0x6f
 800ddae:	4853      	ldr	r0, [pc, #332]	@ (800defc <_printf_i+0x238>)
 800ddb0:	6033      	str	r3, [r6, #0]
 800ddb2:	bf14      	ite	ne
 800ddb4:	230a      	movne	r3, #10
 800ddb6:	2308      	moveq	r3, #8
 800ddb8:	2100      	movs	r1, #0
 800ddba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ddbe:	6866      	ldr	r6, [r4, #4]
 800ddc0:	60a6      	str	r6, [r4, #8]
 800ddc2:	2e00      	cmp	r6, #0
 800ddc4:	bfa2      	ittt	ge
 800ddc6:	6821      	ldrge	r1, [r4, #0]
 800ddc8:	f021 0104 	bicge.w	r1, r1, #4
 800ddcc:	6021      	strge	r1, [r4, #0]
 800ddce:	b90d      	cbnz	r5, 800ddd4 <_printf_i+0x110>
 800ddd0:	2e00      	cmp	r6, #0
 800ddd2:	d04b      	beq.n	800de6c <_printf_i+0x1a8>
 800ddd4:	4616      	mov	r6, r2
 800ddd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddda:	fb03 5711 	mls	r7, r3, r1, r5
 800ddde:	5dc7      	ldrb	r7, [r0, r7]
 800dde0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dde4:	462f      	mov	r7, r5
 800dde6:	42bb      	cmp	r3, r7
 800dde8:	460d      	mov	r5, r1
 800ddea:	d9f4      	bls.n	800ddd6 <_printf_i+0x112>
 800ddec:	2b08      	cmp	r3, #8
 800ddee:	d10b      	bne.n	800de08 <_printf_i+0x144>
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	07df      	lsls	r7, r3, #31
 800ddf4:	d508      	bpl.n	800de08 <_printf_i+0x144>
 800ddf6:	6923      	ldr	r3, [r4, #16]
 800ddf8:	6861      	ldr	r1, [r4, #4]
 800ddfa:	4299      	cmp	r1, r3
 800ddfc:	bfde      	ittt	le
 800ddfe:	2330      	movle	r3, #48	@ 0x30
 800de00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de04:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800de08:	1b92      	subs	r2, r2, r6
 800de0a:	6122      	str	r2, [r4, #16]
 800de0c:	f8cd a000 	str.w	sl, [sp]
 800de10:	464b      	mov	r3, r9
 800de12:	aa03      	add	r2, sp, #12
 800de14:	4621      	mov	r1, r4
 800de16:	4640      	mov	r0, r8
 800de18:	f7ff fee6 	bl	800dbe8 <_printf_common>
 800de1c:	3001      	adds	r0, #1
 800de1e:	d14a      	bne.n	800deb6 <_printf_i+0x1f2>
 800de20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de24:	b004      	add	sp, #16
 800de26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	f043 0320 	orr.w	r3, r3, #32
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	4833      	ldr	r0, [pc, #204]	@ (800df00 <_printf_i+0x23c>)
 800de34:	2778      	movs	r7, #120	@ 0x78
 800de36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de3a:	6823      	ldr	r3, [r4, #0]
 800de3c:	6831      	ldr	r1, [r6, #0]
 800de3e:	061f      	lsls	r7, r3, #24
 800de40:	f851 5b04 	ldr.w	r5, [r1], #4
 800de44:	d402      	bmi.n	800de4c <_printf_i+0x188>
 800de46:	065f      	lsls	r7, r3, #25
 800de48:	bf48      	it	mi
 800de4a:	b2ad      	uxthmi	r5, r5
 800de4c:	6031      	str	r1, [r6, #0]
 800de4e:	07d9      	lsls	r1, r3, #31
 800de50:	bf44      	itt	mi
 800de52:	f043 0320 	orrmi.w	r3, r3, #32
 800de56:	6023      	strmi	r3, [r4, #0]
 800de58:	b11d      	cbz	r5, 800de62 <_printf_i+0x19e>
 800de5a:	2310      	movs	r3, #16
 800de5c:	e7ac      	b.n	800ddb8 <_printf_i+0xf4>
 800de5e:	4827      	ldr	r0, [pc, #156]	@ (800defc <_printf_i+0x238>)
 800de60:	e7e9      	b.n	800de36 <_printf_i+0x172>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	f023 0320 	bic.w	r3, r3, #32
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	e7f6      	b.n	800de5a <_printf_i+0x196>
 800de6c:	4616      	mov	r6, r2
 800de6e:	e7bd      	b.n	800ddec <_printf_i+0x128>
 800de70:	6833      	ldr	r3, [r6, #0]
 800de72:	6825      	ldr	r5, [r4, #0]
 800de74:	6961      	ldr	r1, [r4, #20]
 800de76:	1d18      	adds	r0, r3, #4
 800de78:	6030      	str	r0, [r6, #0]
 800de7a:	062e      	lsls	r6, r5, #24
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	d501      	bpl.n	800de84 <_printf_i+0x1c0>
 800de80:	6019      	str	r1, [r3, #0]
 800de82:	e002      	b.n	800de8a <_printf_i+0x1c6>
 800de84:	0668      	lsls	r0, r5, #25
 800de86:	d5fb      	bpl.n	800de80 <_printf_i+0x1bc>
 800de88:	8019      	strh	r1, [r3, #0]
 800de8a:	2300      	movs	r3, #0
 800de8c:	6123      	str	r3, [r4, #16]
 800de8e:	4616      	mov	r6, r2
 800de90:	e7bc      	b.n	800de0c <_printf_i+0x148>
 800de92:	6833      	ldr	r3, [r6, #0]
 800de94:	1d1a      	adds	r2, r3, #4
 800de96:	6032      	str	r2, [r6, #0]
 800de98:	681e      	ldr	r6, [r3, #0]
 800de9a:	6862      	ldr	r2, [r4, #4]
 800de9c:	2100      	movs	r1, #0
 800de9e:	4630      	mov	r0, r6
 800dea0:	f7f2 f9c6 	bl	8000230 <memchr>
 800dea4:	b108      	cbz	r0, 800deaa <_printf_i+0x1e6>
 800dea6:	1b80      	subs	r0, r0, r6
 800dea8:	6060      	str	r0, [r4, #4]
 800deaa:	6863      	ldr	r3, [r4, #4]
 800deac:	6123      	str	r3, [r4, #16]
 800deae:	2300      	movs	r3, #0
 800deb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800deb4:	e7aa      	b.n	800de0c <_printf_i+0x148>
 800deb6:	6923      	ldr	r3, [r4, #16]
 800deb8:	4632      	mov	r2, r6
 800deba:	4649      	mov	r1, r9
 800debc:	4640      	mov	r0, r8
 800debe:	47d0      	blx	sl
 800dec0:	3001      	adds	r0, #1
 800dec2:	d0ad      	beq.n	800de20 <_printf_i+0x15c>
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	079b      	lsls	r3, r3, #30
 800dec8:	d413      	bmi.n	800def2 <_printf_i+0x22e>
 800deca:	68e0      	ldr	r0, [r4, #12]
 800decc:	9b03      	ldr	r3, [sp, #12]
 800dece:	4298      	cmp	r0, r3
 800ded0:	bfb8      	it	lt
 800ded2:	4618      	movlt	r0, r3
 800ded4:	e7a6      	b.n	800de24 <_printf_i+0x160>
 800ded6:	2301      	movs	r3, #1
 800ded8:	4632      	mov	r2, r6
 800deda:	4649      	mov	r1, r9
 800dedc:	4640      	mov	r0, r8
 800dede:	47d0      	blx	sl
 800dee0:	3001      	adds	r0, #1
 800dee2:	d09d      	beq.n	800de20 <_printf_i+0x15c>
 800dee4:	3501      	adds	r5, #1
 800dee6:	68e3      	ldr	r3, [r4, #12]
 800dee8:	9903      	ldr	r1, [sp, #12]
 800deea:	1a5b      	subs	r3, r3, r1
 800deec:	42ab      	cmp	r3, r5
 800deee:	dcf2      	bgt.n	800ded6 <_printf_i+0x212>
 800def0:	e7eb      	b.n	800deca <_printf_i+0x206>
 800def2:	2500      	movs	r5, #0
 800def4:	f104 0619 	add.w	r6, r4, #25
 800def8:	e7f5      	b.n	800dee6 <_printf_i+0x222>
 800defa:	bf00      	nop
 800defc:	0800e969 	.word	0x0800e969
 800df00:	0800e97a 	.word	0x0800e97a

0800df04 <__swhatbuf_r>:
 800df04:	b570      	push	{r4, r5, r6, lr}
 800df06:	460c      	mov	r4, r1
 800df08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df0c:	2900      	cmp	r1, #0
 800df0e:	b096      	sub	sp, #88	@ 0x58
 800df10:	4615      	mov	r5, r2
 800df12:	461e      	mov	r6, r3
 800df14:	da0d      	bge.n	800df32 <__swhatbuf_r+0x2e>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df1c:	f04f 0100 	mov.w	r1, #0
 800df20:	bf14      	ite	ne
 800df22:	2340      	movne	r3, #64	@ 0x40
 800df24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df28:	2000      	movs	r0, #0
 800df2a:	6031      	str	r1, [r6, #0]
 800df2c:	602b      	str	r3, [r5, #0]
 800df2e:	b016      	add	sp, #88	@ 0x58
 800df30:	bd70      	pop	{r4, r5, r6, pc}
 800df32:	466a      	mov	r2, sp
 800df34:	f000 f848 	bl	800dfc8 <_fstat_r>
 800df38:	2800      	cmp	r0, #0
 800df3a:	dbec      	blt.n	800df16 <__swhatbuf_r+0x12>
 800df3c:	9901      	ldr	r1, [sp, #4]
 800df3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df46:	4259      	negs	r1, r3
 800df48:	4159      	adcs	r1, r3
 800df4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df4e:	e7eb      	b.n	800df28 <__swhatbuf_r+0x24>

0800df50 <__smakebuf_r>:
 800df50:	898b      	ldrh	r3, [r1, #12]
 800df52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df54:	079d      	lsls	r5, r3, #30
 800df56:	4606      	mov	r6, r0
 800df58:	460c      	mov	r4, r1
 800df5a:	d507      	bpl.n	800df6c <__smakebuf_r+0x1c>
 800df5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	6123      	str	r3, [r4, #16]
 800df64:	2301      	movs	r3, #1
 800df66:	6163      	str	r3, [r4, #20]
 800df68:	b003      	add	sp, #12
 800df6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df6c:	ab01      	add	r3, sp, #4
 800df6e:	466a      	mov	r2, sp
 800df70:	f7ff ffc8 	bl	800df04 <__swhatbuf_r>
 800df74:	9f00      	ldr	r7, [sp, #0]
 800df76:	4605      	mov	r5, r0
 800df78:	4639      	mov	r1, r7
 800df7a:	4630      	mov	r0, r6
 800df7c:	f7ff f89e 	bl	800d0bc <_malloc_r>
 800df80:	b948      	cbnz	r0, 800df96 <__smakebuf_r+0x46>
 800df82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df86:	059a      	lsls	r2, r3, #22
 800df88:	d4ee      	bmi.n	800df68 <__smakebuf_r+0x18>
 800df8a:	f023 0303 	bic.w	r3, r3, #3
 800df8e:	f043 0302 	orr.w	r3, r3, #2
 800df92:	81a3      	strh	r3, [r4, #12]
 800df94:	e7e2      	b.n	800df5c <__smakebuf_r+0xc>
 800df96:	89a3      	ldrh	r3, [r4, #12]
 800df98:	6020      	str	r0, [r4, #0]
 800df9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df9e:	81a3      	strh	r3, [r4, #12]
 800dfa0:	9b01      	ldr	r3, [sp, #4]
 800dfa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dfa6:	b15b      	cbz	r3, 800dfc0 <__smakebuf_r+0x70>
 800dfa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfac:	4630      	mov	r0, r6
 800dfae:	f000 f81d 	bl	800dfec <_isatty_r>
 800dfb2:	b128      	cbz	r0, 800dfc0 <__smakebuf_r+0x70>
 800dfb4:	89a3      	ldrh	r3, [r4, #12]
 800dfb6:	f023 0303 	bic.w	r3, r3, #3
 800dfba:	f043 0301 	orr.w	r3, r3, #1
 800dfbe:	81a3      	strh	r3, [r4, #12]
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	431d      	orrs	r5, r3
 800dfc4:	81a5      	strh	r5, [r4, #12]
 800dfc6:	e7cf      	b.n	800df68 <__smakebuf_r+0x18>

0800dfc8 <_fstat_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d07      	ldr	r5, [pc, #28]	@ (800dfe8 <_fstat_r+0x20>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	f7fa f97a 	bl	80082ce <_fstat>
 800dfda:	1c43      	adds	r3, r0, #1
 800dfdc:	d102      	bne.n	800dfe4 <_fstat_r+0x1c>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	b103      	cbz	r3, 800dfe4 <_fstat_r+0x1c>
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	bf00      	nop
 800dfe8:	200007f8 	.word	0x200007f8

0800dfec <_isatty_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4d06      	ldr	r5, [pc, #24]	@ (800e008 <_isatty_r+0x1c>)
 800dff0:	2300      	movs	r3, #0
 800dff2:	4604      	mov	r4, r0
 800dff4:	4608      	mov	r0, r1
 800dff6:	602b      	str	r3, [r5, #0]
 800dff8:	f7fa f979 	bl	80082ee <_isatty>
 800dffc:	1c43      	adds	r3, r0, #1
 800dffe:	d102      	bne.n	800e006 <_isatty_r+0x1a>
 800e000:	682b      	ldr	r3, [r5, #0]
 800e002:	b103      	cbz	r3, 800e006 <_isatty_r+0x1a>
 800e004:	6023      	str	r3, [r4, #0]
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	200007f8 	.word	0x200007f8

0800e00c <_init>:
 800e00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00e:	bf00      	nop
 800e010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e012:	bc08      	pop	{r3}
 800e014:	469e      	mov	lr, r3
 800e016:	4770      	bx	lr

0800e018 <_fini>:
 800e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01a:	bf00      	nop
 800e01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e01e:	bc08      	pop	{r3}
 800e020:	469e      	mov	lr, r3
 800e022:	4770      	bx	lr
