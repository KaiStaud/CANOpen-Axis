
CANOpen-Axis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000486c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004a44  08004a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a84  08004a84  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a8c  08004a8c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08004aa0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004aa0  00006220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163f5  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b1  00000000  00000000  0001c431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0001eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8a  00000000  00000000  0001fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026717  00000000  00000000  00020e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154e2  00000000  00000000  00047561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff2fd  00000000  00000000  0005ca43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015bd40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000562c  00000000  00000000  0015bd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001613b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a2c 	.word	0x08004a2c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004a2c 	.word	0x08004a2c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc7d 	bl	8000e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f9b6 	bl	8000884 <MX_GPIO_Init>
  MX_FDCAN3_Init();
 8000518:	f000 f856 	bl	80005c8 <MX_FDCAN3_Init>
  MX_LPUART1_UART_Init();
 800051c:	f000 f89a 	bl	8000654 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8000520:	f000 f97a 	bl	8000818 <MX_TIM6_Init>
  MX_SPI1_Init();
 8000524:	f000 f8e0 	bl	80006e8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000528:	f000 f91c 	bl	8000764 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <main+0x24>

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0318 	add.w	r3, r7, #24
 800053a:	2238      	movs	r2, #56	@ 0x38
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fa48 	bl	80049d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000556:	f001 faf7 	bl	8001b48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000562:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2340      	movs	r3, #64	@ 0x40
 8000566:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000570:	2301      	movs	r3, #1
 8000572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000574:	2308      	movs	r3, #8
 8000576:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fb91 	bl	8001cb0 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000594:	f000 f9fc 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2303      	movs	r3, #3
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2102      	movs	r1, #2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fe8f 	bl	80022d4 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005bc:	f000 f9e8 	bl	8000990 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	@ 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005ce:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <MX_FDCAN3_Init+0x88>)
 80005d0:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = ENABLE;
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 32;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005f8:	2220      	movs	r2, #32
 80005fa:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <MX_FDCAN3_Init+0x84>)
 80005fe:	2201      	movs	r2, #1
 8000600:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 13;
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_FDCAN3_Init+0x84>)
 8000604:	220d      	movs	r2, #13
 8000606:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000608:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_FDCAN3_Init+0x84>)
 800060a:	2202      	movs	r2, #2
 800060c:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 32;
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_FDCAN3_Init+0x84>)
 8000610:	2220      	movs	r2, #32
 8000612:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000614:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <MX_FDCAN3_Init+0x84>)
 8000616:	2201      	movs	r2, #1
 8000618:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 13;
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_FDCAN3_Init+0x84>)
 800061c:	220d      	movs	r2, #13
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 2;
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <MX_FDCAN3_Init+0x84>)
 8000622:	2202      	movs	r2, #2
 8000624:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_FDCAN3_Init+0x84>)
 8000628:	2200      	movs	r2, #0
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <MX_FDCAN3_Init+0x84>)
 800062e:	2200      	movs	r2, #0
 8000630:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_FDCAN3_Init+0x84>)
 8000634:	2200      	movs	r2, #0
 8000636:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <MX_FDCAN3_Init+0x84>)
 800063a:	f000 fd67 	bl	800110c <HAL_FDCAN_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000644:	f000 f9a4 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000028 	.word	0x20000028
 8000650:	40006c00 	.word	0x40006c00

08000654 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000658:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800065c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800065e:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000696:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	f003 fb2e 	bl	8003cf8 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f975 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	f004 f8c9 	bl	8004840 <HAL_UARTEx_SetTxFifoThreshold>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006b4:	f000 f96c 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f004 f8fe 	bl	80048bc <HAL_UARTEx_SetRxFifoThreshold>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006c6:	f000 f963 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	f004 f87f 	bl	80047ce <HAL_UARTEx_DisableFifoMode>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006d6:	f000 f95b 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40008000 	.word	0x40008000

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <MX_SPI1_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <MX_SPI1_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_SPI1_Init+0x74>)
 80006f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_SPI1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <MX_SPI1_Init+0x74>)
 8000702:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000706:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000708:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_SPI1_Init+0x74>)
 800070a:	2202      	movs	r2, #2
 800070c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_SPI1_Init+0x74>)
 8000716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800071a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_SPI1_Init+0x74>)
 800071e:	2220      	movs	r2, #32
 8000720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_SPI1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_SPI1_Init+0x74>)
 8000736:	2207      	movs	r2, #7
 8000738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_SPI1_Init+0x74>)
 8000742:	2208      	movs	r2, #8
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_SPI1_Init+0x74>)
 8000748:	f002 fa2e 	bl	8002ba8 <HAL_SPI_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f91d 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000120 	.word	0x20000120
 8000760:	40013000 	.word	0x40013000

08000764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
 8000786:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <MX_TIM3_Init+0xac>)
 800078a:	4a22      	ldr	r2, [pc, #136]	@ (8000814 <MX_TIM3_Init+0xb0>)
 800078c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <MX_TIM3_Init+0xac>)
 8000790:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000794:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_TIM3_Init+0xac>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_TIM3_Init+0xac>)
 800079e:	2264      	movs	r2, #100	@ 0x64
 80007a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_TIM3_Init+0xac>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_TIM3_Init+0xac>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007ae:	4818      	ldr	r0, [pc, #96]	@ (8000810 <MX_TIM3_Init+0xac>)
 80007b0:	f002 fafc 	bl	8002dac <HAL_TIM_PWM_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007ba:	f000 f8e9 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4810      	ldr	r0, [pc, #64]	@ (8000810 <MX_TIM3_Init+0xac>)
 80007ce:	f003 f9b7 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80007d8:	f000 f8da 	bl	8000990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007dc:	2360      	movs	r3, #96	@ 0x60
 80007de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80007e0:	2332      	movs	r3, #50	@ 0x32
 80007e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2204      	movs	r2, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4807      	ldr	r0, [pc, #28]	@ (8000810 <MX_TIM3_Init+0xac>)
 80007f4:	f002 fc80 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80007fe:	f000 f8c7 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000802:	4803      	ldr	r0, [pc, #12]	@ (8000810 <MX_TIM3_Init+0xac>)
 8000804:	f000 fa38 	bl	8000c78 <HAL_TIM_MspPostInit>

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	@ 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000184 	.word	0x20000184
 8000814:	40000400 	.word	0x40000400

08000818 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_TIM6_Init+0x64>)
 800082a:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <MX_TIM6_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_TIM6_Init+0x64>)
 8000830:	2240      	movs	r2, #64	@ 0x40
 8000832:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_TIM6_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_TIM6_Init+0x64>)
 800083c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000840:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_TIM6_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <MX_TIM6_Init+0x64>)
 800084a:	f002 fa58 	bl	8002cfe <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000854:	f000 f89c 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_TIM6_Init+0x64>)
 8000866:	f003 f96b 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000870:	f000 f88e 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001d0 	.word	0x200001d0
 8000880:	40001000 	.word	0x40001000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b3a      	ldr	r3, [pc, #232]	@ (8000984 <MX_GPIO_Init+0x100>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a39      	ldr	r2, [pc, #228]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b2:	4b34      	ldr	r3, [pc, #208]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a33      	ldr	r2, [pc, #204]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008b8:	f043 0320 	orr.w	r3, r3, #32
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0320 	and.w	r3, r3, #32
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a2d      	ldr	r2, [pc, #180]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <MX_GPIO_Init+0x100>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|RST_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000904:	f001 f8e4 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	@ 0x40
 800090c:	481e      	ldr	r0, [pc, #120]	@ (8000988 <MX_GPIO_Init+0x104>)
 800090e:	f001 f8df 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000912:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4818      	ldr	r0, [pc, #96]	@ (800098c <MX_GPIO_Init+0x108>)
 800092a:	f000 ff4f 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin RST_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|RST_Pin;
 800092e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094a:	f000 ff3f 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4808      	ldr	r0, [pc, #32]	@ (8000988 <MX_GPIO_Init+0x104>)
 8000966:	f000 ff31 	bl	80017cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2028      	movs	r0, #40	@ 0x28
 8000970:	f000 fb97 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000974:	2028      	movs	r0, #40	@ 0x28
 8000976:	f000 fbae 	bl	80010d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	48000400 	.word	0x48000400
 800098c:	48000800 	.word	0x48000800

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_MspInit+0x44>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a6:	4a0e      	ldr	r2, [pc, #56]	@ (80009e0 <HAL_MspInit+0x44>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <HAL_MspInit+0x44>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_MspInit+0x44>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <HAL_MspInit+0x44>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_MspInit+0x44>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009d2:	f001 f95d 	bl	8001c90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09e      	sub	sp, #120	@ 0x78
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	2254      	movs	r2, #84	@ 0x54
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 ffe5 	bl	80049d4 <memset>
  if(hfdcan->Instance==FDCAN3)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a27      	ldr	r2, [pc, #156]	@ (8000aac <HAL_FDCAN_MspInit+0xc8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d147      	bne.n	8000aa4 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fe71 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a30:	f7ff ffae 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a34:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <HAL_FDCAN_MspInit+0xcc>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a38:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab0 <HAL_FDCAN_MspInit+0xcc>)
 8000a3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <HAL_FDCAN_MspInit+0xcc>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <HAL_FDCAN_MspInit+0xcc>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <HAL_FDCAN_MspInit+0xcc>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_FDCAN_MspInit+0xcc>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PB3     ------> FDCAN3_RX
    PB4     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a64:	2318      	movs	r3, #24
 8000a66:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000a74:	230b      	movs	r3, #11
 8000a76:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <HAL_FDCAN_MspInit+0xd0>)
 8000a80:	f000 fea4 	bl	80017cc <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2058      	movs	r0, #88	@ 0x58
 8000a8a:	f000 fb0a 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000a8e:	2058      	movs	r0, #88	@ 0x58
 8000a90:	f000 fb21 	bl	80010d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2059      	movs	r0, #89	@ 0x59
 8000a9a:	f000 fb02 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8000a9e:	2059      	movs	r0, #89	@ 0x59
 8000aa0:	f000 fb19 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3778      	adds	r7, #120	@ 0x78
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40006c00 	.word	0x40006c00
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000400 	.word	0x48000400

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09e      	sub	sp, #120	@ 0x78
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2254      	movs	r2, #84	@ 0x54
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 ff7b 	bl	80049d4 <memset>
  if(huart->Instance==LPUART1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b60 <HAL_UART_MspInit+0xa8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d136      	bne.n	8000b56 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fe09 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b00:	f7ff ff46 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_UART_MspInit+0xac>)
 8000b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b08:	4a16      	ldr	r2, [pc, #88]	@ (8000b64 <HAL_UART_MspInit+0xac>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0xac>)
 8000b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_UART_MspInit+0xac>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b20:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <HAL_UART_MspInit+0xac>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_UART_MspInit+0xac>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b34:	230c      	movs	r3, #12
 8000b36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b44:	230c      	movs	r3, #12
 8000b46:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f000 fe3b 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3778      	adds	r7, #120	@ 0x78
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40008000 	.word	0x40008000
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <HAL_SPI_MspInit+0x7c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d128      	bne.n	8000bdc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <HAL_SPI_MspInit+0x80>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8e:	4a16      	ldr	r2, [pc, #88]	@ (8000be8 <HAL_SPI_MspInit+0x80>)
 8000b90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <HAL_SPI_MspInit+0x80>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_SPI_MspInit+0x80>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a10      	ldr	r2, [pc, #64]	@ (8000be8 <HAL_SPI_MspInit+0x80>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_SPI_MspInit+0x80>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bba:	23e0      	movs	r3, #224	@ 0xe0
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f000 fdf8 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40013000 	.word	0x40013000
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_TIM_PWM_MspInit+0x38>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d10b      	bne.n	8000c16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40000400 	.word	0x40000400
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_TIM_Base_MspInit+0x44>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d113      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <HAL_TIM_Base_MspInit+0x48>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c42:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <HAL_TIM_Base_MspInit+0x48>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_TIM_Base_MspInit+0x48>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4e:	f003 0310 	and.w	r3, r3, #16
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2036      	movs	r0, #54	@ 0x36
 8000c5c:	f000 fa21 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c60:	2036      	movs	r0, #54	@ 0x36
 8000c62:	f000 fa38 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40001000 	.word	0x40001000
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a11      	ldr	r2, [pc, #68]	@ (8000cdc <HAL_TIM_MspPostInit+0x64>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d11b      	bne.n	8000cd2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_TIM_MspPostInit+0x68>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <HAL_TIM_MspPostInit+0x68>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_TIM_MspPostInit+0x68>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000cce:	f000 fd7d 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40000400 	.word	0x40000400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48000800 	.word	0x48000800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3e:	f000 f8b7 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d4a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d4e:	f000 fed7 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <TIM6_DAC_IRQHandler+0x10>)
 8000d5e:	f002 f87c 	bl	8002e5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200001d0 	.word	0x200001d0

08000d6c <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <FDCAN3_IT0_IRQHandler+0x10>)
 8000d72:	f000 fb25 	bl	80013c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000028 	.word	0x20000028

08000d80 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <FDCAN3_IT1_IRQHandler+0x10>)
 8000d86:	f000 fb1b 	bl	80013c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000028 	.word	0x20000028

08000d94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db8:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dbc:	f7ff ffea 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	@ (8000df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <LoopForever+0xe>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e04 <LoopForever+0x16>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de6:	f003 fdfd 	bl	80049e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dea:	f7ff fb8d 	bl	8000508 <main>

08000dee <LoopForever>:

LoopForever:
    b LoopForever
 8000dee:	e7fe      	b.n	8000dee <LoopForever>
  ldr   r0, =_estack
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dfc:	08004a94 	.word	0x08004a94
  ldr r2, =_sbss
 8000e00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e04:	20000220 	.word	0x20000220

08000e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_2_IRQHandler>

08000e0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f939 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f80e 	bl	8000e3c <HAL_InitTick>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e001      	b.n	8000e30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2c:	f7ff fdb6 	bl	800099c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e30:	79fb      	ldrb	r3, [r7, #7]

}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_InitTick+0x68>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d022      	beq.n	8000e96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_InitTick+0x6c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <HAL_InitTick+0x68>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f944 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10f      	bne.n	8000e90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	d809      	bhi.n	8000e8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e76:	2200      	movs	r2, #0
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e7e:	f000 f910 	bl	80010a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_InitTick+0x70>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e007      	b.n	8000e9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e004      	b.n	8000e9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e001      	b.n	8000e9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_IncTick+0x20>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a03      	ldr	r2, [pc, #12]	@ (8000ecc <HAL_IncTick+0x1c>)
 8000ec0:	6013      	str	r3, [r2, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	2000021c 	.word	0x2000021c
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000021c 	.word	0x2000021c

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	@ (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	@ (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff40 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff90 	bl	8000fe0 <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5f 	bl	8000f8c <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff33 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa4 	bl	8001048 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e147      	b.n	80013ae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fc56 	bl	80009e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0210 	bic.w	r2, r2, #16
 8001146:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001148:	f7ff fec4 	bl	8000ed4 <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800114e:	e012      	b.n	8001176 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001150:	f7ff fec0 	bl	8000ed4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b0a      	cmp	r3, #10
 800115c:	d90b      	bls.n	8001176 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2203      	movs	r2, #3
 800116e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e11b      	b.n	80013ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b08      	cmp	r3, #8
 8001182:	d0e5      	beq.n	8001150 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0201 	orr.w	r2, r2, #1
 8001192:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001194:	f7ff fe9e 	bl	8000ed4 <HAL_GetTick>
 8001198:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800119a:	e012      	b.n	80011c2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800119c:	f7ff fe9a 	bl	8000ed4 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b0a      	cmp	r3, #10
 80011a8:	d90b      	bls.n	80011c2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ae:	f043 0201 	orr.w	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2203      	movs	r2, #3
 80011ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0f5      	b.n	80013ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0e5      	beq.n	800119c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0202 	orr.w	r2, r2, #2
 80011de:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a74      	ldr	r2, [pc, #464]	@ (80013b8 <HAL_FDCAN_Init+0x2ac>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d103      	bne.n	80011f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011ea:	4a74      	ldr	r2, [pc, #464]	@ (80013bc <HAL_FDCAN_Init+0x2b0>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7c1b      	ldrb	r3, [r3, #16]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d108      	bne.n	800120c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699a      	ldr	r2, [r3, #24]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	e007      	b.n	800121c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	699a      	ldr	r2, [r3, #24]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800121a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7c5b      	ldrb	r3, [r3, #17]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d108      	bne.n	8001236 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	699a      	ldr	r2, [r3, #24]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001232:	619a      	str	r2, [r3, #24]
 8001234:	e007      	b.n	8001246 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699a      	ldr	r2, [r3, #24]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001244:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7c9b      	ldrb	r3, [r3, #18]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d108      	bne.n	8001260 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800125c:	619a      	str	r2, [r3, #24]
 800125e:	e007      	b.n	8001270 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800126e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001294:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0210 	bic.w	r2, r2, #16
 80012a4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d108      	bne.n	80012c0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	699a      	ldr	r2, [r3, #24]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0204 	orr.w	r2, r2, #4
 80012bc:	619a      	str	r2, [r3, #24]
 80012be:	e02c      	b.n	800131a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d028      	beq.n	800131a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d01c      	beq.n	800130a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012de:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0210 	orr.w	r2, r2, #16
 80012ee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d110      	bne.n	800131a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699a      	ldr	r2, [r3, #24]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	619a      	str	r2, [r3, #24]
 8001308:	e007      	b.n	800131a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 0220 	orr.w	r2, r2, #32
 8001318:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	3b01      	subs	r3, #1
 8001320:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	3b01      	subs	r3, #1
 8001328:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800132a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001332:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	3b01      	subs	r3, #1
 800133c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001342:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001344:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800134e:	d115      	bne.n	800137c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001354:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135a:	3b01      	subs	r3, #1
 800135c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800135e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	3b01      	subs	r3, #1
 8001366:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001368:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001370:	3b01      	subs	r3, #1
 8001372:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001378:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800137a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f9ae 	bl	80016f4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40006400 	.word	0x40006400
 80013bc:	40006500 	.word	0x40006500

080013c0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ce:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013dc:	4013      	ands	r3, r2
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013f4:	4013      	ands	r3, r2
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140c:	4013      	ands	r3, r2
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001416:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800141a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001422:	6a3a      	ldr	r2, [r7, #32]
 8001424:	4013      	ands	r3, r2
 8001426:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800142e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001432:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	4013      	ands	r3, r2
 800143e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001446:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800144e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2240      	movs	r2, #64	@ 0x40
 800146a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f921 	bl	80016b4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d019      	beq.n	80014b0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d014      	beq.n	80014b0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800148e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80014a8:	6939      	ldr	r1, [r7, #16]
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f8e3 	bl	8001676 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80014b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80014be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f8a2 	bl	800160a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80014c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d007      	beq.n	80014dc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80014d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f8a2 	bl	8001620 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80014ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f8a2 	bl	8001636 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f89b 	bl	800164c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151c:	2b00      	cmp	r3, #0
 800151e:	d018      	beq.n	8001552 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001526:	2b00      	cmp	r3, #0
 8001528:	d013      	beq.n	8001552 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001532:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2280      	movs	r2, #128	@ 0x80
 8001548:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800154a:	68f9      	ldr	r1, [r7, #12]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f887 	bl	8001660 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00c      	beq.n	8001576 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800156e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f88b 	bl	800168c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00c      	beq.n	800159a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001592:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f883 	bl	80016a0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00f      	beq.n	80015c4 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00a      	beq.n	80015c4 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80015d2:	69f9      	ldr	r1, [r7, #28]
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f881 	bl	80016dc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f863 	bl	80016c8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	@ 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80016fe:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a2f      	ldr	r2, [pc, #188]	@ (80017c4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d103      	bne.n	8001712 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001710:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a2c      	ldr	r2, [pc, #176]	@ (80017c8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d103      	bne.n	8001724 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001722:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001732:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173a:	041a      	lsls	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001758:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001760:	061a      	lsls	r2, r3, #24
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e005      	b.n	80017a6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3304      	adds	r3, #4
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3f3      	bcc.n	800179a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	4000a400 	.word	0x4000a400
 80017c4:	40006800 	.word	0x40006800
 80017c8:	40006c00 	.word	0x40006c00

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017da:	e15a      	b.n	8001a92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 814c 	beq.w	8001a8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d005      	beq.n	800180c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001808:	2b02      	cmp	r3, #2
 800180a:	d130      	bne.n	800186e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001842:	2201      	movs	r2, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	f003 0201 	and.w	r2, r3, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b03      	cmp	r3, #3
 8001878:	d017      	beq.n	80018aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d123      	bne.n	80018fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	6939      	ldr	r1, [r7, #16]
 80018fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0203 	and.w	r2, r3, #3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80a6 	beq.w	8001a8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001940:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab0 <HAL_GPIO_Init+0x2e4>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001944:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab0 <HAL_GPIO_Init+0x2e4>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6613      	str	r3, [r2, #96]	@ 0x60
 800194c:	4b58      	ldr	r3, [pc, #352]	@ (8001ab0 <HAL_GPIO_Init+0x2e4>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001958:	4a56      	ldr	r2, [pc, #344]	@ (8001ab4 <HAL_GPIO_Init+0x2e8>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001982:	d01f      	beq.n	80019c4 <HAL_GPIO_Init+0x1f8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab8 <HAL_GPIO_Init+0x2ec>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d019      	beq.n	80019c0 <HAL_GPIO_Init+0x1f4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4b      	ldr	r2, [pc, #300]	@ (8001abc <HAL_GPIO_Init+0x2f0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d013      	beq.n	80019bc <HAL_GPIO_Init+0x1f0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac0 <HAL_GPIO_Init+0x2f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1ec>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a49      	ldr	r2, [pc, #292]	@ (8001ac4 <HAL_GPIO_Init+0x2f8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1e8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a48      	ldr	r2, [pc, #288]	@ (8001ac8 <HAL_GPIO_Init+0x2fc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1e4>
 80019ac:	2305      	movs	r3, #5
 80019ae:	e00a      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019b0:	2306      	movs	r3, #6
 80019b2:	e008      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e004      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019bc:	2302      	movs	r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_GPIO_Init+0x1fa>
 80019c4:	2300      	movs	r3, #0
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d6:	4937      	ldr	r1, [pc, #220]	@ (8001ab4 <HAL_GPIO_Init+0x2e8>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e4:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <HAL_GPIO_Init+0x300>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a08:	4a30      	ldr	r2, [pc, #192]	@ (8001acc <HAL_GPIO_Init+0x300>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001acc <HAL_GPIO_Init+0x300>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a32:	4a26      	ldr	r2, [pc, #152]	@ (8001acc <HAL_GPIO_Init+0x300>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a38:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <HAL_GPIO_Init+0x300>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <HAL_GPIO_Init+0x300>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <HAL_GPIO_Init+0x300>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a86:	4a11      	ldr	r2, [pc, #68]	@ (8001acc <HAL_GPIO_Init+0x300>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f ae9d 	bne.w	80017dc <HAL_GPIO_Init+0x10>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	48000c00 	.word	0x48000c00
 8001ac4:	48001000 	.word	0x48001000
 8001ac8:	48001400 	.word	0x48001400
 8001acc:	40010400 	.word	0x40010400

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b16:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f806 	bl	8001b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d141      	bne.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b56:	4b4b      	ldr	r3, [pc, #300]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b62:	d131      	bne.n	8001bc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b64:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b6a:	4a46      	ldr	r2, [pc, #280]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b74:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b7c:	4a41      	ldr	r2, [pc, #260]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b84:	4b40      	ldr	r3, [pc, #256]	@ (8001c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2232      	movs	r2, #50	@ 0x32
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	0c9b      	lsrs	r3, r3, #18
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9a:	e002      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bae:	d102      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f2      	bne.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb6:	4b33      	ldr	r3, [pc, #204]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc2:	d158      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e057      	b.n	8001c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bce:	4a2d      	ldr	r2, [pc, #180]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bd8:	e04d      	b.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001be0:	d141      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be2:	4b28      	ldr	r3, [pc, #160]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bee:	d131      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf0:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bf6:	4a23      	ldr	r2, [pc, #140]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c00:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c08:	4a1e      	ldr	r2, [pc, #120]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2232      	movs	r2, #50	@ 0x32
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	0c9b      	lsrs	r3, r3, #18
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c26:	e002      	b.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c3a:	d102      	bne.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f2      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c4e:	d112      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e011      	b.n	8001c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c64:	e007      	b.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c6e:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	40007000 	.word	0x40007000
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	431bde83 	.word	0x431bde83

08001c90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9e:	6093      	str	r3, [r2, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40007000 	.word	0x40007000

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e2fe      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d075      	beq.n	8001dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cce:	4b97      	ldr	r3, [pc, #604]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd8:	4b94      	ldr	r3, [pc, #592]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_OscConfig+0x3e>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x44>
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d10b      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d05b      	beq.n	8001db8 <HAL_RCC_OscConfig+0x108>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d157      	bne.n	8001db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e2d9      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x74>
 8001d16:	4b85      	ldr	r3, [pc, #532]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a84      	ldr	r2, [pc, #528]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xb0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x98>
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xb0>
 8001d48:	4b78      	ldr	r3, [pc, #480]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a77      	ldr	r2, [pc, #476]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b75      	ldr	r3, [pc, #468]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a74      	ldr	r2, [pc, #464]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f8b4 	bl	8000ed4 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff f8b0 	bl	8000ed4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e29e      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d82:	4b6a      	ldr	r3, [pc, #424]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xc0>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff f8a0 	bl	8000ed4 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff f89c 	bl	8000ed4 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	@ 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e28a      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001daa:	4b60      	ldr	r3, [pc, #384]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0xe8>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d075      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc6:	4b59      	ldr	r3, [pc, #356]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd0:	4b56      	ldr	r3, [pc, #344]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x136>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_OscConfig+0x13c>
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11f      	bne.n	8001e2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dec:	4b4f      	ldr	r3, [pc, #316]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_OscConfig+0x154>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e25d      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b49      	ldr	r3, [pc, #292]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	4946      	ldr	r1, [pc, #280]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e18:	4b45      	ldr	r3, [pc, #276]	@ (8001f30 <HAL_RCC_OscConfig+0x280>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f80d 	bl	8000e3c <HAL_InitTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d043      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e249      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b3d      	ldr	r3, [pc, #244]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3c      	ldr	r2, [pc, #240]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff f848 	bl	8000ed4 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff f844 	bl	8000ed4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e232      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5a:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b31      	ldr	r3, [pc, #196]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	492d      	ldr	r1, [pc, #180]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
 8001e7a:	e01a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2a      	ldr	r2, [pc, #168]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001e82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f824 	bl	8000ed4 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff f820 	bl	8000ed4 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e20e      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea2:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x1e0>
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d041      	beq.n	8001f42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ecc:	4a17      	ldr	r2, [pc, #92]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fffd 	bl	8000ed4 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ede:	f7fe fff9 	bl	8000ed4 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1e7      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0ef      	beq.n	8001ede <HAL_RCC_OscConfig+0x22e>
 8001efe:	e020      	b.n	8001f42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f06:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <HAL_RCC_OscConfig+0x27c>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7fe ffe0 	bl	8000ed4 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f16:	e00d      	b.n	8001f34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7fe ffdc 	bl	8000ed4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d906      	bls.n	8001f34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1ca      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f34:	4b8c      	ldr	r3, [pc, #560]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ea      	bne.n	8001f18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80a6 	beq.w	800209c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f54:	4b84      	ldr	r3, [pc, #528]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2b4>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x2b6>
 8001f64:	2300      	movs	r3, #0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00d      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f76:	4b7c      	ldr	r3, [pc, #496]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f86:	4b79      	ldr	r3, [pc, #484]	@ (800216c <HAL_RCC_OscConfig+0x4bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f92:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCC_OscConfig+0x4bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	@ (800216c <HAL_RCC_OscConfig+0x4bc>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe ff99 	bl	8000ed4 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7fe ff95 	bl	8000ed4 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e183      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	@ (800216c <HAL_RCC_OscConfig+0x4bc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_RCC_OscConfig+0x32e>
 8001fcc:	4b66      	ldr	r3, [pc, #408]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	4a65      	ldr	r2, [pc, #404]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fdc:	e024      	b.n	8002028 <HAL_RCC_OscConfig+0x378>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d110      	bne.n	8002008 <HAL_RCC_OscConfig+0x358>
 8001fe6:	4b60      	ldr	r3, [pc, #384]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fec:	4a5e      	ldr	r2, [pc, #376]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002006:	e00f      	b.n	8002028 <HAL_RCC_OscConfig+0x378>
 8002008:	4b57      	ldr	r3, [pc, #348]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200e:	4a56      	ldr	r2, [pc, #344]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002018:	4b53      	ldr	r3, [pc, #332]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201e:	4a52      	ldr	r2, [pc, #328]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d016      	beq.n	800205e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe ff50 	bl	8000ed4 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe ff4c 	bl	8000ed4 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e138      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204e:	4b46      	ldr	r3, [pc, #280]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ed      	beq.n	8002038 <HAL_RCC_OscConfig+0x388>
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7fe ff39 	bl	8000ed4 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7fe ff35 	bl	8000ed4 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e121      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800207c:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ed      	bne.n	8002066 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800208a:	7ffb      	ldrb	r3, [r7, #31]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b35      	ldr	r3, [pc, #212]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	4a34      	ldr	r2, [pc, #208]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800209a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d03c      	beq.n	8002122 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01c      	beq.n	80020ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7fe ff08 	bl	8000ed4 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c8:	f7fe ff04 	bl	8000ed4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0f2      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020da:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ef      	beq.n	80020c8 <HAL_RCC_OscConfig+0x418>
 80020e8:	e01b      	b.n	8002122 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7fe feeb 	bl	8000ed4 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002102:	f7fe fee7 	bl	8000ed4 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0d5      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ef      	bne.n	8002102 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80c9 	beq.w	80022be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212c:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b0c      	cmp	r3, #12
 8002136:	f000 8083 	beq.w	8002240 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d15e      	bne.n	8002200 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a08      	ldr	r2, [pc, #32]	@ (8002168 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe fec1 	bl	8000ed4 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	e00c      	b.n	8002170 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe febd 	bl	8000ed4 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d905      	bls.n	8002170 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0ab      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b55      	ldr	r3, [pc, #340]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ec      	bne.n	8002156 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b52      	ldr	r3, [pc, #328]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b52      	ldr	r3, [pc, #328]	@ (80022cc <HAL_RCC_OscConfig+0x61c>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	4943      	ldr	r1, [pc, #268]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b41      	ldr	r3, [pc, #260]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a40      	ldr	r2, [pc, #256]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b3e      	ldr	r3, [pc, #248]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a3d      	ldr	r2, [pc, #244]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe7c 	bl	8000ed4 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fe78 	bl	8000ed4 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e066      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b35      	ldr	r3, [pc, #212]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x530>
 80021fe:	e05e      	b.n	80022be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b31      	ldr	r3, [pc, #196]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a30      	ldr	r2, [pc, #192]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fe62 	bl	8000ed4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fe5e 	bl	8000ed4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04c      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002226:	4b28      	ldr	r3, [pc, #160]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002232:	4b25      	ldr	r3, [pc, #148]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	4924      	ldr	r1, [pc, #144]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 8002238:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <HAL_RCC_OscConfig+0x620>)
 800223a:	4013      	ands	r3, r2
 800223c:	60cb      	str	r3, [r1, #12]
 800223e:	e03e      	b.n	80022be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e039      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800224c:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <HAL_RCC_OscConfig+0x618>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	429a      	cmp	r2, r3
 800225e:	d12c      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	3b01      	subs	r3, #1
 800226c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d123      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d11b      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d113      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d109      	bne.n	80022ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	3b01      	subs	r3, #1
 80022b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	019f800c 	.word	0x019f800c
 80022d0:	feeefffc 	.word	0xfeeefffc

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e11e      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b91      	ldr	r3, [pc, #580]	@ (8002534 <HAL_RCC_ClockConfig+0x260>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d910      	bls.n	800231c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b8e      	ldr	r3, [pc, #568]	@ (8002534 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 020f 	bic.w	r2, r3, #15
 8002302:	498c      	ldr	r1, [pc, #560]	@ (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b8a      	ldr	r3, [pc, #552]	@ (8002534 <HAL_RCC_ClockConfig+0x260>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e106      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d073      	beq.n	8002410 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d129      	bne.n	8002384 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002330:	4b81      	ldr	r3, [pc, #516]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0f4      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002340:	f000 f99e 	bl	8002680 <RCC_GetSysClockFreqFromPLLSource>
 8002344:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4a7c      	ldr	r2, [pc, #496]	@ (800253c <HAL_RCC_ClockConfig+0x268>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d93f      	bls.n	80023ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800234e:	4b7a      	ldr	r3, [pc, #488]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	2b00      	cmp	r3, #0
 8002364:	d033      	beq.n	80023ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d12f      	bne.n	80023ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800236e:	4b72      	ldr	r3, [pc, #456]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002376:	4a70      	ldr	r2, [pc, #448]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800237c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e024      	b.n	80023ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d107      	bne.n	800239c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800238c:	4b6a      	ldr	r3, [pc, #424]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0c6      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	4b66      	ldr	r3, [pc, #408]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0be      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023ac:	f000 f8ce 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4a61      	ldr	r2, [pc, #388]	@ (800253c <HAL_RCC_ClockConfig+0x268>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d909      	bls.n	80023ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 80023c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4957      	ldr	r1, [pc, #348]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e0:	f7fe fd78 	bl	8000ed4 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe fd74 	bl	8000ed4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e095      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d023      	beq.n	8002464 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002428:	4b43      	ldr	r3, [pc, #268]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a42      	ldr	r2, [pc, #264]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 800242e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002432:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002440:	4b3d      	ldr	r3, [pc, #244]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002448:	4a3b      	ldr	r2, [pc, #236]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 800244a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800244e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b39      	ldr	r3, [pc, #228]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4936      	ldr	r1, [pc, #216]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
 8002462:	e008      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b80      	cmp	r3, #128	@ 0x80
 8002468:	d105      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800246a:	4b33      	ldr	r3, [pc, #204]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4a32      	ldr	r2, [pc, #200]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002470:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002474:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002476:	4b2f      	ldr	r3, [pc, #188]	@ (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d21d      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002484:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 020f 	bic.w	r2, r3, #15
 800248c:	4929      	ldr	r1, [pc, #164]	@ (8002534 <HAL_RCC_ClockConfig+0x260>)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002494:	f7fe fd1e 	bl	8000ed4 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7fe fd1a 	bl	8000ed4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e03b      	b.n	800252a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <HAL_RCC_ClockConfig+0x260>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1ed      	bne.n	800249c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4917      	ldr	r1, [pc, #92]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ea:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490f      	ldr	r1, [pc, #60]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024fe:	f000 f825 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_RCC_ClockConfig+0x264>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490c      	ldr	r1, [pc, #48]	@ (8002540 <HAL_RCC_ClockConfig+0x26c>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <HAL_RCC_ClockConfig+0x270>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <HAL_RCC_ClockConfig+0x274>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fc8a 	bl	8000e3c <HAL_InitTick>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	04c4b400 	.word	0x04c4b400
 8002540:	08004a44 	.word	0x08004a44
 8002544:	20000000 	.word	0x20000000
 8002548:	20000004 	.word	0x20000004

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002552:	4b2c      	ldr	r3, [pc, #176]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d102      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800255e:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e047      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002564:	4b27      	ldr	r3, [pc, #156]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d102      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002570:	4b26      	ldr	r3, [pc, #152]	@ (800260c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e03e      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002576:	4b23      	ldr	r3, [pc, #140]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d136      	bne.n	80025f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002582:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3301      	adds	r3, #1
 8002598:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d10c      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a0:	4a1a      	ldr	r2, [pc, #104]	@ (800260c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	4a16      	ldr	r2, [pc, #88]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025aa:	68d2      	ldr	r2, [r2, #12]
 80025ac:	0a12      	lsrs	r2, r2, #8
 80025ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	617b      	str	r3, [r7, #20]
      break;
 80025b8:	e00c      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ba:	4a13      	ldr	r2, [pc, #76]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	4a10      	ldr	r2, [pc, #64]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c4:	68d2      	ldr	r2, [r2, #12]
 80025c6:	0a12      	lsrs	r2, r2, #8
 80025c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
      break;
 80025d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0e5b      	lsrs	r3, r3, #25
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	3301      	adds	r3, #1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e001      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025f4:	693b      	ldr	r3, [r7, #16]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	00f42400 	.word	0x00f42400
 800260c:	016e3600 	.word	0x016e3600

08002610 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <HAL_RCC_GetHCLKFreq+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800262c:	f7ff fff0 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4904      	ldr	r1, [pc, #16]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	08004a54 	.word	0x08004a54

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002658:	f7ff ffda 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0adb      	lsrs	r3, r3, #11
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4904      	ldr	r1, [pc, #16]	@ (800267c <HAL_RCC_GetPCLK2Freq+0x28>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	08004a54 	.word	0x08004a54

08002680 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002686:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002690:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3301      	adds	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d10c      	bne.n	80026be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a4:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	4a14      	ldr	r2, [pc, #80]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ae:	68d2      	ldr	r2, [r2, #12]
 80026b0:	0a12      	lsrs	r2, r2, #8
 80026b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
    break;
 80026bc:	e00c      	b.n	80026d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c8:	68d2      	ldr	r2, [r2, #12]
 80026ca:	0a12      	lsrs	r2, r2, #8
 80026cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
    break;
 80026d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0e5b      	lsrs	r3, r3, #25
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	3301      	adds	r3, #1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40021000 	.word	0x40021000
 8002704:	016e3600 	.word	0x016e3600
 8002708:	00f42400 	.word	0x00f42400

0800270c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002714:	2300      	movs	r3, #0
 8002716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002718:	2300      	movs	r3, #0
 800271a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8098 	beq.w	800285a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b43      	ldr	r3, [pc, #268]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b40      	ldr	r3, [pc, #256]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	4a3f      	ldr	r2, [pc, #252]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002744:	6593      	str	r3, [r2, #88]	@ 0x58
 8002746:	4b3d      	ldr	r3, [pc, #244]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002756:	4b3a      	ldr	r3, [pc, #232]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a39      	ldr	r2, [pc, #228]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002762:	f7fe fbb7 	bl	8000ed4 <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002768:	e009      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe fbb3 	bl	8000ed4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d902      	bls.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	74fb      	strb	r3, [r7, #19]
        break;
 800277c:	e005      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277e:	4b30      	ldr	r3, [pc, #192]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ef      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d159      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002790:	4b2a      	ldr	r3, [pc, #168]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800279a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01e      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d019      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027ac:	4b23      	ldr	r3, [pc, #140]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b8:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027be:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c8:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027d8:	4a18      	ldr	r2, [pc, #96]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fb73 	bl	8000ed4 <HAL_GetTick>
 80027ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f0:	e00b      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fb6f 	bl	8000ed4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d902      	bls.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	74fb      	strb	r3, [r7, #19]
            break;
 8002808:	e006      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280a:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ec      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10b      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282c:	4903      	ldr	r1, [pc, #12]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002834:	e008      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	74bb      	strb	r3, [r7, #18]
 800283a:	e005      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800283c:	40021000 	.word	0x40021000
 8002840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002848:	7c7b      	ldrb	r3, [r7, #17]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4ba7      	ldr	r3, [pc, #668]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	4aa6      	ldr	r2, [pc, #664]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002858:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002866:	4ba1      	ldr	r3, [pc, #644]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286c:	f023 0203 	bic.w	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	499d      	ldr	r1, [pc, #628]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002888:	4b98      	ldr	r3, [pc, #608]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f023 020c 	bic.w	r2, r3, #12
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4995      	ldr	r1, [pc, #596]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028aa:	4b90      	ldr	r3, [pc, #576]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	498c      	ldr	r1, [pc, #560]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028cc:	4b87      	ldr	r3, [pc, #540]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4984      	ldr	r1, [pc, #528]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	497b      	ldr	r1, [pc, #492]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002910:	4b76      	ldr	r3, [pc, #472]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	4973      	ldr	r1, [pc, #460]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002932:	4b6e      	ldr	r3, [pc, #440]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002938:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	496a      	ldr	r1, [pc, #424]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002954:	4b65      	ldr	r3, [pc, #404]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4962      	ldr	r1, [pc, #392]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002976:	4b5d      	ldr	r3, [pc, #372]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	4959      	ldr	r1, [pc, #356]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002998:	4b54      	ldr	r3, [pc, #336]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a6:	4951      	ldr	r1, [pc, #324]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ba:	4b4c      	ldr	r3, [pc, #304]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	4948      	ldr	r1, [pc, #288]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029dc:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4940      	ldr	r1, [pc, #256]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029fa:	d105      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a3a      	ldr	r2, [pc, #232]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d015      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a14:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	4932      	ldr	r1, [pc, #200]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a32:	d105      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a2c      	ldr	r2, [pc, #176]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a4c:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5a:	4924      	ldr	r1, [pc, #144]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a1e      	ldr	r2, [pc, #120]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a92:	4916      	ldr	r1, [pc, #88]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a10      	ldr	r2, [pc, #64]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d019      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4908      	ldr	r1, [pc, #32]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ada:	d109      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a02      	ldr	r2, [pc, #8]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
 8002ae8:	e002      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002afc:	4b29      	ldr	r3, [pc, #164]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	4926      	ldr	r1, [pc, #152]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a20      	ldr	r2, [pc, #128]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b42:	4918      	ldr	r1, [pc, #96]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b52:	d105      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b54:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7a:	490a      	ldr	r1, [pc, #40]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a04      	ldr	r2, [pc, #16]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e09d      	b.n	8002cf6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bca:	d009      	beq.n	8002be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
 8002bd2:	e005      	b.n	8002be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fd ffb4 	bl	8000b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c20:	d902      	bls.n	8002c28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e002      	b.n	8002c2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c36:	d007      	beq.n	8002c48 <HAL_SPI_Init+0xa0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c40:	d002      	beq.n	8002c48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	ea42 0103 	orr.w	r1, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	f003 0204 	and.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002cc4:	ea42 0103 	orr.w	r1, r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e049      	b.n	8002da4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fd ff81 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f000 fb21 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e049      	b.n	8002e52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fd ff0a 	bl	8000bec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f000 faca 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01b      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f06f 0202 	mvn.w	r2, #2
 8002e8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa4f 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8002eaa:	e005      	b.n	8002eb8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa41 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa52 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01b      	beq.n	8002f0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0204 	mvn.w	r2, #4
 8002eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fa29 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8002ef6:	e005      	b.n	8002f04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa1b 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa2c 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01b      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f06f 0208 	mvn.w	r2, #8
 8002f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fa03 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8002f42:	e005      	b.n	8002f50 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f9f5 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fa06 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01b      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f06f 0210 	mvn.w	r2, #16
 8002f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2208      	movs	r2, #8
 8002f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9dd 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8002f8e:	e005      	b.n	8002f9c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f9cf 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f9e0 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00c      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f06f 0201 	mvn.w	r2, #1
 8002fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f9ad 	bl	8003320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fe46 	bl	8003c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fe3e 	bl	8003c94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f99a 	bl	8003370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0220 	mvn.w	r2, #32
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fe06 	bl	8003c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00c      	beq.n	8003084 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fe12 	bl	8003ca8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fe0a 	bl	8003cbc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fe02 	bl	8003cd0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fdfa 	bl	8003ce4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0ff      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b14      	cmp	r3, #20
 8003122:	f200 80f0 	bhi.w	8003306 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003126:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003181 	.word	0x08003181
 8003130:	08003307 	.word	0x08003307
 8003134:	08003307 	.word	0x08003307
 8003138:	08003307 	.word	0x08003307
 800313c:	080031c1 	.word	0x080031c1
 8003140:	08003307 	.word	0x08003307
 8003144:	08003307 	.word	0x08003307
 8003148:	08003307 	.word	0x08003307
 800314c:	08003203 	.word	0x08003203
 8003150:	08003307 	.word	0x08003307
 8003154:	08003307 	.word	0x08003307
 8003158:	08003307 	.word	0x08003307
 800315c:	08003243 	.word	0x08003243
 8003160:	08003307 	.word	0x08003307
 8003164:	08003307 	.word	0x08003307
 8003168:	08003307 	.word	0x08003307
 800316c:	08003285 	.word	0x08003285
 8003170:	08003307 	.word	0x08003307
 8003174:	08003307 	.word	0x08003307
 8003178:	08003307 	.word	0x08003307
 800317c:	080032c5 	.word	0x080032c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f9b0 	bl	80034ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6999      	ldr	r1, [r3, #24]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	619a      	str	r2, [r3, #24]
      break;
 80031be:	e0a5      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fa2a 	bl	8003620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6999      	ldr	r1, [r3, #24]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
      break;
 8003200:	e084      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fa9d 	bl	8003748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0208 	orr.w	r2, r2, #8
 800321c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0204 	bic.w	r2, r2, #4
 800322c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
      break;
 8003240:	e064      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fb0f 	bl	800386c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	61da      	str	r2, [r3, #28]
      break;
 8003282:	e043      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fb82 	bl	8003994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0208 	orr.w	r2, r2, #8
 800329e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032c2:	e023      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fbcc 	bl	8003a68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003304:	e002      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	75fb      	strb	r3, [r7, #23]
      break;
 800330a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003314:	7dfb      	ldrb	r3, [r7, #23]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop

08003320 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a4c      	ldr	r2, [pc, #304]	@ (80034c8 <TIM_Base_SetConfig+0x144>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d017      	beq.n	80033cc <TIM_Base_SetConfig+0x48>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a2:	d013      	beq.n	80033cc <TIM_Base_SetConfig+0x48>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a49      	ldr	r2, [pc, #292]	@ (80034cc <TIM_Base_SetConfig+0x148>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x48>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a48      	ldr	r2, [pc, #288]	@ (80034d0 <TIM_Base_SetConfig+0x14c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x48>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a47      	ldr	r2, [pc, #284]	@ (80034d4 <TIM_Base_SetConfig+0x150>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x48>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a46      	ldr	r2, [pc, #280]	@ (80034d8 <TIM_Base_SetConfig+0x154>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x48>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a45      	ldr	r2, [pc, #276]	@ (80034dc <TIM_Base_SetConfig+0x158>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a39      	ldr	r2, [pc, #228]	@ (80034c8 <TIM_Base_SetConfig+0x144>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d023      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ec:	d01f      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a36      	ldr	r2, [pc, #216]	@ (80034cc <TIM_Base_SetConfig+0x148>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01b      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a35      	ldr	r2, [pc, #212]	@ (80034d0 <TIM_Base_SetConfig+0x14c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d017      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a34      	ldr	r2, [pc, #208]	@ (80034d4 <TIM_Base_SetConfig+0x150>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a33      	ldr	r2, [pc, #204]	@ (80034d8 <TIM_Base_SetConfig+0x154>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00f      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a33      	ldr	r2, [pc, #204]	@ (80034e0 <TIM_Base_SetConfig+0x15c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00b      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a32      	ldr	r2, [pc, #200]	@ (80034e4 <TIM_Base_SetConfig+0x160>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a31      	ldr	r2, [pc, #196]	@ (80034e8 <TIM_Base_SetConfig+0x164>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_Base_SetConfig+0xaa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2c      	ldr	r2, [pc, #176]	@ (80034dc <TIM_Base_SetConfig+0x158>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a18      	ldr	r2, [pc, #96]	@ (80034c8 <TIM_Base_SetConfig+0x144>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <TIM_Base_SetConfig+0x110>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <TIM_Base_SetConfig+0x154>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00f      	beq.n	8003494 <TIM_Base_SetConfig+0x110>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <TIM_Base_SetConfig+0x15c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0x110>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <TIM_Base_SetConfig+0x160>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x110>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a18      	ldr	r2, [pc, #96]	@ (80034e8 <TIM_Base_SetConfig+0x164>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x110>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a13      	ldr	r2, [pc, #76]	@ (80034dc <TIM_Base_SetConfig+0x158>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d103      	bne.n	800349c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f023 0201 	bic.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	611a      	str	r2, [r3, #16]
  }
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40015000 	.word	0x40015000
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800

080034ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f023 0201 	bic.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f023 0302 	bic.w	r3, r3, #2
 8003538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a30      	ldr	r2, [pc, #192]	@ (8003608 <TIM_OC1_SetConfig+0x11c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <TIM_OC1_SetConfig+0x88>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a2f      	ldr	r2, [pc, #188]	@ (800360c <TIM_OC1_SetConfig+0x120>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00f      	beq.n	8003574 <TIM_OC1_SetConfig+0x88>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a2e      	ldr	r2, [pc, #184]	@ (8003610 <TIM_OC1_SetConfig+0x124>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00b      	beq.n	8003574 <TIM_OC1_SetConfig+0x88>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a2d      	ldr	r2, [pc, #180]	@ (8003614 <TIM_OC1_SetConfig+0x128>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <TIM_OC1_SetConfig+0x88>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a2c      	ldr	r2, [pc, #176]	@ (8003618 <TIM_OC1_SetConfig+0x12c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_OC1_SetConfig+0x88>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a2b      	ldr	r2, [pc, #172]	@ (800361c <TIM_OC1_SetConfig+0x130>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10c      	bne.n	800358e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0308 	bic.w	r3, r3, #8
 800357a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <TIM_OC1_SetConfig+0x11c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <TIM_OC1_SetConfig+0xd2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1c      	ldr	r2, [pc, #112]	@ (800360c <TIM_OC1_SetConfig+0x120>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00f      	beq.n	80035be <TIM_OC1_SetConfig+0xd2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <TIM_OC1_SetConfig+0x124>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_OC1_SetConfig+0xd2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003614 <TIM_OC1_SetConfig+0x128>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_OC1_SetConfig+0xd2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a19      	ldr	r2, [pc, #100]	@ (8003618 <TIM_OC1_SetConfig+0x12c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_OC1_SetConfig+0xd2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a18      	ldr	r2, [pc, #96]	@ (800361c <TIM_OC1_SetConfig+0x130>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d111      	bne.n	80035e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	621a      	str	r2, [r3, #32]
}
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40013400 	.word	0x40013400
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800
 800361c:	40015000 	.word	0x40015000

08003620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f023 0210 	bic.w	r2, r3, #16
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0320 	bic.w	r3, r3, #32
 800366e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a2c      	ldr	r2, [pc, #176]	@ (8003730 <TIM_OC2_SetConfig+0x110>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_OC2_SetConfig+0x74>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <TIM_OC2_SetConfig+0x114>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_OC2_SetConfig+0x74>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a2a      	ldr	r2, [pc, #168]	@ (8003738 <TIM_OC2_SetConfig+0x118>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d10d      	bne.n	80036b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800369a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <TIM_OC2_SetConfig+0x110>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <TIM_OC2_SetConfig+0xc0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003734 <TIM_OC2_SetConfig+0x114>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00f      	beq.n	80036e0 <TIM_OC2_SetConfig+0xc0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <TIM_OC2_SetConfig+0x11c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_OC2_SetConfig+0xc0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <TIM_OC2_SetConfig+0x120>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_OC2_SetConfig+0xc0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003744 <TIM_OC2_SetConfig+0x124>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_OC2_SetConfig+0xc0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <TIM_OC2_SetConfig+0x118>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d113      	bne.n	8003708 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40013400 	.word	0x40013400
 8003738:	40015000 	.word	0x40015000
 800373c:	40014000 	.word	0x40014000
 8003740:	40014400 	.word	0x40014400
 8003744:	40014800 	.word	0x40014800

08003748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0303 	bic.w	r3, r3, #3
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003854 <TIM_OC3_SetConfig+0x10c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <TIM_OC3_SetConfig+0x72>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003858 <TIM_OC3_SetConfig+0x110>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_OC3_SetConfig+0x72>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a29      	ldr	r2, [pc, #164]	@ (800385c <TIM_OC3_SetConfig+0x114>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10d      	bne.n	80037d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <TIM_OC3_SetConfig+0x10c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <TIM_OC3_SetConfig+0xbe>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003858 <TIM_OC3_SetConfig+0x110>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00f      	beq.n	8003806 <TIM_OC3_SetConfig+0xbe>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <TIM_OC3_SetConfig+0x118>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00b      	beq.n	8003806 <TIM_OC3_SetConfig+0xbe>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <TIM_OC3_SetConfig+0x11c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <TIM_OC3_SetConfig+0xbe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003868 <TIM_OC3_SetConfig+0x120>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_OC3_SetConfig+0xbe>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a16      	ldr	r2, [pc, #88]	@ (800385c <TIM_OC3_SetConfig+0x114>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d113      	bne.n	800382e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800380c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40013400 	.word	0x40013400
 800385c:	40015000 	.word	0x40015000
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800

0800386c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	031b      	lsls	r3, r3, #12
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a2c      	ldr	r2, [pc, #176]	@ (800397c <TIM_OC4_SetConfig+0x110>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_OC4_SetConfig+0x74>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <TIM_OC4_SetConfig+0x114>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_OC4_SetConfig+0x74>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a2a      	ldr	r2, [pc, #168]	@ (8003984 <TIM_OC4_SetConfig+0x118>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10d      	bne.n	80038fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	031b      	lsls	r3, r3, #12
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a1f      	ldr	r2, [pc, #124]	@ (800397c <TIM_OC4_SetConfig+0x110>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d013      	beq.n	800392c <TIM_OC4_SetConfig+0xc0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a1e      	ldr	r2, [pc, #120]	@ (8003980 <TIM_OC4_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00f      	beq.n	800392c <TIM_OC4_SetConfig+0xc0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <TIM_OC4_SetConfig+0x11c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00b      	beq.n	800392c <TIM_OC4_SetConfig+0xc0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <TIM_OC4_SetConfig+0x120>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_OC4_SetConfig+0xc0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <TIM_OC4_SetConfig+0x124>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_OC4_SetConfig+0xc0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a17      	ldr	r2, [pc, #92]	@ (8003984 <TIM_OC4_SetConfig+0x118>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d113      	bne.n	8003954 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003932:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800393a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40013400 	.word	0x40013400
 8003984:	40015000 	.word	0x40015000
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800

08003994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a19      	ldr	r2, [pc, #100]	@ (8003a50 <TIM_OC5_SetConfig+0xbc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <TIM_OC5_SetConfig+0x82>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <TIM_OC5_SetConfig+0xc0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <TIM_OC5_SetConfig+0x82>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a17      	ldr	r2, [pc, #92]	@ (8003a58 <TIM_OC5_SetConfig+0xc4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_OC5_SetConfig+0x82>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a16      	ldr	r2, [pc, #88]	@ (8003a5c <TIM_OC5_SetConfig+0xc8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_OC5_SetConfig+0x82>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a15      	ldr	r2, [pc, #84]	@ (8003a60 <TIM_OC5_SetConfig+0xcc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_OC5_SetConfig+0x82>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a14      	ldr	r2, [pc, #80]	@ (8003a64 <TIM_OC5_SetConfig+0xd0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d109      	bne.n	8003a2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	621a      	str	r2, [r3, #32]
}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40013400 	.word	0x40013400
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800
 8003a64:	40015000 	.word	0x40015000

08003a68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	051b      	lsls	r3, r3, #20
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a1a      	ldr	r2, [pc, #104]	@ (8003b28 <TIM_OC6_SetConfig+0xc0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <TIM_OC6_SetConfig+0x84>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a19      	ldr	r2, [pc, #100]	@ (8003b2c <TIM_OC6_SetConfig+0xc4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00f      	beq.n	8003aec <TIM_OC6_SetConfig+0x84>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a18      	ldr	r2, [pc, #96]	@ (8003b30 <TIM_OC6_SetConfig+0xc8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00b      	beq.n	8003aec <TIM_OC6_SetConfig+0x84>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	@ (8003b34 <TIM_OC6_SetConfig+0xcc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d007      	beq.n	8003aec <TIM_OC6_SetConfig+0x84>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <TIM_OC6_SetConfig+0xd0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_OC6_SetConfig+0x84>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <TIM_OC6_SetConfig+0xd4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d109      	bne.n	8003b00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	029b      	lsls	r3, r3, #10
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40013400 	.word	0x40013400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800
 8003b3c:	40015000 	.word	0x40015000

08003b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e074      	b.n	8003c42 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a34      	ldr	r2, [pc, #208]	@ (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a33      	ldr	r2, [pc, #204]	@ (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a31      	ldr	r2, [pc, #196]	@ (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d108      	bne.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a21      	ldr	r2, [pc, #132]	@ (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d022      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd8:	d01d      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1f      	ldr	r2, [pc, #124]	@ (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d018      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d009      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d004      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a11      	ldr	r2, [pc, #68]	@ (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10c      	bne.n	8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40013400 	.word	0x40013400
 8003c58:	40015000 	.word	0x40015000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40014000 	.word	0x40014000

08003c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e042      	b.n	8003d90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fc fecb 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2224      	movs	r2, #36	@ 0x24
 8003d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fb24 	bl	8004390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f825 	bl	8003d98 <UART_SetConfig>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e01b      	b.n	8003d90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fba3 	bl	80044d4 <UART_CheckIdleState>
 8003d8e:	4603      	mov	r3, r0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d9c:	b08c      	sub	sp, #48	@ 0x30
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4baa      	ldr	r3, [pc, #680]	@ (8004070 <UART_SetConfig+0x2d8>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a9f      	ldr	r2, [pc, #636]	@ (8004074 <UART_SetConfig+0x2dc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e00:	4313      	orrs	r3, r2
 8003e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003e0e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	f023 010f 	bic.w	r1, r3, #15
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a90      	ldr	r2, [pc, #576]	@ (8004078 <UART_SetConfig+0x2e0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d125      	bne.n	8003e88 <UART_SetConfig+0xf0>
 8003e3c:	4b8f      	ldr	r3, [pc, #572]	@ (800407c <UART_SetConfig+0x2e4>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d81a      	bhi.n	8003e80 <UART_SetConfig+0xe8>
 8003e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e50 <UART_SetConfig+0xb8>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e71 	.word	0x08003e71
 8003e58:	08003e69 	.word	0x08003e69
 8003e5c:	08003e79 	.word	0x08003e79
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e66:	e116      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6e:	e112      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003e70:	2304      	movs	r3, #4
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e76:	e10e      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003e78:	2308      	movs	r3, #8
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7e:	e10a      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003e80:	2310      	movs	r3, #16
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e86:	e106      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a7c      	ldr	r2, [pc, #496]	@ (8004080 <UART_SetConfig+0x2e8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d138      	bne.n	8003f04 <UART_SetConfig+0x16c>
 8003e92:	4b7a      	ldr	r3, [pc, #488]	@ (800407c <UART_SetConfig+0x2e4>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d82d      	bhi.n	8003efc <UART_SetConfig+0x164>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <UART_SetConfig+0x110>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003efd 	.word	0x08003efd
 8003eb0:	08003efd 	.word	0x08003efd
 8003eb4:	08003efd 	.word	0x08003efd
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003efd 	.word	0x08003efd
 8003ec0:	08003efd 	.word	0x08003efd
 8003ec4:	08003efd 	.word	0x08003efd
 8003ec8:	08003ee5 	.word	0x08003ee5
 8003ecc:	08003efd 	.word	0x08003efd
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003efd 	.word	0x08003efd
 8003ed8:	08003ef5 	.word	0x08003ef5
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee2:	e0d8      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eea:	e0d4      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003eec:	2304      	movs	r3, #4
 8003eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef2:	e0d0      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003ef4:	2308      	movs	r3, #8
 8003ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efa:	e0cc      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003efc:	2310      	movs	r3, #16
 8003efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f02:	e0c8      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5e      	ldr	r2, [pc, #376]	@ (8004084 <UART_SetConfig+0x2ec>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d125      	bne.n	8003f5a <UART_SetConfig+0x1c2>
 8003f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800407c <UART_SetConfig+0x2e4>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f18:	2b30      	cmp	r3, #48	@ 0x30
 8003f1a:	d016      	beq.n	8003f4a <UART_SetConfig+0x1b2>
 8003f1c:	2b30      	cmp	r3, #48	@ 0x30
 8003f1e:	d818      	bhi.n	8003f52 <UART_SetConfig+0x1ba>
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d00a      	beq.n	8003f3a <UART_SetConfig+0x1a2>
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d814      	bhi.n	8003f52 <UART_SetConfig+0x1ba>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <UART_SetConfig+0x19a>
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d008      	beq.n	8003f42 <UART_SetConfig+0x1aa>
 8003f30:	e00f      	b.n	8003f52 <UART_SetConfig+0x1ba>
 8003f32:	2300      	movs	r3, #0
 8003f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f38:	e0ad      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f40:	e0a9      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003f42:	2304      	movs	r3, #4
 8003f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f48:	e0a5      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f50:	e0a1      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003f52:	2310      	movs	r3, #16
 8003f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f58:	e09d      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8004088 <UART_SetConfig+0x2f0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d125      	bne.n	8003fb0 <UART_SetConfig+0x218>
 8003f64:	4b45      	ldr	r3, [pc, #276]	@ (800407c <UART_SetConfig+0x2e4>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f70:	d016      	beq.n	8003fa0 <UART_SetConfig+0x208>
 8003f72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f74:	d818      	bhi.n	8003fa8 <UART_SetConfig+0x210>
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d00a      	beq.n	8003f90 <UART_SetConfig+0x1f8>
 8003f7a:	2b80      	cmp	r3, #128	@ 0x80
 8003f7c:	d814      	bhi.n	8003fa8 <UART_SetConfig+0x210>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <UART_SetConfig+0x1f0>
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d008      	beq.n	8003f98 <UART_SetConfig+0x200>
 8003f86:	e00f      	b.n	8003fa8 <UART_SetConfig+0x210>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8e:	e082      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003f90:	2302      	movs	r3, #2
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f96:	e07e      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f9e:	e07a      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fa6:	e076      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fae:	e072      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a35      	ldr	r2, [pc, #212]	@ (800408c <UART_SetConfig+0x2f4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d12a      	bne.n	8004010 <UART_SetConfig+0x278>
 8003fba:	4b30      	ldr	r3, [pc, #192]	@ (800407c <UART_SetConfig+0x2e4>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc8:	d01a      	beq.n	8004000 <UART_SetConfig+0x268>
 8003fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fce:	d81b      	bhi.n	8004008 <UART_SetConfig+0x270>
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd4:	d00c      	beq.n	8003ff0 <UART_SetConfig+0x258>
 8003fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fda:	d815      	bhi.n	8004008 <UART_SetConfig+0x270>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <UART_SetConfig+0x250>
 8003fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fe4:	d008      	beq.n	8003ff8 <UART_SetConfig+0x260>
 8003fe6:	e00f      	b.n	8004008 <UART_SetConfig+0x270>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fee:	e052      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff6:	e04e      	b.n	8004096 <UART_SetConfig+0x2fe>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ffe:	e04a      	b.n	8004096 <UART_SetConfig+0x2fe>
 8004000:	2308      	movs	r3, #8
 8004002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004006:	e046      	b.n	8004096 <UART_SetConfig+0x2fe>
 8004008:	2310      	movs	r3, #16
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400e:	e042      	b.n	8004096 <UART_SetConfig+0x2fe>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <UART_SetConfig+0x2dc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d13a      	bne.n	8004090 <UART_SetConfig+0x2f8>
 800401a:	4b18      	ldr	r3, [pc, #96]	@ (800407c <UART_SetConfig+0x2e4>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004024:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004028:	d01a      	beq.n	8004060 <UART_SetConfig+0x2c8>
 800402a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800402e:	d81b      	bhi.n	8004068 <UART_SetConfig+0x2d0>
 8004030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004034:	d00c      	beq.n	8004050 <UART_SetConfig+0x2b8>
 8004036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403a:	d815      	bhi.n	8004068 <UART_SetConfig+0x2d0>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <UART_SetConfig+0x2b0>
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004044:	d008      	beq.n	8004058 <UART_SetConfig+0x2c0>
 8004046:	e00f      	b.n	8004068 <UART_SetConfig+0x2d0>
 8004048:	2300      	movs	r3, #0
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800404e:	e022      	b.n	8004096 <UART_SetConfig+0x2fe>
 8004050:	2302      	movs	r3, #2
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004056:	e01e      	b.n	8004096 <UART_SetConfig+0x2fe>
 8004058:	2304      	movs	r3, #4
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800405e:	e01a      	b.n	8004096 <UART_SetConfig+0x2fe>
 8004060:	2308      	movs	r3, #8
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004066:	e016      	b.n	8004096 <UART_SetConfig+0x2fe>
 8004068:	2310      	movs	r3, #16
 800406a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800406e:	e012      	b.n	8004096 <UART_SetConfig+0x2fe>
 8004070:	cfff69f3 	.word	0xcfff69f3
 8004074:	40008000 	.word	0x40008000
 8004078:	40013800 	.word	0x40013800
 800407c:	40021000 	.word	0x40021000
 8004080:	40004400 	.word	0x40004400
 8004084:	40004800 	.word	0x40004800
 8004088:	40004c00 	.word	0x40004c00
 800408c:	40005000 	.word	0x40005000
 8004090:	2310      	movs	r3, #16
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4aae      	ldr	r2, [pc, #696]	@ (8004354 <UART_SetConfig+0x5bc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	f040 8097 	bne.w	80041d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d823      	bhi.n	80040f2 <UART_SetConfig+0x35a>
 80040aa:	a201      	add	r2, pc, #4	@ (adr r2, 80040b0 <UART_SetConfig+0x318>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040f3 	.word	0x080040f3
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	080040e3 	.word	0x080040e3
 80040c4:	080040f3 	.word	0x080040f3
 80040c8:	080040f3 	.word	0x080040f3
 80040cc:	080040f3 	.word	0x080040f3
 80040d0:	080040eb 	.word	0x080040eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7fe faa8 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80040d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040da:	e010      	b.n	80040fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004358 <UART_SetConfig+0x5c0>)
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040e0:	e00d      	b.n	80040fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e2:	f7fe fa33 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80040e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040e8:	e009      	b.n	80040fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040f0:	e005      	b.n	80040fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8130 	beq.w	8004366 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	4a94      	ldr	r2, [pc, #592]	@ (800435c <UART_SetConfig+0x5c4>)
 800410c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004110:	461a      	mov	r2, r3
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	fbb3 f3f2 	udiv	r3, r3, r2
 8004118:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d305      	bcc.n	8004136 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	429a      	cmp	r2, r3
 8004134:	d903      	bls.n	800413e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800413c:	e113      	b.n	8004366 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	2200      	movs	r2, #0
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	60fa      	str	r2, [r7, #12]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	4a84      	ldr	r2, [pc, #528]	@ (800435c <UART_SetConfig+0x5c4>)
 800414c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004150:	b29b      	uxth	r3, r3
 8004152:	2200      	movs	r2, #0
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800415c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004160:	f7fc f85a 	bl	8000218 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	020b      	lsls	r3, r1, #8
 8004176:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800417a:	0202      	lsls	r2, r0, #8
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	6849      	ldr	r1, [r1, #4]
 8004180:	0849      	lsrs	r1, r1, #1
 8004182:	2000      	movs	r0, #0
 8004184:	460c      	mov	r4, r1
 8004186:	4605      	mov	r5, r0
 8004188:	eb12 0804 	adds.w	r8, r2, r4
 800418c:	eb43 0905 	adc.w	r9, r3, r5
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	469a      	mov	sl, r3
 8004198:	4693      	mov	fp, r2
 800419a:	4652      	mov	r2, sl
 800419c:	465b      	mov	r3, fp
 800419e:	4640      	mov	r0, r8
 80041a0:	4649      	mov	r1, r9
 80041a2:	f7fc f839 	bl	8000218 <__aeabi_uldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4613      	mov	r3, r2
 80041ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041b4:	d308      	bcc.n	80041c8 <UART_SetConfig+0x430>
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041bc:	d204      	bcs.n	80041c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a3a      	ldr	r2, [r7, #32]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	e0ce      	b.n	8004366 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041ce:	e0ca      	b.n	8004366 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041d8:	d166      	bne.n	80042a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80041da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d827      	bhi.n	8004232 <UART_SetConfig+0x49a>
 80041e2:	a201      	add	r2, pc, #4	@ (adr r2, 80041e8 <UART_SetConfig+0x450>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	08004215 	.word	0x08004215
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	08004233 	.word	0x08004233
 80041f8:	08004223 	.word	0x08004223
 80041fc:	08004233 	.word	0x08004233
 8004200:	08004233 	.word	0x08004233
 8004204:	08004233 	.word	0x08004233
 8004208:	0800422b 	.word	0x0800422b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe fa0c 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8004210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004212:	e014      	b.n	800423e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004214:	f7fe fa1e 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8004218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800421a:	e010      	b.n	800423e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800421c:	4b4e      	ldr	r3, [pc, #312]	@ (8004358 <UART_SetConfig+0x5c0>)
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004220:	e00d      	b.n	800423e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004222:	f7fe f993 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8004226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004228:	e009      	b.n	800423e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004230:	e005      	b.n	800423e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800423c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8090 	beq.w	8004366 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	4a44      	ldr	r2, [pc, #272]	@ (800435c <UART_SetConfig+0x5c4>)
 800424c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004250:	461a      	mov	r2, r3
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	fbb3 f3f2 	udiv	r3, r3, r2
 8004258:	005a      	lsls	r2, r3, #1
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	441a      	add	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d916      	bls.n	80042a0 <UART_SetConfig+0x508>
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004278:	d212      	bcs.n	80042a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f023 030f 	bic.w	r3, r3, #15
 8004282:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	b29a      	uxth	r2, r3
 8004290:	8bfb      	ldrh	r3, [r7, #30]
 8004292:	4313      	orrs	r3, r2
 8004294:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	8bfa      	ldrh	r2, [r7, #30]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	e062      	b.n	8004366 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042a6:	e05e      	b.n	8004366 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d828      	bhi.n	8004302 <UART_SetConfig+0x56a>
 80042b0:	a201      	add	r2, pc, #4	@ (adr r2, 80042b8 <UART_SetConfig+0x520>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042dd 	.word	0x080042dd
 80042bc:	080042e5 	.word	0x080042e5
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	08004303 	.word	0x08004303
 80042c8:	080042f3 	.word	0x080042f3
 80042cc:	08004303 	.word	0x08004303
 80042d0:	08004303 	.word	0x08004303
 80042d4:	08004303 	.word	0x08004303
 80042d8:	080042fb 	.word	0x080042fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042dc:	f7fe f9a4 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80042e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042e2:	e014      	b.n	800430e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e4:	f7fe f9b6 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 80042e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042ea:	e010      	b.n	800430e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <UART_SetConfig+0x5c0>)
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042f0:	e00d      	b.n	800430e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f2:	f7fe f92b 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80042f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042f8:	e009      	b.n	800430e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004300:	e005      	b.n	800430e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800430c:	bf00      	nop
    }

    if (pclk != 0U)
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d028      	beq.n	8004366 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	4a10      	ldr	r2, [pc, #64]	@ (800435c <UART_SetConfig+0x5c4>)
 800431a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800431e:	461a      	mov	r2, r3
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	fbb3 f2f2 	udiv	r2, r3, r2
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	441a      	add	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	d910      	bls.n	8004360 <UART_SetConfig+0x5c8>
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004344:	d20c      	bcs.n	8004360 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	b29a      	uxth	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60da      	str	r2, [r3, #12]
 8004350:	e009      	b.n	8004366 <UART_SetConfig+0x5ce>
 8004352:	bf00      	nop
 8004354:	40008000 	.word	0x40008000
 8004358:	00f42400 	.word	0x00f42400
 800435c:	08004a5c 	.word	0x08004a5c
      }
      else
      {
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2201      	movs	r2, #1
 800436a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2201      	movs	r2, #1
 8004372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2200      	movs	r2, #0
 800437a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004382:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004386:	4618      	mov	r0, r3
 8004388:	3730      	adds	r7, #48	@ 0x30
 800438a:	46bd      	mov	sp, r7
 800438c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800448e:	d10a      	bne.n	80044a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b098      	sub	sp, #96	@ 0x60
 80044d8:	af02      	add	r7, sp, #8
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044e4:	f7fc fcf6 	bl	8000ed4 <HAL_GetTick>
 80044e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d12f      	bne.n	8004558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004500:	2200      	movs	r2, #0
 8004502:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f88e 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d022      	beq.n	8004558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004526:	653b      	str	r3, [r7, #80]	@ 0x50
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004530:	647b      	str	r3, [r7, #68]	@ 0x44
 8004532:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800453e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e6      	bne.n	8004512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e063      	b.n	8004620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b04      	cmp	r3, #4
 8004564:	d149      	bne.n	80045fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004566:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456e:	2200      	movs	r2, #0
 8004570:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f857 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d03c      	beq.n	80045fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	623b      	str	r3, [r7, #32]
   return(result);
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30
 80045a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e6      	bne.n	8004580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3308      	adds	r3, #8
 80045b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3308      	adds	r3, #8
 80045d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d2:	61fa      	str	r2, [r7, #28]
 80045d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	617b      	str	r3, [r7, #20]
   return(result);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e5      	bne.n	80045b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e012      	b.n	8004620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3758      	adds	r7, #88	@ 0x58
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	e04f      	b.n	80046da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004640:	d04b      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fc fc47 	bl	8000ed4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e04e      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d037      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0xb2>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b80      	cmp	r3, #128	@ 0x80
 800466e:	d034      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d031      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d110      	bne.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2208      	movs	r2, #8
 800468a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f838 	bl	8004702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2208      	movs	r2, #8
 8004696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e029      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b4:	d111      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f81e 	bl	8004702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e00f      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d0a0      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004702:	b480      	push	{r7}
 8004704:	b095      	sub	sp, #84	@ 0x54
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800471e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004728:	643b      	str	r3, [r7, #64]	@ 0x40
 800472a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800472e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e6      	bne.n	800470a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	61fb      	str	r3, [r7, #28]
   return(result);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3308      	adds	r3, #8
 800475e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e3      	bne.n	800473c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d118      	bne.n	80047ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	60bb      	str	r3, [r7, #8]
   return(result);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f023 0310 	bic.w	r3, r3, #16
 8004790:	647b      	str	r3, [r7, #68]	@ 0x44
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	613b      	str	r3, [r7, #16]
   return(result);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e6      	bne.n	800477c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047c2:	bf00      	nop
 80047c4:	3754      	adds	r7, #84	@ 0x54
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e027      	b.n	8004834 <HAL_UARTEx_DisableFifoMode+0x66>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	@ 0x24
 80047f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004812:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e02d      	b.n	80048b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	@ 0x24
 8004864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f84f 	bl	8004938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e02d      	b.n	8004930 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	@ 0x24
 80048e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f811 	bl	8004938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004958:	e031      	b.n	80049be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800495a:	2308      	movs	r3, #8
 800495c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800495e:	2308      	movs	r3, #8
 8004960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	0e5b      	lsrs	r3, r3, #25
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	0f5b      	lsrs	r3, r3, #29
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004982:	7bbb      	ldrb	r3, [r7, #14]
 8004984:	7b3a      	ldrb	r2, [r7, #12]
 8004986:	4911      	ldr	r1, [pc, #68]	@ (80049cc <UARTEx_SetNbDataToProcess+0x94>)
 8004988:	5c8a      	ldrb	r2, [r1, r2]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800498e:	7b3a      	ldrb	r2, [r7, #12]
 8004990:	490f      	ldr	r1, [pc, #60]	@ (80049d0 <UARTEx_SetNbDataToProcess+0x98>)
 8004992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004994:	fb93 f3f2 	sdiv	r3, r3, r2
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	7b7a      	ldrb	r2, [r7, #13]
 80049a4:	4909      	ldr	r1, [pc, #36]	@ (80049cc <UARTEx_SetNbDataToProcess+0x94>)
 80049a6:	5c8a      	ldrb	r2, [r1, r2]
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049ac:	7b7a      	ldrb	r2, [r7, #13]
 80049ae:	4908      	ldr	r1, [pc, #32]	@ (80049d0 <UARTEx_SetNbDataToProcess+0x98>)
 80049b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	08004a74 	.word	0x08004a74
 80049d0:	08004a7c 	.word	0x08004a7c

080049d4 <memset>:
 80049d4:	4402      	add	r2, r0
 80049d6:	4603      	mov	r3, r0
 80049d8:	4293      	cmp	r3, r2
 80049da:	d100      	bne.n	80049de <memset+0xa>
 80049dc:	4770      	bx	lr
 80049de:	f803 1b01 	strb.w	r1, [r3], #1
 80049e2:	e7f9      	b.n	80049d8 <memset+0x4>

080049e4 <__libc_init_array>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4d0d      	ldr	r5, [pc, #52]	@ (8004a1c <__libc_init_array+0x38>)
 80049e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004a20 <__libc_init_array+0x3c>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	2600      	movs	r6, #0
 80049f0:	42a6      	cmp	r6, r4
 80049f2:	d109      	bne.n	8004a08 <__libc_init_array+0x24>
 80049f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004a24 <__libc_init_array+0x40>)
 80049f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004a28 <__libc_init_array+0x44>)
 80049f8:	f000 f818 	bl	8004a2c <_init>
 80049fc:	1b64      	subs	r4, r4, r5
 80049fe:	10a4      	asrs	r4, r4, #2
 8004a00:	2600      	movs	r6, #0
 8004a02:	42a6      	cmp	r6, r4
 8004a04:	d105      	bne.n	8004a12 <__libc_init_array+0x2e>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0c:	4798      	blx	r3
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7ee      	b.n	80049f0 <__libc_init_array+0xc>
 8004a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a16:	4798      	blx	r3
 8004a18:	3601      	adds	r6, #1
 8004a1a:	e7f2      	b.n	8004a02 <__libc_init_array+0x1e>
 8004a1c:	08004a8c 	.word	0x08004a8c
 8004a20:	08004a8c 	.word	0x08004a8c
 8004a24:	08004a8c 	.word	0x08004a8c
 8004a28:	08004a90 	.word	0x08004a90

08004a2c <_init>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr

08004a38 <_fini>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr
